{"expireTime":9007200882706184000,"key":"gatsby-plugin-mdx-entire-payload-0baa157d2cf95dc296cd361ade1269fd-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Input/output in String","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":31,"offset":30},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":31,"offset":30},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is also called as run time initialization. The integers, character and float data types are read by using functions such as scanf(), gets, etc. Similarly, to read a string two functions are used. They are","position":{"start":{"line":2,"column":1,"offset":31},"end":{"line":2,"column":210,"offset":240},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":31},"end":{"line":2,"column":210,"offset":240},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"scanf()","position":{"start":{"line":4,"column":4,"offset":245},"end":{"line":4,"column":11,"offset":252},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":245},"end":{"line":4,"column":11,"offset":252},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":242},"end":{"line":4,"column":11,"offset":252},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gets()","position":{"start":{"line":5,"column":4,"offset":256},"end":{"line":5,"column":10,"offset":262},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":256},"end":{"line":5,"column":10,"offset":262},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":253},"end":{"line":5,"column":10,"offset":262},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":242},"end":{"line":5,"column":10,"offset":262},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reading Strings Using scanf ( )","position":{"start":{"line":6,"column":4,"offset":266},"end":{"line":6,"column":35,"offset":297},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":263},"end":{"line":6,"column":35,"offset":297},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To read strings using scanf() format specifier %s is used with the function scanf().For example","position":{"start":{"line":7,"column":3,"offset":300},"end":{"line":7,"column":98,"offset":395},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":300},"end":{"line":7,"column":98,"offset":395},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":298},"end":{"line":7,"column":98,"offset":395},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":298},"end":{"line":7,"column":98,"offset":395},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char name[10];","position":{"start":{"line":8,"column":1,"offset":396},"end":{"line":10,"column":4,"offset":420},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To input data in to char array ’name’, scanf function and %s is used as given below.","position":{"start":{"line":11,"column":3,"offset":423},"end":{"line":11,"column":87,"offset":507},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":423},"end":{"line":11,"column":87,"offset":507},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":421},"end":{"line":11,"column":87,"offset":507},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":421},"end":{"line":11,"column":87,"offset":507},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"scanf(\"%s\",name);","position":{"start":{"line":12,"column":1,"offset":508},"end":{"line":14,"column":4,"offset":535},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Note that the %s format specifier doesn’t require the ampersand (&) symbol before the variable name.","position":{"start":{"line":15,"column":3,"offset":538},"end":{"line":15,"column":103,"offset":638},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":538},"end":{"line":15,"column":103,"offset":638},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":536},"end":{"line":15,"column":103,"offset":638},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The major limitation of scanf() is that it reads until occurrence of first separator a white space characters such as space character, tab or new line and store it into given variable.","position":{"start":{"line":16,"column":3,"offset":641},"end":{"line":16,"column":187,"offset":825},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":641},"end":{"line":16,"column":187,"offset":825},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":639},"end":{"line":16,"column":187,"offset":825},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For example if the input literal is “How are you?”. Then the scanf statement will read only the word ‘How’ into the variable name.","position":{"start":{"line":17,"column":3,"offset":828},"end":{"line":17,"column":133,"offset":958},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":828},"end":{"line":17,"column":133,"offset":958},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":826},"end":{"line":17,"column":133,"offset":958},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To overcome this limitation, gets() and getchar() functions are used.","position":{"start":{"line":18,"column":3,"offset":961},"end":{"line":18,"column":72,"offset":1030},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":961},"end":{"line":18,"column":72,"offset":1030},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":959},"end":{"line":18,"column":72,"offset":1030},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":536},"end":{"line":18,"column":72,"offset":1030},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reading Strings using gets( )","position":{"start":{"line":19,"column":4,"offset":1034},"end":{"line":19,"column":33,"offset":1063},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1031},"end":{"line":19,"column":33,"offset":1063},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The gets() functions reads the string from the keyboard including spaces until the enter key is not pressed. The getchar() function is used to get a single charater. The gets() and getchar() functions are defined in stdio.h library file. For example","position":{"start":{"line":20,"column":3,"offset":1066},"end":{"line":20,"column":252,"offset":1315},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1066},"end":{"line":20,"column":252,"offset":1315},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1064},"end":{"line":20,"column":252,"offset":1315},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1064},"end":{"line":20,"column":252,"offset":1315},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char line[100];\nprintf(\"Enter a line:\\n\");\ngets(line);\nputs(\"Entered input is :\\n\");\nputs(line);","position":{"start":{"line":21,"column":1,"offset":1316},"end":{"line":27,"column":4,"offset":1422},"indent":[1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The gets() function keeps reading characters from the standard input stream until a new line character or end-of-file is encountered.","position":{"start":{"line":28,"column":3,"offset":1425},"end":{"line":28,"column":136,"offset":1558},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1425},"end":{"line":28,"column":136,"offset":1558},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1423},"end":{"line":28,"column":136,"offset":1558},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Instead of saving the new line character, the gets() function appends a null character to the array that is referenced by the argument to the gets() function.","position":{"start":{"line":29,"column":3,"offset":1561},"end":{"line":29,"column":161,"offset":1719},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1561},"end":{"line":29,"column":161,"offset":1719},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1559},"end":{"line":29,"column":161,"offset":1719},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1423},"end":{"line":29,"column":161,"offset":1719},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Print strings","position":{"start":{"line":30,"column":4,"offset":1723},"end":{"line":30,"column":17,"offset":1736},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1720},"end":{"line":30,"column":17,"offset":1736},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To out put data of the given string two functions are used. They are","position":{"start":{"line":31,"column":3,"offset":1739},"end":{"line":31,"column":71,"offset":1807},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1739},"end":{"line":31,"column":71,"offset":1807},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1737},"end":{"line":31,"column":71,"offset":1807},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1737},"end":{"line":31,"column":71,"offset":1807},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"printf()","position":{"start":{"line":33,"column":4,"offset":1812},"end":{"line":33,"column":12,"offset":1820},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1812},"end":{"line":33,"column":12,"offset":1820},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1809},"end":{"line":34,"column":1,"offset":1821},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"puts ()","position":{"start":{"line":35,"column":4,"offset":1825},"end":{"line":35,"column":11,"offset":1832},"indent":[]}}],"position":{"start":{"line":35,"column":4,"offset":1825},"end":{"line":35,"column":11,"offset":1832},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1822},"end":{"line":35,"column":11,"offset":1832},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1809},"end":{"line":35,"column":11,"offset":1832},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Printing strings using printf()","position":{"start":{"line":37,"column":4,"offset":1837},"end":{"line":37,"column":35,"offset":1868},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1834},"end":{"line":37,"column":35,"offset":1868},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The printf statement along with format specifier %s is used to print strings on the screen. The format %s can be used to display an array of characters that is terminated by the null character. For example,","position":{"start":{"line":38,"column":3,"offset":1871},"end":{"line":38,"column":209,"offset":2077},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1871},"end":{"line":38,"column":209,"offset":2077},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1869},"end":{"line":38,"column":209,"offset":2077},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1869},"end":{"line":38,"column":209,"offset":2077},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"printf(“%s”, name);","position":{"start":{"line":39,"column":1,"offset":2078},"end":{"line":41,"column":4,"offset":2107},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It can be used to display the entire contents of the array name.","position":{"start":{"line":42,"column":3,"offset":2110},"end":{"line":42,"column":67,"offset":2174},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2110},"end":{"line":42,"column":67,"offset":2174},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2108},"end":{"line":42,"column":67,"offset":2174},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Printf expects to receive a string as an additional parameter when it sees %s in the format string.","position":{"start":{"line":43,"column":3,"offset":2177},"end":{"line":43,"column":102,"offset":2276},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2177},"end":{"line":43,"column":102,"offset":2276},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2175},"end":{"line":43,"column":102,"offset":2276},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This additional parameter","position":{"start":{"line":44,"column":3,"offset":2279},"end":{"line":44,"column":28,"offset":2304},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":2279},"end":{"line":44,"column":28,"offset":2304},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" – Can be from a character array.","position":{"start":{"line":46,"column":3,"offset":2308},"end":{"line":46,"column":36,"offset":2341},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2308},"end":{"line":46,"column":36,"offset":2341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" – Can be another literal string.","position":{"start":{"line":48,"column":3,"offset":2345},"end":{"line":48,"column":36,"offset":2378},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2345},"end":{"line":48,"column":36,"offset":2378},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" – Can be from a character pointer","position":{"start":{"line":50,"column":3,"offset":2382},"end":{"line":50,"column":37,"offset":2416},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2382},"end":{"line":50,"column":37,"offset":2416},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2277},"end":{"line":51,"column":1,"offset":2417},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Printf knows how much to print out because of the NULL character at the end of all strings. When printf() encounters a null\\0, it stops printing. The string variable can be printed out with precision using printf() statement.","position":{"start":{"line":52,"column":3,"offset":2420},"end":{"line":52,"column":228,"offset":2645},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":2420},"end":{"line":52,"column":228,"offset":2645},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2418},"end":{"line":52,"column":228,"offset":2645},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2108},"end":{"line":52,"column":228,"offset":2645},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Printing strings using puts( )","position":{"start":{"line":54,"column":4,"offset":2650},"end":{"line":54,"column":34,"offset":2680},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2647},"end":{"line":54,"column":34,"offset":2680},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The puts function is a much simpler output function than printf for string printing. Prototype of puts is defined in stdio.h For example:","position":{"start":{"line":55,"column":3,"offset":2683},"end":{"line":55,"column":140,"offset":2820},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":2683},"end":{"line":55,"column":140,"offset":2820},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2681},"end":{"line":55,"column":140,"offset":2820},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2681},"end":{"line":55,"column":140,"offset":2820},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char sentence[] = \"This is strings in C \\n\";\nputs(sentence);\nThis Prints out:\nThis is strings in C","position":{"start":{"line":56,"column":1,"offset":2821},"end":{"line":61,"column":4,"offset":2929},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Consider a simple program to understand string input and output functions.","position":{"start":{"line":62,"column":3,"offset":2932},"end":{"line":62,"column":77,"offset":3006},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":2932},"end":{"line":62,"column":77,"offset":3006},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2930},"end":{"line":62,"column":77,"offset":3006},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2930},"end":{"line":62,"column":77,"offset":3006},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"#include<stdio.h>\nmain()\n    {\n    char str[80] ; Char str2[45];\n    printf(\"Enter a string: \") ;\n    gets(str1) ;\n    printf(\"Enter another string: \") ;\n    scanf(“%s“,str2); /*Reads upto first white space character*/\n    Printf(“output of first string:\\n”);\n    printf(\"%s\" , str1\\n);\n    Printf(“output of second string:\\n”);\n    puts(“str2 “)\n    }","position":{"start":{"line":63,"column":1,"offset":3007},"end":{"line":77,"column":4,"offset":3369},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nInput:\nEnter a string: This is c language.\nEnter another string: This is strings\nOutput:\nOutput of first string: This is c language\nOutput of second string: This","position":{"start":{"line":78,"column":1,"offset":3370},"end":{"line":86,"column":4,"offset":3547},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"String Input/Ouput in C\",\"category\":\"Basic C Programming\",\"author\":\"Anonymous\",\"tags\":[\"#c\",\"#tutorial\"],\"thumbnailText\":\"C Programming Tutorial-29\",\"date\":\"2021-03-03T00:00:00.000Z\"}","position":{"start":{"line":88,"column":1,"offset":3549},"end":{"line":88,"column":222,"offset":3770},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":88,"column":222,"offset":3770}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"String Input/Ouput in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-29\",\n  \"date\": \"2021-03-03T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"data-inputoutput-in-string\"\n  }, \"Data Input/output in String\"), mdx(\"p\", null, \"This is also called as run time initialization. The integers, character and float data types are read by using functions such as scanf(), gets, etc. Similarly, to read a string two functions are used. They are\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"scanf()\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"gets()\")), mdx(\"h2\", {\n    \"id\": \"reading-strings-using-scanf--\"\n  }, \"Reading Strings Using scanf ( )\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To read strings using scanf() format specifier %s is used with the function scanf().For example\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char name[10];\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To input data in to char array \\u2019name\\u2019, scanf function and %s is used as given below.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"scanf(\\\"%s\\\",name);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that the %s format specifier doesn\\u2019t require the ampersand (&) symbol before the variable name.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The major limitation of scanf() is that it reads until occurrence of first separator a white space characters such as space character, tab or new line and store it into given variable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example if the input literal is \\u201CHow are you?\\u201D. Then the scanf statement will read only the word \\u2018How\\u2019 into the variable name.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To overcome this limitation, gets() and getchar() functions are used.\")), mdx(\"h2\", {\n    \"id\": \"reading-strings-using-gets-\"\n  }, \"Reading Strings using gets( )\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The gets() functions reads the string from the keyboard including spaces until the enter key is not pressed. The getchar() function is used to get a single charater. The gets() and getchar() functions are defined in stdio.h library file. For example\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char line[100];\\nprintf(\\\"Enter a line:\\\\n\\\");\\ngets(line);\\nputs(\\\"Entered input is :\\\\n\\\");\\nputs(line);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The gets() function keeps reading characters from the standard input stream until a new line character or end-of-file is encountered.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead of saving the new line character, the gets() function appends a null character to the array that is referenced by the argument to the gets() function.\")), mdx(\"h2\", {\n    \"id\": \"print-strings\"\n  }, \"Print strings\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To out put data of the given string two functions are used. They are\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"printf()\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"puts ()\"))), mdx(\"h2\", {\n    \"id\": \"printing-strings-using-printf\"\n  }, \"Printing strings using printf()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The printf statement along with format specifier %s is used to print strings on the screen. The format %s can be used to display an array of characters that is terminated by the null character. For example,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"printf(\\u201C%s\\u201D, name);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It can be used to display the entire contents of the array name.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Printf expects to receive a string as an additional parameter when it sees %s in the format string.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This additional parameter\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" \\u2013 Can be from a character array.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" \\u2013 Can be another literal string.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \" \\u2013 Can be from a character pointer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Printf knows how much to print out because of the NULL character at the end of all strings. When printf() encounters a null\\\\0, it stops printing. The string variable can be printed out with precision using printf() statement.\"))), mdx(\"h2\", {\n    \"id\": \"printing-strings-using-puts-\"\n  }, \"Printing strings using puts( )\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The puts function is a much simpler output function than printf for string printing. Prototype of puts is defined in stdio.h For example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char sentence[] = \\\"This is strings in C \\\\n\\\";\\nputs(sentence);\\nThis Prints out:\\nThis is strings in C\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consider a simple program to understand string input and output functions.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"#include<stdio.h>\\nmain()\\n    {\\n    char str[80] ; Char str2[45];\\n    printf(\\\"Enter a string: \\\") ;\\n    gets(str1) ;\\n    printf(\\\"Enter another string: \\\") ;\\n    scanf(\\u201C%s\\u201C,str2); /*Reads upto first white space character*/\\n    Printf(\\u201Coutput of first string:\\\\n\\u201D);\\n    printf(\\\"%s\\\" , str1\\\\n);\\n    Printf(\\u201Coutput of second string:\\\\n\\u201D);\\n    puts(\\u201Cstr2 \\u201C)\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nInput:\\nEnter a string: This is c language.\\nEnter another string: This is strings\\nOutput:\\nOutput of first string: This is c language\\nOutput of second string: This\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"String Input/Ouput in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-29\",\n  \"date\": \"2021-03-03T00:00:00.000Z\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"data-inputoutput-in-string\"\n    }}>{`Data Input/output in String`}</h2>\n    <p>{`This is also called as run time initialization. The integers, character and float data types are read by using functions such as scanf(), gets, etc. Similarly, to read a string two functions are used. They are`}</p>\n    <ol>\n      <li parentName=\"ol\">{`scanf()`}</li>\n      <li parentName=\"ol\">{`gets()`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"reading-strings-using-scanf--\"\n    }}>{`Reading Strings Using scanf ( )`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To read strings using scanf() format specifier %s is used with the function scanf().For example`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char name[10];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To input data in to char array ’name’, scanf function and %s is used as given below.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`scanf(\"%s\",name);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Note that the %s format specifier doesn’t require the ampersand (&) symbol before the variable name.`}</li>\n      <li parentName=\"ul\">{`The major limitation of scanf() is that it reads until occurrence of first separator a white space characters such as space character, tab or new line and store it into given variable.`}</li>\n      <li parentName=\"ul\">{`For example if the input literal is “How are you?”. Then the scanf statement will read only the word ‘How’ into the variable name.`}</li>\n      <li parentName=\"ul\">{`To overcome this limitation, gets() and getchar() functions are used.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"reading-strings-using-gets-\"\n    }}>{`Reading Strings using gets( )`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The gets() functions reads the string from the keyboard including spaces until the enter key is not pressed. The getchar() function is used to get a single charater. The gets() and getchar() functions are defined in stdio.h library file. For example`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char line[100];\nprintf(\"Enter a line:\\\\n\");\ngets(line);\nputs(\"Entered input is :\\\\n\");\nputs(line);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The gets() function keeps reading characters from the standard input stream until a new line character or end-of-file is encountered.`}</li>\n      <li parentName=\"ul\">{`Instead of saving the new line character, the gets() function appends a null character to the array that is referenced by the argument to the gets() function.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"print-strings\"\n    }}>{`Print strings`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To out put data of the given string two functions are used. They are`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`printf()`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`puts ()`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"printing-strings-using-printf\"\n    }}>{`Printing strings using printf()`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The printf statement along with format specifier %s is used to print strings on the screen. The format %s can be used to display an array of characters that is terminated by the null character. For example,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`printf(“%s”, name);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`It can be used to display the entire contents of the array name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Printf expects to receive a string as an additional parameter when it sees %s in the format string.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This additional parameter`}</p>\n        <p parentName=\"li\">{` – Can be from a character array.`}</p>\n        <p parentName=\"li\">{` – Can be another literal string.`}</p>\n        <p parentName=\"li\">{` – Can be from a character pointer`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Printf knows how much to print out because of the NULL character at the end of all strings. When printf() encounters a null\\\\0, it stops printing. The string variable can be printed out with precision using printf() statement.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"printing-strings-using-puts-\"\n    }}>{`Printing strings using puts( )`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The puts function is a much simpler output function than printf for string printing. Prototype of puts is defined in stdio.h For example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char sentence[] = \"This is strings in C \\\\n\";\nputs(sentence);\nThis Prints out:\nThis is strings in C\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Consider a simple program to understand string input and output functions.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`#include<stdio.h>\nmain()\n    {\n    char str[80] ; Char str2[45];\n    printf(\"Enter a string: \") ;\n    gets(str1) ;\n    printf(\"Enter another string: \") ;\n    scanf(“%s“,str2); /*Reads upto first white space character*/\n    Printf(“output of first string:\\\\n”);\n    printf(\"%s\" , str1\\\\n);\n    Printf(“output of second string:\\\\n”);\n    puts(“str2 “)\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nInput:\nEnter a string: This is c language.\nEnter another string: This is strings\nOutput:\nOutput of first string: This is c language\nOutput of second string: This\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}