{"expireTime":9007200882776224000,"key":"gatsby-plugin-mdx-entire-payload-510ef5690cdcacf23ca33c039b045ea5-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer Initialization and Declaration","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":42,"offset":41},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":42,"offset":41},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In C every variable must be declared before it is used. Since pointer is a special variable, its declaration is also different. An operator called dereference operator or indirection operator is used to declare a Pointer. It is represented by ","position":{"start":{"line":2,"column":1,"offset":42},"end":{"line":2,"column":244,"offset":285},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"(asterisk). The ‘","position":{"start":{"line":2,"column":245,"offset":286},"end":{"line":2,"column":262,"offset":303},"indent":[]}}],"position":{"start":{"line":2,"column":244,"offset":285},"end":{"line":2,"column":263,"offset":304},"indent":[]}},{"type":"text","value":"’ symbol appears in C language in four different situations with four different meanings. Two of these are well known.","position":{"start":{"line":2,"column":263,"offset":304},"end":{"line":2,"column":381,"offset":422},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":42},"end":{"line":2,"column":381,"offset":422},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Comments/","position":{"start":{"line":4,"column":4,"offset":427},"end":{"line":4,"column":13,"offset":436},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"…","position":{"start":{"line":4,"column":14,"offset":437},"end":{"line":4,"column":15,"offset":438},"indent":[]}}],"position":{"start":{"line":4,"column":13,"offset":436},"end":{"line":4,"column":16,"offset":439},"indent":[]}},{"type":"text","value":"/","position":{"start":{"line":4,"column":16,"offset":439},"end":{"line":4,"column":17,"offset":440},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":427},"end":{"line":4,"column":17,"offset":440},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":424},"end":{"line":5,"column":1,"offset":441},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Arithmetic operator for multiplication as in a*b","position":{"start":{"line":6,"column":4,"offset":445},"end":{"line":6,"column":52,"offset":493},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":445},"end":{"line":6,"column":52,"offset":493},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":442},"end":{"line":7,"column":1,"offset":494},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declaring pointer variable using *(dereference operator)","position":{"start":{"line":8,"column":4,"offset":498},"end":{"line":8,"column":60,"offset":554},"indent":[]}}],"position":{"start":{"line":8,"column":4,"offset":498},"end":{"line":8,"column":60,"offset":554},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":495},"end":{"line":8,"column":60,"offset":554},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":424},"end":{"line":8,"column":60,"offset":554},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Usage of deference operator in comment can be easily recognized. Multiplication needs two operands; this can also be easily recognized. When it appears in a declaration as int *p, read it is read as p is a pointer to an integer. The syntax of pointer declaration is","position":{"start":{"line":10,"column":1,"offset":556},"end":{"line":10,"column":266,"offset":821},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":556},"end":{"line":10,"column":266,"offset":821},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"data-type *variable-name;","position":{"start":{"line":11,"column":1,"offset":822},"end":{"line":13,"column":4,"offset":855},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here data type can be int, float, char etc and the dereference operator before the int variable variable-name tells that it is a pointer variable.","position":{"start":{"line":14,"column":3,"offset":858},"end":{"line":14,"column":149,"offset":1004},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":858},"end":{"line":14,"column":149,"offset":1004},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":856},"end":{"line":14,"column":149,"offset":1004},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Hence the pointer variable variable-name holds the address of another variable of the same data type.","position":{"start":{"line":15,"column":3,"offset":1007},"end":{"line":15,"column":104,"offset":1108},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1007},"end":{"line":15,"column":104,"offset":1108},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1005},"end":{"line":15,"column":104,"offset":1108},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For example, A pointer is declared by assigning an asterisk (*) in front of the variable name in the declaration statement.","position":{"start":{"line":16,"column":3,"offset":1111},"end":{"line":16,"column":126,"offset":1234},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1111},"end":{"line":16,"column":126,"offset":1234},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1109},"end":{"line":16,"column":126,"offset":1234},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":856},"end":{"line":16,"column":126,"offset":1234},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"int x; /* define x */\nint *ptr; /* define a pointer to x */\nint *p; p is a pointer to an integer.","position":{"start":{"line":17,"column":1,"offset":1235},"end":{"line":21,"column":4,"offset":1342},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Similarly pointer to char and float can be declared","position":{"start":{"line":22,"column":3,"offset":1345},"end":{"line":22,"column":54,"offset":1396},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1345},"end":{"line":22,"column":54,"offset":1396},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1343},"end":{"line":22,"column":54,"offset":1396},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1343},"end":{"line":22,"column":54,"offset":1396},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char *q; q is a pointer to a char.\nfloat *fp; fp is a pointer to float.","position":{"start":{"line":23,"column":1,"offset":1397},"end":{"line":26,"column":4,"offset":1478},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer Declaration Styles","position":{"start":{"line":27,"column":4,"offset":1482},"end":{"line":27,"column":30,"offset":1508},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1479},"end":{"line":27,"column":30,"offset":1508},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The dereference operator (*) can appear anywhere between the data type name and the pointer variable name as shown below.,","position":{"start":{"line":28,"column":3,"offset":1511},"end":{"line":28,"column":125,"offset":1633},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1511},"end":{"line":28,"column":125,"offset":1633},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1509},"end":{"line":28,"column":125,"offset":1633},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1509},"end":{"line":28,"column":125,"offset":1633},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int * p; /*style 1 between the data type and variable*/\nint *p; /*style 2 Close to varible*/\nint* p; /*style 3 close to data type.*/\nMultiple pointers of same data type can be declared as given below.\n\nint *p, x, *q;\nHere p and q are pointer variables and x is integer variable.","position":{"start":{"line":29,"column":1,"offset":1634},"end":{"line":37,"column":4,"offset":1922},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer Initialization","position":{"start":{"line":38,"column":4,"offset":1926},"end":{"line":38,"column":26,"offset":1948},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1923},"end":{"line":38,"column":26,"offset":1948},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To initialize the pointer variable reference operator (&) is used with pointer variable. To understand different types of initialization consider the following examples,","position":{"start":{"line":39,"column":3,"offset":1951},"end":{"line":39,"column":172,"offset":2120},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1951},"end":{"line":39,"column":172,"offset":2120},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1949},"end":{"line":39,"column":172,"offset":2120},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1949},"end":{"line":39,"column":172,"offset":2120},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int i, j, *p;\np = &i;\nint x;\nint*ptr;\nptr=&x; /*Address of x is assigned to pointer variable*/\n*ptr=&x;/*The value of x is assigned to ptr */","position":{"start":{"line":40,"column":1,"offset":2121},"end":{"line":47,"column":4,"offset":2272},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Access variable using pointer","position":{"start":{"line":48,"column":4,"offset":2276},"end":{"line":48,"column":33,"offset":2305},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2273},"end":{"line":48,"column":33,"offset":2305},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Once a pointer has been assigned address of a variable, the value of that variable can be accessed using the pointer. This is done by using unary operator * (asterisk) usually known as indirection operator, dereferencing operator or ‘contain of’ operator.","position":{"start":{"line":49,"column":3,"offset":2308},"end":{"line":49,"column":258,"offset":2563},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2308},"end":{"line":49,"column":258,"offset":2563},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2306},"end":{"line":49,"column":258,"offset":2563},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2306},"end":{"line":49,"column":258,"offset":2563},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"For example:\n\nint marks,*p,n;\nmarks=79;\np=&marks;\nn=*p;","position":{"start":{"line":50,"column":1,"offset":2564},"end":{"line":57,"column":4,"offset":2629},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The first line declares marks and n as integer variables and p as a pointer variable pointing to an integer.","position":{"start":{"line":58,"column":3,"offset":2632},"end":{"line":58,"column":111,"offset":2740},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":2632},"end":{"line":58,"column":111,"offset":2740},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2630},"end":{"line":58,"column":111,"offset":2740},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The second line assigns value 79 to variable marks and","position":{"start":{"line":59,"column":3,"offset":2743},"end":{"line":59,"column":57,"offset":2797},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":2743},"end":{"line":59,"column":57,"offset":2797},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2741},"end":{"line":59,"column":57,"offset":2797},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The third line assigns address of variable marks to pointer p.","position":{"start":{"line":60,"column":3,"offset":2800},"end":{"line":60,"column":65,"offset":2862},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":2800},"end":{"line":60,"column":65,"offset":2862},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2798},"end":{"line":60,"column":65,"offset":2862},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The fourth line contains indirection operator *.","position":{"start":{"line":61,"column":3,"offset":2865},"end":{"line":61,"column":51,"offset":2913},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":2865},"end":{"line":61,"column":51,"offset":2913},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2863},"end":{"line":61,"column":51,"offset":2913},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When * is placed before a pointer variable in an expression, the pointer returns value of the variable of pointer.","position":{"start":{"line":62,"column":3,"offset":2916},"end":{"line":62,"column":117,"offset":3030},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":2916},"end":{"line":62,"column":117,"offset":3030},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2914},"end":{"line":62,"column":117,"offset":3030},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In above case *p returns value of variable marks because p contains the address of marks.","position":{"start":{"line":63,"column":3,"offset":3033},"end":{"line":63,"column":92,"offset":3122},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":3033},"end":{"line":63,"column":92,"offset":3122},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3031},"end":{"line":63,"column":92,"offset":3122},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The * can be remembered as ‘value at address’. Thus value of n would be 79.","position":{"start":{"line":64,"column":3,"offset":3125},"end":{"line":64,"column":78,"offset":3200},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":3125},"end":{"line":64,"column":78,"offset":3200},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3123},"end":{"line":64,"column":78,"offset":3200},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2630},"end":{"line":64,"column":78,"offset":3200},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"p=&marks;\nn=*p;\nis equivalent to:\nn=*&marks","position":{"start":{"line":65,"column":1,"offset":3201},"end":{"line":70,"column":4,"offset":3254},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer Arithmetic Operation","position":{"start":{"line":71,"column":4,"offset":3258},"end":{"line":71,"column":32,"offset":3286},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3255},"end":{"line":71,"column":32,"offset":3286},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Like other variables pointer variables can be used in arithmetic operations.","position":{"start":{"line":73,"column":3,"offset":3290},"end":{"line":73,"column":79,"offset":3366},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":3290},"end":{"line":73,"column":79,"offset":3366},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3288},"end":{"line":73,"column":79,"offset":3366},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3288},"end":{"line":73,"column":79,"offset":3366},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Example:\nint *p, x=10;\np = &x;\n*p=*p+5;\nThis statement with add the value 5 in the value pointed by p.","position":{"start":{"line":74,"column":1,"offset":3367},"end":{"line":80,"column":4,"offset":3479},"indent":[1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Integer pointers are incremented or decremented in the multiples of 2. Similarly character by 1, float by 4 and long pointers by 8 etc.","position":{"start":{"line":81,"column":3,"offset":3482},"end":{"line":81,"column":138,"offset":3617},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":3482},"end":{"line":81,"column":138,"offset":3617},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3480},"end":{"line":81,"column":138,"offset":3617},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3480},"end":{"line":81,"column":138,"offset":3617},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"p++; /* valid */","position":{"start":{"line":82,"column":1,"offset":3618},"end":{"line":84,"column":4,"offset":3644},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We cannot add or subtract one pointer from another. Example:","position":{"start":{"line":85,"column":3,"offset":3647},"end":{"line":85,"column":63,"offset":3707},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":3647},"end":{"line":85,"column":63,"offset":3707},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3645},"end":{"line":85,"column":63,"offset":3707},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3645},"end":{"line":85,"column":63,"offset":3707},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int *p1, *p2;\np1 = p1 + p2; /* invalid */","position":{"start":{"line":86,"column":1,"offset":3708},"end":{"line":89,"column":4,"offset":3759},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can add or subtract the constant from pointer variable. In this case value of pointer is incremented or decremented by the scaling factor of respective data type. Example:","position":{"start":{"line":90,"column":3,"offset":3762},"end":{"line":90,"column":177,"offset":3936},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":3762},"end":{"line":90,"column":177,"offset":3936},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3760},"end":{"line":90,"column":177,"offset":3936},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3760},"end":{"line":90,"column":177,"offset":3936},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"p = p + 2; /* valid */","position":{"start":{"line":91,"column":1,"offset":3937},"end":{"line":93,"column":4,"offset":3969},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multiplication and Division on pointers","position":{"start":{"line":94,"column":4,"offset":3973},"end":{"line":94,"column":43,"offset":4012},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3970},"end":{"line":94,"column":43,"offset":4012},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The value stored at pointers Address can be added or subtracted by any constant value. Example:","position":{"start":{"line":96,"column":3,"offset":4016},"end":{"line":96,"column":98,"offset":4111},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":4016},"end":{"line":96,"column":98,"offset":4111},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4014},"end":{"line":96,"column":98,"offset":4111},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4014},"end":{"line":96,"column":98,"offset":4111},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"*p = *p * 4; /* valid */","position":{"start":{"line":97,"column":1,"offset":4112},"end":{"line":99,"column":4,"offset":4146},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We cannot use two pointers for multiplication or division. That is,","position":{"start":{"line":100,"column":3,"offset":4149},"end":{"line":100,"column":70,"offset":4216},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":4149},"end":{"line":100,"column":70,"offset":4216},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4147},"end":{"line":100,"column":70,"offset":4216},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4147},"end":{"line":100,"column":70,"offset":4216},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"x = x * y;\nx = x / y;\nis not allowed.","position":{"start":{"line":101,"column":1,"offset":4217},"end":{"line":105,"column":4,"offset":4264},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We cannot multiply or divide a pointer by constant. Example:","position":{"start":{"line":106,"column":3,"offset":4267},"end":{"line":106,"column":63,"offset":4327},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":4267},"end":{"line":106,"column":63,"offset":4327},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":4265},"end":{"line":106,"column":63,"offset":4327},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":4265},"end":{"line":106,"column":63,"offset":4327},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"p = p * 4; /* invalid */\np = p / 2; /* invalid */","position":{"start":{"line":107,"column":1,"offset":4328},"end":{"line":110,"column":4,"offset":4387},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C program to illustrate pointer arithmetic.","position":{"start":{"line":111,"column":5,"offset":4392},"end":{"line":111,"column":67,"offset":4454},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":4388},"end":{"line":111,"column":67,"offset":4454},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate pointer arithmetic.\n/*pointer arithmetic*/\n#include<stdio.h>\nmain()\n    {\n    int x;\n    int*ptr1,*ptr2;\n    x=10;\n    ptr1=&x;\n    ptr2=ptr1+6;\n    printf(“ Value of x=%d\\n“,x);\n    printf(“Value pointed by ptr1 =%d\\n “,*ptr1);\n    printf(“ Address of x pointed by ptr1=%d\\n“, ptr1);\n    printf(“Content of ptr2=(ptr1+6)is =%u “,ptr2);\n    printf(“Value pointed by ptr1=%d “, *ptr2);\n    }","position":{"start":{"line":112,"column":1,"offset":4455},"end":{"line":129,"column":4,"offset":4889},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"OUTPUT:\nValue pointed by ptr1=10\nAddress of x pointed by ptr1=00785614\nContent of ptr2=(ptr1+6)is = 0078561A\nValue pointed by ptr2=8A/* let he value at location 0078561A be 8A */","position":{"start":{"line":130,"column":1,"offset":4890},"end":{"line":136,"column":4,"offset":5076},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer increment and decrement","position":{"start":{"line":137,"column":4,"offset":5080},"end":{"line":137,"column":35,"offset":5111},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":5077},"end":{"line":137,"column":35,"offset":5111},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Integer, float, char, double data type pointers can be incremented and decremented. For all these data types both prefix and post fix increment or decrement is allowed. Integer pointers are incremented or decremented in the multiples of two. Similarly character by one, float by four and double pointers by eight etc.","position":{"start":{"line":138,"column":3,"offset":5114},"end":{"line":138,"column":320,"offset":5431},"indent":[]}}],"position":{"start":{"line":138,"column":3,"offset":5114},"end":{"line":138,"column":320,"offset":5431},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":5112},"end":{"line":138,"column":320,"offset":5431},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":5112},"end":{"line":138,"column":320,"offset":5431},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Let int*p;\nP++ /*valid*/\n++p /*valid*/\np-- /*valid*/\n--p /*valid*/","position":{"start":{"line":139,"column":1,"offset":5432},"end":{"line":145,"column":4,"offset":5508},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C program to illustrate pointer increment operator.","position":{"start":{"line":146,"column":5,"offset":5513},"end":{"line":146,"column":75,"offset":5583},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":5509},"end":{"line":146,"column":75,"offset":5583},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate pointer increment operator.\n#include<stdio.h>\nmain()\n    {\n    int *p1,p;\n    float *f1,f;\n    char *c1,c;\n    p1=&p;\n    f1=&f;\n    c1=&c;\n    printf(“Memory address before increment:\\n\n    int=%p\\n,float=%p\\n, char=%p\\n“,p1,f1,c1);\n    p1++;\n    f1++;\n    c1++;\n    printf(“Memory address after increment:\\n int=%p\\n, float=%p\\n,\n    char=%p\\n“,p1,f1,c1);\n    }","position":{"start":{"line":147,"column":1,"offset":5584},"end":{"line":166,"column":4,"offset":5991},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nMemory address before increment:\nint=0045AF19 /*int Occupies two bytes*/\nfloat=0045AF2B /*float occupies four bytes*/\nchar= 0045AF3E /*character occupies one byte*/\nMemory address after increment:\nint=0045AF1B\nfloat=0045AF2F\nchar= 0045AF3F","position":{"start":{"line":167,"column":1,"offset":5992},"end":{"line":177,"column":4,"offset":6247},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C program to illustrate pointer increment operator.","position":{"start":{"line":178,"column":5,"offset":6252},"end":{"line":178,"column":75,"offset":6322},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":6248},"end":{"line":178,"column":75,"offset":6322},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate pointer increment operator.\n#include<stdio.h>\nmain( )\n    {\n    int x;\n    int *p;\n    x=1000;\n    p=&x;\n    printf(“Pointer value = %d\\n”,p);\n    printf(“Pointer plus one =%d\\n”,p+1);\n    }","position":{"start":{"line":179,"column":1,"offset":6323},"end":{"line":191,"column":4,"offset":6557},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nPointer value = 22F455\nPointer plus one = 22F439","position":{"start":{"line":192,"column":1,"offset":6558},"end":{"line":196,"column":4,"offset":6622},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Analysis:","position":{"start":{"line":197,"column":5,"offset":6627},"end":{"line":197,"column":14,"offset":6636},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":6623},"end":{"line":197,"column":14,"offset":6636},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"223455+1=223439! That is pointer magic! How does C justify that? Well, 223455 is not just a number, C knows it is the address of an integer that takes 4 locations.","position":{"start":{"line":198,"column":3,"offset":6639},"end":{"line":198,"column":166,"offset":6802},"indent":[]}}],"position":{"start":{"line":198,"column":3,"offset":6639},"end":{"line":198,"column":166,"offset":6802},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":6637},"end":{"line":198,"column":166,"offset":6802},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"So 223455,223456, 223457 and 223458 are all together held by the integer. So C interprets +1 as next free location and gives the answer 223459.","position":{"start":{"line":199,"column":3,"offset":6805},"end":{"line":199,"column":146,"offset":6948},"indent":[]}}],"position":{"start":{"line":199,"column":3,"offset":6805},"end":{"line":199,"column":146,"offset":6948},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":6803},"end":{"line":199,"column":146,"offset":6948},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Remember that it need not be continuation of memory location, when a pointer is incremented.","position":{"start":{"line":200,"column":3,"offset":6951},"end":{"line":200,"column":95,"offset":7043},"indent":[]}}],"position":{"start":{"line":200,"column":3,"offset":6951},"end":{"line":200,"column":95,"offset":7043},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":6949},"end":{"line":200,"column":95,"offset":7043},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":6637},"end":{"line":200,"column":95,"offset":7043},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Pointer Initialization and Declaration C\",\"category\":\"Basic C Programming\",\"author\":\"Anonymous\",\"tags\":[\"#c\",\"#tutorial\"],\"thumbnailText\":\"C Programming Tutorial-32\",\"date\":\"2021-02-28T00:00:00.000Z\"}","position":{"start":{"line":202,"column":1,"offset":7045},"end":{"line":202,"column":239,"offset":7283},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":202,"column":239,"offset":7283}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pointer Initialization and Declaration C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-32\",\n  \"date\": \"2021-02-28T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"pointer-initialization-and-declaration\"\n  }, \"Pointer Initialization and Declaration\"), mdx(\"p\", null, \"In C every variable must be declared before it is used. Since pointer is a special variable, its declaration is also different. An operator called dereference operator or indirection operator is used to declare a Pointer. It is represented by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(asterisk). The \\u2018\"), \"\\u2019 symbol appears in C language in four different situations with four different meanings. Two of these are well known.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Comments/\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u2026\"), \"/\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Arithmetic operator for multiplication as in a*b\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Declaring pointer variable using *(dereference operator)\"))), mdx(\"p\", null, \"Usage of deference operator in comment can be easily recognized. Multiplication needs two operands; this can also be easily recognized. When it appears in a declaration as int *p, read it is read as p is a pointer to an integer. The syntax of pointer declaration is\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"data-type *variable-name;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here data type can be int, float, char etc and the dereference operator before the int variable variable-name tells that it is a pointer variable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hence the pointer variable variable-name holds the address of another variable of the same data type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, A pointer is declared by assigning an asterisk (*) in front of the variable name in the declaration statement.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int x; /* define x */\\nint *ptr; /* define a pointer to x */\\nint *p; p is a pointer to an integer.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly pointer to char and float can be declared\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char *q; q is a pointer to a char.\\nfloat *fp; fp is a pointer to float.\\n\")), mdx(\"h2\", {\n    \"id\": \"pointer-declaration-styles\"\n  }, \"Pointer Declaration Styles\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The dereference operator (*) can appear anywhere between the data type name and the pointer variable name as shown below.,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int * p; /*style 1 between the data type and variable*/\\nint *p; /*style 2 Close to varible*/\\nint* p; /*style 3 close to data type.*/\\nMultiple pointers of same data type can be declared as given below.\\n\\nint *p, x, *q;\\nHere p and q are pointer variables and x is integer variable.\\n\")), mdx(\"h2\", {\n    \"id\": \"pointer-initialization\"\n  }, \"Pointer Initialization\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To initialize the pointer variable reference operator (&) is used with pointer variable. To understand different types of initialization consider the following examples,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int i, j, *p;\\np = &i;\\nint x;\\nint*ptr;\\nptr=&x; /*Address of x is assigned to pointer variable*/\\n*ptr=&x;/*The value of x is assigned to ptr */\\n\")), mdx(\"h2\", {\n    \"id\": \"access-variable-using-pointer\"\n  }, \"Access variable using pointer\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once a pointer has been assigned address of a variable, the value of that variable can be accessed using the pointer. This is done by using unary operator * (asterisk) usually known as indirection operator, dereferencing operator or \\u2018contain of\\u2019 operator.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"For example:\\n\\nint marks,*p,n;\\nmarks=79;\\np=&marks;\\nn=*p;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The first line declares marks and n as integer variables and p as a pointer variable pointing to an integer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The second line assigns value 79 to variable marks and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The third line assigns address of variable marks to pointer p.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The fourth line contains indirection operator *.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When * is placed before a pointer variable in an expression, the pointer returns value of the variable of pointer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In above case *p returns value of variable marks because p contains the address of marks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The * can be remembered as \\u2018value at address\\u2019. Thus value of n would be 79.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"p=&marks;\\nn=*p;\\nis equivalent to:\\nn=*&marks\\n\")), mdx(\"h2\", {\n    \"id\": \"pointer-arithmetic-operation\"\n  }, \"Pointer Arithmetic Operation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Like other variables pointer variables can be used in arithmetic operations.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Example:\\nint *p, x=10;\\np = &x;\\n*p=*p+5;\\nThis statement with add the value 5 in the value pointed by p.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integer pointers are incremented or decremented in the multiples of 2. Similarly character by 1, float by 4 and long pointers by 8 etc.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"p++; /* valid */\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We cannot add or subtract one pointer from another. Example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int *p1, *p2;\\np1 = p1 + p2; /* invalid */\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can add or subtract the constant from pointer variable. In this case value of pointer is incremented or decremented by the scaling factor of respective data type. Example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"p = p + 2; /* valid */\\n\")), mdx(\"h2\", {\n    \"id\": \"multiplication-and-division-on-pointers\"\n  }, \"Multiplication and Division on pointers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The value stored at pointers Address can be added or subtracted by any constant value. Example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"*p = *p * 4; /* valid */\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We cannot use two pointers for multiplication or division. That is,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"x = x * y;\\nx = x / y;\\nis not allowed.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We cannot multiply or divide a pointer by constant. Example:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"p = p * 4; /* invalid */\\np = p / 2; /* invalid */\\n\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-pointer-arithmetic\"\n  }, \"Example-1: Write a C program to illustrate pointer arithmetic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate pointer arithmetic.\\n/*pointer arithmetic*/\\n#include<stdio.h>\\nmain()\\n    {\\n    int x;\\n    int*ptr1,*ptr2;\\n    x=10;\\n    ptr1=&x;\\n    ptr2=ptr1+6;\\n    printf(\\u201C Value of x=%d\\\\n\\u201C,x);\\n    printf(\\u201CValue pointed by ptr1 =%d\\\\n \\u201C,*ptr1);\\n    printf(\\u201C Address of x pointed by ptr1=%d\\\\n\\u201C, ptr1);\\n    printf(\\u201CContent of ptr2=(ptr1+6)is =%u \\u201C,ptr2);\\n    printf(\\u201CValue pointed by ptr1=%d \\u201C, *ptr2);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OUTPUT:\\nValue pointed by ptr1=10\\nAddress of x pointed by ptr1=00785614\\nContent of ptr2=(ptr1+6)is = 0078561A\\nValue pointed by ptr2=8A/* let he value at location 0078561A be 8A */\\n\")), mdx(\"h2\", {\n    \"id\": \"pointer-increment-and-decrement\"\n  }, \"Pointer increment and decrement\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integer, float, char, double data type pointers can be incremented and decremented. For all these data types both prefix and post fix increment or decrement is allowed. Integer pointers are incremented or decremented in the multiples of two. Similarly character by one, float by four and double pointers by eight etc.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Let int*p;\\nP++ /*valid*/\\n++p /*valid*/\\np-- /*valid*/\\n--p /*valid*/\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-pointer-increment-operator\"\n  }, \"Example-2: Write a C program to illustrate pointer increment operator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate pointer increment operator.\\n#include<stdio.h>\\nmain()\\n    {\\n    int *p1,p;\\n    float *f1,f;\\n    char *c1,c;\\n    p1=&p;\\n    f1=&f;\\n    c1=&c;\\n    printf(\\u201CMemory address before increment:\\\\n\\n    int=%p\\\\n,float=%p\\\\n, char=%p\\\\n\\u201C,p1,f1,c1);\\n    p1++;\\n    f1++;\\n    c1++;\\n    printf(\\u201CMemory address after increment:\\\\n int=%p\\\\n, float=%p\\\\n,\\n    char=%p\\\\n\\u201C,p1,f1,c1);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nMemory address before increment:\\nint=0045AF19 /*int Occupies two bytes*/\\nfloat=0045AF2B /*float occupies four bytes*/\\nchar= 0045AF3E /*character occupies one byte*/\\nMemory address after increment:\\nint=0045AF1B\\nfloat=0045AF2F\\nchar= 0045AF3F\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrate-pointer-increment-operator\"\n  }, \"Example-3: Write a C program to illustrate pointer increment operator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate pointer increment operator.\\n#include<stdio.h>\\nmain( )\\n    {\\n    int x;\\n    int *p;\\n    x=1000;\\n    p=&x;\\n    printf(\\u201CPointer value = %d\\\\n\\u201D,p);\\n    printf(\\u201CPointer plus one =%d\\\\n\\u201D,p+1);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nPointer value = 22F455\\nPointer plus one = 22F439\\n\")), mdx(\"h3\", {\n    \"id\": \"analysis\"\n  }, \"Analysis:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"223455+1=223439! That is pointer magic! How does C justify that? Well, 223455 is not just a number, C knows it is the address of an integer that takes 4 locations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"So 223455,223456, 223457 and 223458 are all together held by the integer. So C interprets +1 as next free location and gives the answer 223459.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remember that it need not be continuation of memory location, when a pointer is incremented.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Pointer Initialization and Declaration C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-32\",\n  \"date\": \"2021-02-28T00:00:00.000Z\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"pointer-initialization-and-declaration\"\n    }}>{`Pointer Initialization and Declaration`}</h2>\n    <p>{`In C every variable must be declared before it is used. Since pointer is a special variable, its declaration is also different. An operator called dereference operator or indirection operator is used to declare a Pointer. It is represented by `}<em parentName=\"p\">{`(asterisk). The ‘`}</em>{`’ symbol appears in C language in four different situations with four different meanings. Two of these are well known.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Comments/`}<em parentName=\"p\">{`…`}</em>{`/`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Arithmetic operator for multiplication as in a*b`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Declaring pointer variable using *(dereference operator)`}</p>\n      </li>\n    </ol>\n    <p>{`Usage of deference operator in comment can be easily recognized. Multiplication needs two operands; this can also be easily recognized. When it appears in a declaration as int *p, read it is read as p is a pointer to an integer. The syntax of pointer declaration is`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`data-type *variable-name;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here data type can be int, float, char etc and the dereference operator before the int variable variable-name tells that it is a pointer variable.`}</li>\n      <li parentName=\"ul\">{`Hence the pointer variable variable-name holds the address of another variable of the same data type.`}</li>\n      <li parentName=\"ul\">{`For example, A pointer is declared by assigning an asterisk (*) in front of the variable name in the declaration statement.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int x; /* define x */\nint *ptr; /* define a pointer to x */\nint *p; p is a pointer to an integer.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Similarly pointer to char and float can be declared`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char *q; q is a pointer to a char.\nfloat *fp; fp is a pointer to float.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-declaration-styles\"\n    }}>{`Pointer Declaration Styles`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The dereference operator (*) can appear anywhere between the data type name and the pointer variable name as shown below.,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int * p; /*style 1 between the data type and variable*/\nint *p; /*style 2 Close to varible*/\nint* p; /*style 3 close to data type.*/\nMultiple pointers of same data type can be declared as given below.\n\nint *p, x, *q;\nHere p and q are pointer variables and x is integer variable.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-initialization\"\n    }}>{`Pointer Initialization`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To initialize the pointer variable reference operator (&) is used with pointer variable. To understand different types of initialization consider the following examples,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int i, j, *p;\np = &i;\nint x;\nint*ptr;\nptr=&x; /*Address of x is assigned to pointer variable*/\n*ptr=&x;/*The value of x is assigned to ptr */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"access-variable-using-pointer\"\n    }}>{`Access variable using pointer`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Once a pointer has been assigned address of a variable, the value of that variable can be accessed using the pointer. This is done by using unary operator * (asterisk) usually known as indirection operator, dereferencing operator or ‘contain of’ operator.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`For example:\n\nint marks,*p,n;\nmarks=79;\np=&marks;\nn=*p;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The first line declares marks and n as integer variables and p as a pointer variable pointing to an integer.`}</li>\n      <li parentName=\"ul\">{`The second line assigns value 79 to variable marks and`}</li>\n      <li parentName=\"ul\">{`The third line assigns address of variable marks to pointer p.`}</li>\n      <li parentName=\"ul\">{`The fourth line contains indirection operator *.`}</li>\n      <li parentName=\"ul\">{`When * is placed before a pointer variable in an expression, the pointer returns value of the variable of pointer.`}</li>\n      <li parentName=\"ul\">{`In above case *p returns value of variable marks because p contains the address of marks.`}</li>\n      <li parentName=\"ul\">{`The * can be remembered as ‘value at address’. Thus value of n would be 79.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p=&marks;\nn=*p;\nis equivalent to:\nn=*&marks\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-arithmetic-operation\"\n    }}>{`Pointer Arithmetic Operation`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Like other variables pointer variables can be used in arithmetic operations.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Example:\nint *p, x=10;\np = &x;\n*p=*p+5;\nThis statement with add the value 5 in the value pointed by p.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Integer pointers are incremented or decremented in the multiples of 2. Similarly character by 1, float by 4 and long pointers by 8 etc.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p++; /* valid */\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`We cannot add or subtract one pointer from another. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int *p1, *p2;\np1 = p1 + p2; /* invalid */\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`We can add or subtract the constant from pointer variable. In this case value of pointer is incremented or decremented by the scaling factor of respective data type. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p = p + 2; /* valid */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multiplication-and-division-on-pointers\"\n    }}>{`Multiplication and Division on pointers`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The value stored at pointers Address can be added or subtracted by any constant value. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`*p = *p * 4; /* valid */\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`We cannot use two pointers for multiplication or division. That is,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`x = x * y;\nx = x / y;\nis not allowed.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`We cannot multiply or divide a pointer by constant. Example:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p = p * 4; /* invalid */\np = p / 2; /* invalid */\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-pointer-arithmetic\"\n    }}>{`Example-1: Write a C program to illustrate pointer arithmetic.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate pointer arithmetic.\n/*pointer arithmetic*/\n#include<stdio.h>\nmain()\n    {\n    int x;\n    int*ptr1,*ptr2;\n    x=10;\n    ptr1=&x;\n    ptr2=ptr1+6;\n    printf(“ Value of x=%d\\\\n“,x);\n    printf(“Value pointed by ptr1 =%d\\\\n “,*ptr1);\n    printf(“ Address of x pointed by ptr1=%d\\\\n“, ptr1);\n    printf(“Content of ptr2=(ptr1+6)is =%u “,ptr2);\n    printf(“Value pointed by ptr1=%d “, *ptr2);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`OUTPUT:\nValue pointed by ptr1=10\nAddress of x pointed by ptr1=00785614\nContent of ptr2=(ptr1+6)is = 0078561A\nValue pointed by ptr2=8A/* let he value at location 0078561A be 8A */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-increment-and-decrement\"\n    }}>{`Pointer increment and decrement`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Integer, float, char, double data type pointers can be incremented and decremented. For all these data types both prefix and post fix increment or decrement is allowed. Integer pointers are incremented or decremented in the multiples of two. Similarly character by one, float by four and double pointers by eight etc.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Let int*p;\nP++ /*valid*/\n++p /*valid*/\np-- /*valid*/\n--p /*valid*/\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-pointer-increment-operator\"\n    }}>{`Example-2: Write a C program to illustrate pointer increment operator.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate pointer increment operator.\n#include<stdio.h>\nmain()\n    {\n    int *p1,p;\n    float *f1,f;\n    char *c1,c;\n    p1=&p;\n    f1=&f;\n    c1=&c;\n    printf(“Memory address before increment:\\\\n\n    int=%p\\\\n,float=%p\\\\n, char=%p\\\\n“,p1,f1,c1);\n    p1++;\n    f1++;\n    c1++;\n    printf(“Memory address after increment:\\\\n int=%p\\\\n, float=%p\\\\n,\n    char=%p\\\\n“,p1,f1,c1);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nMemory address before increment:\nint=0045AF19 /*int Occupies two bytes*/\nfloat=0045AF2B /*float occupies four bytes*/\nchar= 0045AF3E /*character occupies one byte*/\nMemory address after increment:\nint=0045AF1B\nfloat=0045AF2F\nchar= 0045AF3F\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrate-pointer-increment-operator\"\n    }}>{`Example-3: Write a C program to illustrate pointer increment operator.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate pointer increment operator.\n#include<stdio.h>\nmain( )\n    {\n    int x;\n    int *p;\n    x=1000;\n    p=&x;\n    printf(“Pointer value = %d\\\\n”,p);\n    printf(“Pointer plus one =%d\\\\n”,p+1);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nPointer value = 22F455\nPointer plus one = 22F439\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"analysis\"\n    }}>{`Analysis:`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`223455+1=223439! That is pointer magic! How does C justify that? Well, 223455 is not just a number, C knows it is the address of an integer that takes 4 locations.`}</li>\n      <li parentName=\"ul\">{`So 223455,223456, 223457 and 223458 are all together held by the integer. So C interprets +1 as next free location and gives the answer 223459.`}</li>\n      <li parentName=\"ul\">{`Remember that it need not be continuation of memory location, when a pointer is incremented.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}