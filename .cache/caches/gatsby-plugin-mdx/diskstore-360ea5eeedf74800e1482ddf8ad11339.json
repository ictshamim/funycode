{"expireTime":9007200883071729000,"key":"gatsby-plugin-mdx-entire-payload-63b364996b4d99e29b96bc833ef60445--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Static Keyword in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":25,"offset":24},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":25,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Static variables are those variables which persist even after control returns from the functions. In terms of static members as class members they are the members which are one for a class and not one for an object. Static members can be either functions or static data. They are also known as class variables as they belong to whole of the class.","position":{"start":{"line":2,"column":1,"offset":26},"end":{"line":2,"column":348,"offset":373},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":26},"end":{"line":2,"column":348,"offset":373},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Static Member Functions","position":{"start":{"line":4,"column":4,"offset":380},"end":{"line":4,"column":27,"offset":403},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":377},"end":{"line":4,"column":27,"offset":403},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Let’s discuss static function first. Note several points about static member’s functions :","position":{"start":{"line":5,"column":3,"offset":407},"end":{"line":5,"column":93,"offset":497},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":407},"end":{"line":5,"column":93,"offset":497},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":405},"end":{"line":5,"column":93,"offset":497},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Static functions are functions which are made static by placing keyword static before function definition in side the class.","position":{"start":{"line":6,"column":3,"offset":501},"end":{"line":6,"column":127,"offset":625},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":501},"end":{"line":6,"column":127,"offset":625},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":499},"end":{"line":6,"column":127,"offset":625},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All static function of class must be defined inside the class. You cannot separate the declaration and definition of a static member function.","position":{"start":{"line":7,"column":3,"offset":629},"end":{"line":7,"column":145,"offset":771},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":629},"end":{"line":7,"column":145,"offset":771},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":627},"end":{"line":7,"column":145,"offset":771},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Static functions are one for class and you can call them as.","position":{"start":{"line":8,"column":3,"offset":775},"end":{"line":8,"column":63,"offset":835},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":775},"end":{"line":8,"column":63,"offset":835},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":773},"end":{"line":8,"column":63,"offset":835},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In a static function only static data members, other static variables or other static function can be used.","position":{"start":{"line":9,"column":3,"offset":839},"end":{"line":9,"column":110,"offset":946},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":839},"end":{"line":9,"column":110,"offset":946},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":837},"end":{"line":9,"column":110,"offset":946},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Though static member function is called using class name with : : operator.","position":{"start":{"line":10,"column":3,"offset":950},"end":{"line":10,"column":78,"offset":1025},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":950},"end":{"line":10,"column":78,"offset":1025},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":948},"end":{"line":10,"column":78,"offset":1025},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It can be called explicitly using objects of the class.","position":{"start":{"line":11,"column":3,"offset":1029},"end":{"line":11,"column":58,"offset":1084},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":1029},"end":{"line":11,"column":58,"offset":1084},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1027},"end":{"line":11,"column":58,"offset":1084},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":405},"end":{"line":11,"column":58,"offset":1084},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Static Data Members","position":{"start":{"line":12,"column":4,"offset":1089},"end":{"line":12,"column":23,"offset":1108},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1086},"end":{"line":12,"column":23,"offset":1108},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Whenever an object is created separate copies of data members are created for each object. But in case of static data members only one copy of static data members is available which is shared among all the objects created. Note several points the about static data members :","position":{"start":{"line":13,"column":3,"offset":1112},"end":{"line":13,"column":277,"offset":1386},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":1112},"end":{"line":13,"column":277,"offset":1386},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1110},"end":{"line":13,"column":277,"offset":1386},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"They are created by placing static keyword before variable declaration.","position":{"start":{"line":14,"column":3,"offset":1390},"end":{"line":14,"column":74,"offset":1461},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":1390},"end":{"line":14,"column":74,"offset":1461},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1388},"end":{"line":14,"column":74,"offset":1461},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All static variables are declared inside the class but are initialized outside the class as :","position":{"start":{"line":15,"column":3,"offset":1465},"end":{"line":15,"column":96,"offset":1558},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1465},"end":{"line":15,"column":96,"offset":1558},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1463},"end":{"line":15,"column":96,"offset":1558},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1110},"end":{"line":15,"column":96,"offset":1558},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"data_type class_name : : static_variable =value;","position":{"start":{"line":16,"column":1,"offset":1560},"end":{"line":18,"column":4,"offset":1618},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If value is not given they are initialized to zero.","position":{"start":{"line":19,"column":3,"offset":1622},"end":{"line":19,"column":54,"offset":1673},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1622},"end":{"line":19,"column":54,"offset":1673},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1620},"end":{"line":19,"column":54,"offset":1673},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is one single copy of the static data member is created which is shared among all objects.","position":{"start":{"line":20,"column":3,"offset":1677},"end":{"line":20,"column":99,"offset":1773},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1677},"end":{"line":20,"column":99,"offset":1773},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1675},"end":{"line":20,"column":99,"offset":1773},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Changes made by one object on a static data members is created which is shared among all objects.","position":{"start":{"line":21,"column":3,"offset":1777},"end":{"line":21,"column":100,"offset":1874},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1777},"end":{"line":21,"column":100,"offset":1874},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1775},"end":{"line":21,"column":100,"offset":1874},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The lifetime of a static variable is the entire program.","position":{"start":{"line":22,"column":3,"offset":1878},"end":{"line":22,"column":59,"offset":1934},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1878},"end":{"line":22,"column":59,"offset":1934},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1876},"end":{"line":22,"column":59,"offset":1934},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"They are used when you have to keep one value common to whole class.","position":{"start":{"line":23,"column":3,"offset":1938},"end":{"line":23,"column":71,"offset":2006},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1938},"end":{"line":23,"column":71,"offset":2006},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1936},"end":{"line":23,"column":71,"offset":2006},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1620},"end":{"line":23,"column":71,"offset":2006},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrate a simple static function.","position":{"start":{"line":24,"column":5,"offset":2012},"end":{"line":24,"column":75,"offset":2082},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2008},"end":{"line":24,"column":75,"offset":2082},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"Demo of static function\\n\";\n        }\n    };\nint main( )\n    {\n    demo ::show( );\n    }","position":{"start":{"line":25,"column":1,"offset":2084},"end":{"line":40,"column":4,"offset":2316},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nDemo of static function","position":{"start":{"line":41,"column":1,"offset":2318},"end":{"line":44,"column":4,"offset":2360},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to illustrate that static function are called by using both object and class name.","position":{"start":{"line":45,"column":5,"offset":2366},"end":{"line":45,"column":118,"offset":2479},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2362},"end":{"line":45,"column":118,"offset":2479},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate that static function are called by using both object and class name.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show ( )\n        {\n        cout<<\"Demo of static function \\n\";\n        }\n    };\nint main( )\n    {\n    demo d1;\n    demo :: show( );\n    d1.show( );\n    }","position":{"start":{"line":46,"column":1,"offset":2481},"end":{"line":64,"column":4,"offset":2853},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nDemo of static function\nDemo of static function","position":{"start":{"line":65,"column":1,"offset":2855},"end":{"line":69,"column":4,"offset":2922},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to illustrate that static function may called from a non static function.","position":{"start":{"line":70,"column":5,"offset":2928},"end":{"line":70,"column":109,"offset":3032},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2924},"end":{"line":70,"column":109,"offset":3032},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate that static function may called from a non static function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"Demo of static function \\n\";\n        }\n    void disp( )\n        {\n        show( );\n        }\n    };\nint main( )\n    {\n    demo d1;\n    d1.show( );\n    }","position":{"start":{"line":71,"column":1,"offset":3034},"end":{"line":92,"column":4,"offset":3432},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to illustrate that a static function can not called a non static function.","position":{"start":{"line":94,"column":5,"offset":3440},"end":{"line":94,"column":110,"offset":3545},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3436},"end":{"line":94,"column":110,"offset":3545},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate that a static function can not called a non static function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"DEMO OF STATIC FUNCTION\"<<endl;\n        show1( );\n        }\n    void show1( )\n        {\n        cout<<\"HELLO FROM SHOW FUNCTION\"<<endl;\n        }\n    };\nint main( )\n    {\n    demo : :show( );\n    }","position":{"start":{"line":95,"column":1,"offset":3547},"end":{"line":116,"column":4,"offset":3991},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nerror: cannot call member function 'void demo::show1()' without object|","position":{"start":{"line":117,"column":1,"offset":3993},"end":{"line":120,"column":4,"offset":4083},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C++ program to illustrate that a static function can not be declared  defined outside the class.","position":{"start":{"line":121,"column":5,"offset":4089},"end":{"line":121,"column":120,"offset":4204},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":4085},"end":{"line":121,"column":120,"offset":4204},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate that a static function can not be declared  defined outside the class.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( );\n    };\nstatic void demo ::show( )\n    {\n    cout<<\"HELLO FROM STATCI SHOW \\n\";\n    }\nint main( )\n    {\n    demo :: show( );\n    }","position":{"start":{"line":122,"column":1,"offset":4206},"end":{"line":139,"column":4,"offset":4564},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nerror: cannot declare member function 'static void demo::show()' to have static linkage [-fpermissive]|","position":{"start":{"line":140,"column":1,"offset":4566},"end":{"line":143,"column":4,"offset":4688},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-6: Write a C++ program to illustrate a static variable implementation.","position":{"start":{"line":144,"column":5,"offset":4694},"end":{"line":144,"column":83,"offset":4772},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":4690},"end":{"line":144,"column":83,"offset":4772},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate a static variable implementation.\n#include<iostream>\nusing namespace std;\nclass stat_demo\n    {\n    static int s;\n    static float f;\n    static char *str;\n    static char ch;\n    public :\n    static void show( )\n        {\n        cout<<\"s=\"<<s<<endl;\n        cout<<\"f=\"<<f<<endl;\n        cout<<\"str=\"<<str<<endl;\n        cout<<\"ch=\"<<ch<<endl;\n        }\n    };\nint stat_demo :: s=20;\nfloat stat_demo :: f=234.567;\nchar* stat_demo :: str=\"static\";\nchar stat_demo :: ch='S';\nint main( )\n    {\n    stat_demo :: show( );\n    }","position":{"start":{"line":145,"column":1,"offset":4774},"end":{"line":172,"column":4,"offset":5370},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\ns=20\nf=234.567\nstr=static\nch=S","position":{"start":{"line":173,"column":1,"offset":5372},"end":{"line":179,"column":4,"offset":5424},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-7: Write a C++ program to illustrate a static and non static variable implementation.","position":{"start":{"line":180,"column":5,"offset":5430},"end":{"line":180,"column":98,"offset":5523},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":5426},"end":{"line":180,"column":98,"offset":5523},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate a static and non static variable implementation.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    static int s;\n    int ns;\n    public :\n    void input(int x)\n        {\n        ns= x;\n        }\n    void show( )\n        {\n        cout<<\"ns=\"<<ns<<endl;\n        cout<<\"s=\"<<s<<endl;\n        }\n    };\nint demo ::s =20;\nint main( )\n    {\n    demo d1;\n    d1.input(10);\n    d1.show( );\n    }","position":{"start":{"line":181,"column":1,"offset":5525},"end":{"line":207,"column":4,"offset":5995},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nns=10\ns=20","position":{"start":{"line":208,"column":1,"offset":5997},"end":{"line":212,"column":4,"offset":6027},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Static Keyword In Cplusplus\",\"category\":\"Cplusplus Tutorial\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-13T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-19\"}","position":{"start":{"line":214,"column":1,"offset":6029},"end":{"line":214,"column":217,"offset":6245},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":214,"column":217,"offset":6245}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Static Keyword In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-13T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-19\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"static-keyword-in-c\"\n  }, \"Static Keyword in C++\"), mdx(\"p\", null, \"Static variables are those variables which persist even after control returns from the functions. In terms of static members as class members they are the members which are one for a class and not one for an object. Static members can be either functions or static data. They are also known as class variables as they belong to whole of the class.\"), mdx(\"h2\", {\n    \"id\": \"static-member-functions\"\n  }, \"Static Member Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Let\\u2019s discuss static function first. Note several points about static member\\u2019s functions :\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static functions are functions which are made static by placing keyword static before function definition in side the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All static function of class must be defined inside the class. You cannot separate the declaration and definition of a static member function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Static functions are one for class and you can call them as.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In a static function only static data members, other static variables or other static function can be used.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Though static member function is called using class name with : : operator.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It can be called explicitly using objects of the class.\")), mdx(\"h2\", {\n    \"id\": \"static-data-members\"\n  }, \"Static Data Members\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Whenever an object is created separate copies of data members are created for each object. But in case of static data members only one copy of static data members is available which is shared among all the objects created. Note several points the about static data members :\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are created by placing static keyword before variable declaration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All static variables are declared inside the class but are initialized outside the class as :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"data_type class_name : : static_variable =value;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If value is not given they are initialized to zero.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is one single copy of the static data member is created which is shared among all objects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes made by one object on a static data members is created which is shared among all objects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The lifetime of a static variable is the entire program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are used when you have to keep one value common to whole class.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-a-simple-static-function\"\n  }, \"Example-1: Write a C++ program to illustrate a simple static function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    static void show( )\\n        {\\n        cout<<\\\"Demo of static function\\\\n\\\";\\n        }\\n    };\\nint main( )\\n    {\\n    demo ::show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nDemo of static function\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-that-static-function-are-called-by-using-both-object-and-class-name\"\n  }, \"Example-2: Write a C++ program to illustrate that static function are called by using both object and class name.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate that static function are called by using both object and class name.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    static void show ( )\\n        {\\n        cout<<\\\"Demo of static function \\\\n\\\";\\n        }\\n    };\\nint main( )\\n    {\\n    demo d1;\\n    demo :: show( );\\n    d1.show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nDemo of static function\\nDemo of static function\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrate-that-static-function-may-called-from-a-non-static-function\"\n  }, \"Example-3: Write a C++ program to illustrate that static function may called from a non static function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate that static function may called from a non static function.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    static void show( )\\n        {\\n        cout<<\\\"Demo of static function \\\\n\\\";\\n        }\\n    void disp( )\\n        {\\n        show( );\\n        }\\n    };\\nint main( )\\n    {\\n    demo d1;\\n    d1.show( );\\n    }\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to-illustrate-that-a-static-function-can-not-called-a-non-static-function\"\n  }, \"Example-4: Write a C++ program to illustrate that a static function can not called a non static function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate that a static function can not called a non static function.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    static void show( )\\n        {\\n        cout<<\\\"DEMO OF STATIC FUNCTION\\\"<<endl;\\n        show1( );\\n        }\\n    void show1( )\\n        {\\n        cout<<\\\"HELLO FROM SHOW FUNCTION\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    demo : :show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nerror: cannot call member function 'void demo::show1()' without object|\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-illustrate-that-a-static-function-can-not-be-declared--defined-outside-the-class\"\n  }, \"Example-5: Write a C++ program to illustrate that a static function can not be declared  defined outside the class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate that a static function can not be declared  defined outside the class.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    static void show( );\\n    };\\nstatic void demo ::show( )\\n    {\\n    cout<<\\\"HELLO FROM STATCI SHOW \\\\n\\\";\\n    }\\nint main( )\\n    {\\n    demo :: show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nerror: cannot declare member function 'static void demo::show()' to have static linkage [-fpermissive]|\\n\")), mdx(\"h3\", {\n    \"id\": \"example-6-write-a-c-program-to-illustrate-a-static-variable-implementation\"\n  }, \"Example-6: Write a C++ program to illustrate a static variable implementation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate a static variable implementation.\\n#include<iostream>\\nusing namespace std;\\nclass stat_demo\\n    {\\n    static int s;\\n    static float f;\\n    static char *str;\\n    static char ch;\\n    public :\\n    static void show( )\\n        {\\n        cout<<\\\"s=\\\"<<s<<endl;\\n        cout<<\\\"f=\\\"<<f<<endl;\\n        cout<<\\\"str=\\\"<<str<<endl;\\n        cout<<\\\"ch=\\\"<<ch<<endl;\\n        }\\n    };\\nint stat_demo :: s=20;\\nfloat stat_demo :: f=234.567;\\nchar* stat_demo :: str=\\\"static\\\";\\nchar stat_demo :: ch='S';\\nint main( )\\n    {\\n    stat_demo :: show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\ns=20\\nf=234.567\\nstr=static\\nch=S\\n\")), mdx(\"h3\", {\n    \"id\": \"example-7-write-a-c-program-to-illustrate-a-static-and-non-static-variable-implementation\"\n  }, \"Example-7: Write a C++ program to illustrate a static and non static variable implementation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate a static and non static variable implementation.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    static int s;\\n    int ns;\\n    public :\\n    void input(int x)\\n        {\\n        ns= x;\\n        }\\n    void show( )\\n        {\\n        cout<<\\\"ns=\\\"<<ns<<endl;\\n        cout<<\\\"s=\\\"<<s<<endl;\\n        }\\n    };\\nint demo ::s =20;\\nint main( )\\n    {\\n    demo d1;\\n    d1.input(10);\\n    d1.show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nns=10\\ns=20\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Static Keyword In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-13T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-19\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"static-keyword-in-c\"\n    }}>{`Static Keyword in C++`}</h2>\n    <p>{`Static variables are those variables which persist even after control returns from the functions. In terms of static members as class members they are the members which are one for a class and not one for an object. Static members can be either functions or static data. They are also known as class variables as they belong to whole of the class.`}</p>\n    <h2 {...{\n      \"id\": \"static-member-functions\"\n    }}>{`Static Member Functions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Let’s discuss static function first. Note several points about static member’s functions :`}</li>\n      <li parentName=\"ul\">{`Static functions are functions which are made static by placing keyword static before function definition in side the class.`}</li>\n      <li parentName=\"ul\">{`All static function of class must be defined inside the class. You cannot separate the declaration and definition of a static member function.`}</li>\n      <li parentName=\"ul\">{`Static functions are one for class and you can call them as.`}</li>\n      <li parentName=\"ul\">{`In a static function only static data members, other static variables or other static function can be used.`}</li>\n      <li parentName=\"ul\">{`Though static member function is called using class name with : : operator.`}</li>\n      <li parentName=\"ul\">{`It can be called explicitly using objects of the class.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"static-data-members\"\n    }}>{`Static Data Members`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Whenever an object is created separate copies of data members are created for each object. But in case of static data members only one copy of static data members is available which is shared among all the objects created. Note several points the about static data members :`}</li>\n      <li parentName=\"ul\">{`They are created by placing static keyword before variable declaration.`}</li>\n      <li parentName=\"ul\">{`All static variables are declared inside the class but are initialized outside the class as :`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`data_type class_name : : static_variable =value;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`If value is not given they are initialized to zero.`}</li>\n      <li parentName=\"ul\">{`There is one single copy of the static data member is created which is shared among all objects.`}</li>\n      <li parentName=\"ul\">{`Changes made by one object on a static data members is created which is shared among all objects.`}</li>\n      <li parentName=\"ul\">{`The lifetime of a static variable is the entire program.`}</li>\n      <li parentName=\"ul\">{`They are used when you have to keep one value common to whole class.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-a-simple-static-function\"\n    }}>{`Example-1: Write a C++ program to illustrate a simple static function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"Demo of static function\\\\n\";\n        }\n    };\nint main( )\n    {\n    demo ::show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nDemo of static function\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-that-static-function-are-called-by-using-both-object-and-class-name\"\n    }}>{`Example-2: Write a C++ program to illustrate that static function are called by using both object and class name.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate that static function are called by using both object and class name.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show ( )\n        {\n        cout<<\"Demo of static function \\\\n\";\n        }\n    };\nint main( )\n    {\n    demo d1;\n    demo :: show( );\n    d1.show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nDemo of static function\nDemo of static function\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrate-that-static-function-may-called-from-a-non-static-function\"\n    }}>{`Example-3: Write a C++ program to illustrate that static function may called from a non static function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate that static function may called from a non static function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"Demo of static function \\\\n\";\n        }\n    void disp( )\n        {\n        show( );\n        }\n    };\nint main( )\n    {\n    demo d1;\n    d1.show( );\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to-illustrate-that-a-static-function-can-not-called-a-non-static-function\"\n    }}>{`Example-4: Write a C++ program to illustrate that a static function can not called a non static function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate that a static function can not called a non static function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( )\n        {\n        cout<<\"DEMO OF STATIC FUNCTION\"<<endl;\n        show1( );\n        }\n    void show1( )\n        {\n        cout<<\"HELLO FROM SHOW FUNCTION\"<<endl;\n        }\n    };\nint main( )\n    {\n    demo : :show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nerror: cannot call member function 'void demo::show1()' without object|\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-illustrate-that-a-static-function-can-not-be-declared--defined-outside-the-class\"\n    }}>{`Example-5: Write a C++ program to illustrate that a static function can not be declared  defined outside the class.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate that a static function can not be declared  defined outside the class.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    static void show( );\n    };\nstatic void demo ::show( )\n    {\n    cout<<\"HELLO FROM STATCI SHOW \\\\n\";\n    }\nint main( )\n    {\n    demo :: show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nerror: cannot declare member function 'static void demo::show()' to have static linkage [-fpermissive]|\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-6-write-a-c-program-to-illustrate-a-static-variable-implementation\"\n    }}>{`Example-6: Write a C++ program to illustrate a static variable implementation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate a static variable implementation.\n#include<iostream>\nusing namespace std;\nclass stat_demo\n    {\n    static int s;\n    static float f;\n    static char *str;\n    static char ch;\n    public :\n    static void show( )\n        {\n        cout<<\"s=\"<<s<<endl;\n        cout<<\"f=\"<<f<<endl;\n        cout<<\"str=\"<<str<<endl;\n        cout<<\"ch=\"<<ch<<endl;\n        }\n    };\nint stat_demo :: s=20;\nfloat stat_demo :: f=234.567;\nchar* stat_demo :: str=\"static\";\nchar stat_demo :: ch='S';\nint main( )\n    {\n    stat_demo :: show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\ns=20\nf=234.567\nstr=static\nch=S\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-7-write-a-c-program-to-illustrate-a-static-and-non-static-variable-implementation\"\n    }}>{`Example-7: Write a C++ program to illustrate a static and non static variable implementation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate a static and non static variable implementation.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    static int s;\n    int ns;\n    public :\n    void input(int x)\n        {\n        ns= x;\n        }\n    void show( )\n        {\n        cout<<\"ns=\"<<ns<<endl;\n        cout<<\"s=\"<<s<<endl;\n        }\n    };\nint demo ::s =20;\nint main( )\n    {\n    demo d1;\n    d1.input(10);\n    d1.show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nns=10\ns=20\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}