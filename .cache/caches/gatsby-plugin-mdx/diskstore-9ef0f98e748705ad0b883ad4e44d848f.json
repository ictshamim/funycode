{"expireTime":9007200882776219000,"key":"gatsby-plugin-mdx-entire-payload-f25f7d29c1da29a93814559aa1c987ad-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"String in C","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":15,"offset":14},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":15,"offset":14},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A string is a sequence of characters. Any sequence or set of characters defined within double quotation symbols is a constant string. As the integer is stored in integer array , in the same way character  is stores in character array. Character array is often called as “string”.","position":{"start":{"line":2,"column":1,"offset":15},"end":{"line":2,"column":280,"offset":294},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":15},"end":{"line":2,"column":280,"offset":294},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In c it is required to do some meaningful operations on strings they are:","position":{"start":{"line":4,"column":3,"offset":298},"end":{"line":4,"column":76,"offset":371},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":298},"end":{"line":4,"column":76,"offset":371},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reading string displaying string","position":{"start":{"line":5,"column":6,"offset":377},"end":{"line":5,"column":38,"offset":409},"indent":[]}}],"position":{"start":{"line":5,"column":6,"offset":377},"end":{"line":5,"column":38,"offset":409},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":374},"end":{"line":5,"column":38,"offset":409},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Combining or concatenating string","position":{"start":{"line":6,"column":6,"offset":415},"end":{"line":6,"column":39,"offset":448},"indent":[]}}],"position":{"start":{"line":6,"column":6,"offset":415},"end":{"line":6,"column":39,"offset":448},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":412},"end":{"line":6,"column":39,"offset":448},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Copying one string to another","position":{"start":{"line":7,"column":6,"offset":454},"end":{"line":7,"column":35,"offset":483},"indent":[]}}],"position":{"start":{"line":7,"column":6,"offset":454},"end":{"line":7,"column":35,"offset":483},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":451},"end":{"line":7,"column":35,"offset":483},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Comparing string & checking whether they are equal","position":{"start":{"line":8,"column":6,"offset":489},"end":{"line":8,"column":56,"offset":539},"indent":[]}}],"position":{"start":{"line":8,"column":6,"offset":489},"end":{"line":8,"column":56,"offset":539},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":486},"end":{"line":8,"column":56,"offset":539},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Extraction of a portion of a string","position":{"start":{"line":9,"column":6,"offset":545},"end":{"line":9,"column":41,"offset":580},"indent":[]}}],"position":{"start":{"line":9,"column":6,"offset":545},"end":{"line":9,"column":41,"offset":580},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":542},"end":{"line":9,"column":41,"offset":580},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":374},"end":{"line":9,"column":41,"offset":580},"indent":[3,3,3,3]}}],"position":{"start":{"line":4,"column":1,"offset":296},"end":{"line":9,"column":41,"offset":580},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Strings are stored in memory as ASCII codes of characters that make up the string appended with ‘\\0’(ASCII value of null).","position":{"start":{"line":10,"column":3,"offset":583},"end":{"line":10,"column":125,"offset":705},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":583},"end":{"line":10,"column":125,"offset":705},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":581},"end":{"line":10,"column":125,"offset":705},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Normally each character is stored in one byte, successive characters are stored in successive bytes. Strings are used to store text information and to perform manipulations on them.","position":{"start":{"line":11,"column":3,"offset":708},"end":{"line":11,"column":184,"offset":889},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":708},"end":{"line":11,"column":184,"offset":889},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":706},"end":{"line":11,"column":184,"offset":889},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Strings are declared in the same manner as other arrays.","position":{"start":{"line":12,"column":3,"offset":892},"end":{"line":12,"column":59,"offset":948},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":892},"end":{"line":12,"column":59,"offset":948},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":890},"end":{"line":12,"column":59,"offset":948},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":296},"end":{"line":12,"column":59,"offset":948},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declaring a string","position":{"start":{"line":13,"column":4,"offset":952},"end":{"line":13,"column":22,"offset":970},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":949},"end":{"line":13,"column":22,"offset":970},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C does not support string as the data type. However is allows us to represent strings as character arrays. It can be declared as –","position":{"start":{"line":14,"column":3,"offset":973},"end":{"line":14,"column":133,"offset":1103},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":973},"end":{"line":14,"column":133,"offset":1103},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":971},"end":{"line":14,"column":133,"offset":1103},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":971},"end":{"line":14,"column":133,"offset":1103},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char string_name[size];","position":{"start":{"line":15,"column":1,"offset":1104},"end":{"line":17,"column":4,"offset":1137},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here char is character data type.","position":{"start":{"line":18,"column":3,"offset":1140},"end":{"line":18,"column":36,"offset":1173},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1140},"end":{"line":18,"column":36,"offset":1173},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1138},"end":{"line":18,"column":36,"offset":1173},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This is must for specifying the data type as string.","position":{"start":{"line":19,"column":3,"offset":1176},"end":{"line":19,"column":55,"offset":1228},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1176},"end":{"line":19,"column":55,"offset":1228},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1174},"end":{"line":20,"column":1,"offset":1229},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"string_name is the valid variable name given to the string and ‘size’ determines the number of characters in the string. For example:","position":{"start":{"line":21,"column":3,"offset":1232},"end":{"line":21,"column":136,"offset":1365},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1232},"end":{"line":21,"column":136,"offset":1365},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1230},"end":{"line":21,"column":136,"offset":1365},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1138},"end":{"line":21,"column":136,"offset":1365},"indent":[1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"char star[10];\nchar book[13];\nchar phone[ ];","position":{"start":{"line":22,"column":1,"offset":1366},"end":{"line":26,"column":4,"offset":1420},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Analysis","position":{"start":{"line":27,"column":5,"offset":1425},"end":{"line":27,"column":13,"offset":1433},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1421},"end":{"line":27,"column":13,"offset":1433},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here ‘star’ is the character array or a string that can store up to 10 elements of type char. It can be represented as:","position":{"start":{"line":28,"column":3,"offset":1436},"end":{"line":28,"column":122,"offset":1555},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1436},"end":{"line":28,"column":122,"offset":1555},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1434},"end":{"line":28,"column":122,"offset":1555},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1434},"end":{"line":28,"column":122,"offset":1555},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char star[10];\n[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]","position":{"start":{"line":29,"column":1,"offset":1556},"end":{"line":32,"column":4,"offset":1620},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"However star can also store shorter sequences than 10 characters. Similarly ‘book’ can store 13 characters. It can be represented as","position":{"start":{"line":33,"column":3,"offset":1623},"end":{"line":33,"column":135,"offset":1755},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1623},"end":{"line":33,"column":135,"offset":1755},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1621},"end":{"line":33,"column":135,"offset":1755},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1621},"end":{"line":33,"column":135,"offset":1755},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"[0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13]\nchar phone[ ];","position":{"start":{"line":34,"column":1,"offset":1756},"end":{"line":37,"column":4,"offset":1840},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here phone array does not have size specified.","position":{"start":{"line":38,"column":3,"offset":1843},"end":{"line":38,"column":49,"offset":1889},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1843},"end":{"line":38,"column":49,"offset":1889},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1841},"end":{"line":38,"column":49,"offset":1889},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This initializes an upsized character array, phone, with a string constant.","position":{"start":{"line":39,"column":3,"offset":1892},"end":{"line":39,"column":78,"offset":1967},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1892},"end":{"line":39,"column":78,"offset":1967},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1890},"end":{"line":39,"column":78,"offset":1967},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself and allocates the memory space.","position":{"start":{"line":40,"column":3,"offset":1970},"end":{"line":40,"column":213,"offset":2180},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1970},"end":{"line":40,"column":213,"offset":2180},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1968},"end":{"line":40,"column":213,"offset":2180},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1841},"end":{"line":40,"column":213,"offset":2180},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Initializing a String","position":{"start":{"line":42,"column":4,"offset":2185},"end":{"line":42,"column":25,"offset":2206},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2182},"end":{"line":42,"column":25,"offset":2206},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Strings can be initialized at compile time and at run time. The process of initializing the strings at compile time is to write the string literal within double quotes. Compile time initialization is called as static initialization. Compile time initialization can be done in three ways. They are given below.","position":{"start":{"line":43,"column":3,"offset":2209},"end":{"line":43,"column":312,"offset":2518},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2209},"end":{"line":43,"column":312,"offset":2518},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2207},"end":{"line":43,"column":312,"offset":2518},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2207},"end":{"line":43,"column":312,"offset":2518},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Type 1. char name[9] = “Sri Rama”;\nType 2. char stream[7] = {`H', `e', `l', `l', `o', `!', `\\0'};\nType 3. char str[] = \"I like C.\";","position":{"start":{"line":44,"column":1,"offset":2519},"end":{"line":48,"column":4,"offset":2660},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"String Initialization Type 1","position":{"start":{"line":49,"column":4,"offset":2664},"end":{"line":49,"column":32,"offset":2692},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2661},"end":{"line":49,"column":32,"offset":2692},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Consider a character array name that is initialized with a string constant","position":{"start":{"line":50,"column":3,"offset":2695},"end":{"line":50,"column":77,"offset":2769},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2695},"end":{"line":50,"column":77,"offset":2769},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2693},"end":{"line":50,"column":77,"offset":2769},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2693},"end":{"line":50,"column":77,"offset":2769},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"“Mr JOHN”. This is written as char name[9] = “Mr JOHN”;","position":{"start":{"line":51,"column":1,"offset":2770},"end":{"line":53,"column":4,"offset":2833},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here null (\\0) is appended by the compiler at the end string to denote that it is end of given string.","position":{"start":{"line":54,"column":3,"offset":2836},"end":{"line":54,"column":105,"offset":2938},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2836},"end":{"line":54,"column":105,"offset":2938},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2834},"end":{"line":54,"column":105,"offset":2938},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The compiler can automatically append a null character (\\0) to the end of the array and treat the character array as a character string.","position":{"start":{"line":55,"column":3,"offset":2941},"end":{"line":55,"column":139,"offset":3077},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":2941},"end":{"line":55,"column":139,"offset":3077},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2939},"end":{"line":55,"column":139,"offset":3077},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2834},"end":{"line":55,"column":139,"offset":3077},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"char str1[4] = \"text\"; /* illegal declaration*/","position":{"start":{"line":57,"column":1,"offset":3079},"end":{"line":59,"column":4,"offset":3134},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here the array str1 has size 4. This it cannot hold a string constant plus an extra null character and above declaration is considered illegal.","position":{"start":{"line":60,"column":3,"offset":3137},"end":{"line":60,"column":146,"offset":3280},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":3137},"end":{"line":60,"column":146,"offset":3280},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3135},"end":{"line":61,"column":1,"offset":3281},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Note that many C compilers will not issue a warning or an error message on this incorrect declaration. The runtime errors that could eventually arise as a result could be very difficult to debug.","position":{"start":{"line":62,"column":3,"offset":3284},"end":{"line":62,"column":198,"offset":3479},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":3284},"end":{"line":62,"column":198,"offset":3479},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3282},"end":{"line":62,"column":198,"offset":3479},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3135},"end":{"line":62,"column":198,"offset":3479},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"String Initialization Type 2","position":{"start":{"line":64,"column":4,"offset":3484},"end":{"line":64,"column":32,"offset":3512},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3481},"end":{"line":64,"column":32,"offset":3512},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A character array can also be declared and initialized like this:","position":{"start":{"line":65,"column":3,"offset":3515},"end":{"line":65,"column":68,"offset":3580},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":3515},"end":{"line":65,"column":68,"offset":3580},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3513},"end":{"line":65,"column":68,"offset":3580},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3513},"end":{"line":65,"column":68,"offset":3580},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char stream[6] = {`H', `e', `l', `l', `o', `!'}; /* char array*/","position":{"start":{"line":66,"column":1,"offset":3581},"end":{"line":68,"column":4,"offset":3655},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This same array can be declared as string when null(\\0) is appended at the end by user and array size is made sufficient to hold all characters.","position":{"start":{"line":69,"column":1,"offset":3656},"end":{"line":69,"column":145,"offset":3800},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3656},"end":{"line":69,"column":145,"offset":3800},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This is shown below.","position":{"start":{"line":70,"column":3,"offset":3803},"end":{"line":70,"column":23,"offset":3823},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":3803},"end":{"line":70,"column":23,"offset":3823},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3801},"end":{"line":70,"column":23,"offset":3823},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3801},"end":{"line":70,"column":23,"offset":3823},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char stream[7] = {`H', `e', `l', `l', `o', `!', `\\0'};/*string */","position":{"start":{"line":72,"column":1,"offset":3825},"end":{"line":74,"column":4,"offset":3900},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can also initialize the above a character array stream can be initialized with a string constant “Hello! “. For example,","position":{"start":{"line":75,"column":3,"offset":3903},"end":{"line":75,"column":127,"offset":4027},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":3903},"end":{"line":75,"column":127,"offset":4027},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3901},"end":{"line":75,"column":127,"offset":4027},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3901},"end":{"line":75,"column":127,"offset":4027},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char str[7] = \"Hello!\";","position":{"start":{"line":76,"column":1,"offset":4028},"end":{"line":78,"column":4,"offset":4061},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The compiler can automatically append a null character (\\0) to the end of the array, and treat the character array as a character string.","position":{"start":{"line":79,"column":3,"offset":4064},"end":{"line":79,"column":140,"offset":4201},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":4064},"end":{"line":79,"column":140,"offset":4201},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4062},"end":{"line":79,"column":140,"offset":4201},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":4062},"end":{"line":79,"column":140,"offset":4201},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"String Initialization Type 3","position":{"start":{"line":81,"column":5,"offset":4207},"end":{"line":81,"column":33,"offset":4235},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4203},"end":{"line":81,"column":33,"offset":4235},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The third type of initialization is not specifying the array size. For example,","position":{"start":{"line":82,"column":3,"offset":4238},"end":{"line":82,"column":82,"offset":4317},"indent":[]}}],"position":{"start":{"line":82,"column":3,"offset":4238},"end":{"line":82,"column":82,"offset":4317},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":4236},"end":{"line":82,"column":82,"offset":4317},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":4236},"end":{"line":82,"column":82,"offset":4317},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char str[] = \"I like C.\";","position":{"start":{"line":83,"column":1,"offset":4318},"end":{"line":85,"column":4,"offset":4353},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This statement initializes an character array, str, with a string constant.” I like c. “","position":{"start":{"line":86,"column":3,"offset":4356},"end":{"line":86,"column":91,"offset":4444},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":4356},"end":{"line":86,"column":91,"offset":4444},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4354},"end":{"line":86,"column":91,"offset":4444},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself.","position":{"start":{"line":87,"column":3,"offset":4447},"end":{"line":87,"column":182,"offset":4626},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":4447},"end":{"line":87,"column":182,"offset":4626},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4445},"end":{"line":87,"column":182,"offset":4626},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":4354},"end":{"line":87,"column":182,"offset":4626},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Initialization after Declaration","position":{"start":{"line":89,"column":4,"offset":4631},"end":{"line":89,"column":36,"offset":4663},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4628},"end":{"line":89,"column":36,"offset":4663},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char s[10] = \" Web Design\";\nis not the same as\nchar s[10];\ns = \"Web Design\"; /*Illegal declaration. */","position":{"start":{"line":90,"column":1,"offset":4664},"end":{"line":95,"column":4,"offset":4776},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This generates a compiler error.","position":{"start":{"line":96,"column":3,"offset":4779},"end":{"line":96,"column":35,"offset":4811},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":4779},"end":{"line":96,"column":35,"offset":4811},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4777},"end":{"line":96,"column":35,"offset":4811},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The assignment operator cannot be used with a string already declared.","position":{"start":{"line":97,"column":3,"offset":4814},"end":{"line":97,"column":73,"offset":4884},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":4814},"end":{"line":97,"column":73,"offset":4884},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":4812},"end":{"line":97,"column":73,"offset":4884},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4777},"end":{"line":97,"column":73,"offset":4884},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"String Constants versus Character Constants","position":{"start":{"line":99,"column":4,"offset":4889},"end":{"line":99,"column":47,"offset":4932},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4886},"end":{"line":99,"column":47,"offset":4932},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A string constant is a series of characters enclosed in double quotes (” “). On the other hand, a character constant is a character enclosed in single quotes (","position":{"start":{"line":100,"column":3,"offset":4935},"end":{"line":100,"column":162,"offset":5094},"indent":[]}},{"type":"inlineCode","value":" ","position":{"start":{"line":100,"column":162,"offset":5094},"end":{"line":100,"column":165,"offset":5097},"indent":[]}},{"type":"text","value":"). When a character variable ch and a character array str are initialized with the same character,x, such as the following,","position":{"start":{"line":100,"column":165,"offset":5097},"end":{"line":100,"column":288,"offset":5220},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":4935},"end":{"line":100,"column":288,"offset":5220},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4933},"end":{"line":100,"column":288,"offset":5220},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4933},"end":{"line":100,"column":288,"offset":5220},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char ch = `x';\nchar str[] = \"x\";","position":{"start":{"line":101,"column":1,"offset":5221},"end":{"line":104,"column":4,"offset":5263},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"One byte is reserved for the character variable ch, and two bytes are allocated for the character array str. The reason that an extra byte is needed for str is that the compiler has to append a null character to the array.","position":{"start":{"line":105,"column":3,"offset":5266},"end":{"line":105,"column":225,"offset":5488},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":5266},"end":{"line":105,"column":225,"offset":5488},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5264},"end":{"line":105,"column":225,"offset":5488},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5264},"end":{"line":105,"column":225,"offset":5488},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"String in C\",\"category\":\"Basic C Programming\",\"author\":\"Anonymous\",\"tags\":[\"#c\",\"#tutorial\"],\"thumbnailText\":\"C Programming Tutorial-28\",\"date\":\"2021-03-04T00:00:00.000Z\"}","position":{"start":{"line":108,"column":1,"offset":5491},"end":{"line":108,"column":210,"offset":5700},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":108,"column":210,"offset":5700}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"String in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-28\",\n  \"date\": \"2021-03-04T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"string-in-c\"\n  }, \"String in C\"), mdx(\"p\", null, \"A string is a sequence of characters. Any sequence or set of characters defined within double quotation symbols is a constant string. As the integer is stored in integer array , in the same way character  is stores in character array. Character array is often called as \\u201Cstring\\u201D.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In c it is required to do some meaningful operations on strings they are:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reading string displaying string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Combining or concatenating string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copying one string to another\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comparing string & checking whether they are equal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extraction of a portion of a string\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strings are stored in memory as ASCII codes of characters that make up the string appended with \\u2018\\\\0\\u2019(ASCII value of null).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Normally each character is stored in one byte, successive characters are stored in successive bytes. Strings are used to store text information and to perform manipulations on them.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strings are declared in the same manner as other arrays.\")), mdx(\"h2\", {\n    \"id\": \"declaring-a-string\"\n  }, \"Declaring a string\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C does not support string as the data type. However is allows us to represent strings as character arrays. It can be declared as \\u2013\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char string_name[size];\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Here char is character data type.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This is must for specifying the data type as string.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"string_name is the valid variable name given to the string and \\u2018size\\u2019 determines the number of characters in the string. For example:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char star[10];\\nchar book[13];\\nchar phone[ ];\\n\")), mdx(\"h3\", {\n    \"id\": \"analysis\"\n  }, \"Analysis\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here \\u2018star\\u2019 is the character array or a string that can store up to 10 elements of type char. It can be represented as:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char star[10];\\n[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However star can also store shorter sequences than 10 characters. Similarly \\u2018book\\u2019 can store 13 characters. It can be represented as\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"[0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13]\\nchar phone[ ];\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here phone array does not have size specified.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This initializes an upsized character array, phone, with a string constant.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself and allocates the memory space.\")), mdx(\"h2\", {\n    \"id\": \"initializing-a-string\"\n  }, \"Initializing a String\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strings can be initialized at compile time and at run time. The process of initializing the strings at compile time is to write the string literal within double quotes. Compile time initialization is called as static initialization. Compile time initialization can be done in three ways. They are given below.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Type 1. char name[9] = \\u201CSri Rama\\u201D;\\nType 2. char stream[7] = {`H', `e', `l', `l', `o', `!', `\\\\0'};\\nType 3. char str[] = \\\"I like C.\\\";\\n\")), mdx(\"h2\", {\n    \"id\": \"string-initialization-type-1\"\n  }, \"String Initialization Type 1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consider a character array name that is initialized with a string constant\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\u201CMr JOHN\\u201D. This is written as char name[9] = \\u201CMr JOHN\\u201D;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here null (\\\\0) is appended by the compiler at the end string to denote that it is end of given string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The compiler can automatically append a null character (\\\\0) to the end of the array and treat the character array as a character string.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"char str1[4] = \\\"text\\\"; /* illegal declaration*/\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Here the array str1 has size 4. This it cannot hold a string constant plus an extra null character and above declaration is considered illegal.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Note that many C compilers will not issue a warning or an error message on this incorrect declaration. The runtime errors that could eventually arise as a result could be very difficult to debug.\"))), mdx(\"h2\", {\n    \"id\": \"string-initialization-type-2\"\n  }, \"String Initialization Type 2\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A character array can also be declared and initialized like this:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char stream[6] = {`H', `e', `l', `l', `o', `!'}; /* char array*/\\n\")), mdx(\"p\", null, \"This same array can be declared as string when null(\\\\0) is appended at the end by user and array size is made sufficient to hold all characters.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is shown below.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char stream[7] = {`H', `e', `l', `l', `o', `!', `\\\\0'};/*string */\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can also initialize the above a character array stream can be initialized with a string constant \\u201CHello! \\u201C. For example,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char str[7] = \\\"Hello!\\\";\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The compiler can automatically append a null character (\\\\0) to the end of the array, and treat the character array as a character string.\")), mdx(\"h3\", {\n    \"id\": \"string-initialization-type-3\"\n  }, \"String Initialization Type 3\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The third type of initialization is not specifying the array size. For example,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char str[] = \\\"I like C.\\\";\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This statement initializes an character array, str, with a string constant.\\u201D I like c. \\u201C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself.\")), mdx(\"h2\", {\n    \"id\": \"initialization-after-declaration\"\n  }, \"Initialization after Declaration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char s[10] = \\\" Web Design\\\";\\nis not the same as\\nchar s[10];\\ns = \\\"Web Design\\\"; /*Illegal declaration. */\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This generates a compiler error.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The assignment operator cannot be used with a string already declared.\")), mdx(\"h2\", {\n    \"id\": \"string-constants-versus-character-constants\"\n  }, \"String Constants versus Character Constants\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A string constant is a series of characters enclosed in double quotes (\\u201D \\u201C). On the other hand, a character constant is a character enclosed in single quotes (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \" \"), \"). When a character variable ch and a character array str are initialized with the same character,x, such as the following,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char ch = `x';\\nchar str[] = \\\"x\\\";\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One byte is reserved for the character variable ch, and two bytes are allocated for the character array str. The reason that an extra byte is needed for str is that the compiler has to append a null character to the array.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"String in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-28\",\n  \"date\": \"2021-03-04T00:00:00.000Z\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"string-in-c\"\n    }}>{`String in C`}</h2>\n    <p>{`A string is a sequence of characters. Any sequence or set of characters defined within double quotation symbols is a constant string. As the integer is stored in integer array , in the same way character  is stores in character array. Character array is often called as “string”.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`In c it is required to do some meaningful operations on strings they are:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Reading string displaying string`}</li>\n          <li parentName=\"ul\">{`Combining or concatenating string`}</li>\n          <li parentName=\"ul\">{`Copying one string to another`}</li>\n          <li parentName=\"ul\">{`Comparing string & checking whether they are equal`}</li>\n          <li parentName=\"ul\">{`Extraction of a portion of a string`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Strings are stored in memory as ASCII codes of characters that make up the string appended with ‘\\\\0’(ASCII value of null).`}</li>\n      <li parentName=\"ul\">{`Normally each character is stored in one byte, successive characters are stored in successive bytes. Strings are used to store text information and to perform manipulations on them.`}</li>\n      <li parentName=\"ul\">{`Strings are declared in the same manner as other arrays.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"declaring-a-string\"\n    }}>{`Declaring a string`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`C does not support string as the data type. However is allows us to represent strings as character arrays. It can be declared as –`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char string_name[size];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Here char is character data type.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`This is must for specifying the data type as string.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`string_name is the valid variable name given to the string and ‘size’ determines the number of characters in the string. For example:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char star[10];\nchar book[13];\nchar phone[ ];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"analysis\"\n    }}>{`Analysis`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Here ‘star’ is the character array or a string that can store up to 10 elements of type char. It can be represented as:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char star[10];\n[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`However star can also store shorter sequences than 10 characters. Similarly ‘book’ can store 13 characters. It can be represented as`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`[0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13]\nchar phone[ ];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here phone array does not have size specified.`}</li>\n      <li parentName=\"ul\">{`This initializes an upsized character array, phone, with a string constant.`}</li>\n      <li parentName=\"ul\">{`Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself and allocates the memory space.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"initializing-a-string\"\n    }}>{`Initializing a String`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Strings can be initialized at compile time and at run time. The process of initializing the strings at compile time is to write the string literal within double quotes. Compile time initialization is called as static initialization. Compile time initialization can be done in three ways. They are given below.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Type 1. char name[9] = “Sri Rama”;\nType 2. char stream[7] = {\\`H', \\`e', \\`l', \\`l', \\`o', \\`!', \\`\\\\0'};\nType 3. char str[] = \"I like C.\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"string-initialization-type-1\"\n    }}>{`String Initialization Type 1`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Consider a character array name that is initialized with a string constant`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`“Mr JOHN”. This is written as char name[9] = “Mr JOHN”;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here null (\\\\0) is appended by the compiler at the end string to denote that it is end of given string.`}</li>\n      <li parentName=\"ul\">{`The compiler can automatically append a null character (\\\\0) to the end of the array and treat the character array as a character string.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`char str1[4] = \"text\"; /* illegal declaration*/\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Here the array str1 has size 4. This it cannot hold a string constant plus an extra null character and above declaration is considered illegal.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Note that many C compilers will not issue a warning or an error message on this incorrect declaration. The runtime errors that could eventually arise as a result could be very difficult to debug.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"string-initialization-type-2\"\n    }}>{`String Initialization Type 2`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A character array can also be declared and initialized like this:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char stream[6] = {\\`H', \\`e', \\`l', \\`l', \\`o', \\`!'}; /* char array*/\n`}</code></pre>\n    <p>{`This same array can be declared as string when null(\\\\0) is appended at the end by user and array size is made sufficient to hold all characters.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This is shown below.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char stream[7] = {\\`H', \\`e', \\`l', \\`l', \\`o', \\`!', \\`\\\\0'};/*string */\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You can also initialize the above a character array stream can be initialized with a string constant “Hello! “. For example,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char str[7] = \"Hello!\";\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The compiler can automatically append a null character (\\\\0) to the end of the array, and treat the character array as a character string.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"string-initialization-type-3\"\n    }}>{`String Initialization Type 3`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The third type of initialization is not specifying the array size. For example,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char str[] = \"I like C.\";\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`This statement initializes an character array, str, with a string constant.” I like c. “`}</li>\n      <li parentName=\"ul\">{`Later when the compiler sees the statement, it will figure out the total memory space needed to hold the string constant plus an extra null character added by the compiler itself.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"initialization-after-declaration\"\n    }}>{`Initialization after Declaration`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char s[10] = \" Web Design\";\nis not the same as\nchar s[10];\ns = \"Web Design\"; /*Illegal declaration. */\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`This generates a compiler error.`}</li>\n      <li parentName=\"ul\">{`The assignment operator cannot be used with a string already declared.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"string-constants-versus-character-constants\"\n    }}>{`String Constants versus Character Constants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A string constant is a series of characters enclosed in double quotes (” “). On the other hand, a character constant is a character enclosed in single quotes (`}<inlineCode parentName=\"li\">{` `}</inlineCode>{`). When a character variable ch and a character array str are initialized with the same character,x, such as the following,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char ch = \\`x';\nchar str[] = \"x\";\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`One byte is reserved for the character variable ch, and two bytes are allocated for the character array str. The reason that an extra byte is needed for str is that the compiler has to append a null character to the array.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}