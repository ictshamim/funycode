{"expireTime":9007200882706187000,"key":"gatsby-plugin-mdx-entire-payload-0f0013597cffedca8e429936135be6b9-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer with Function in C","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":30,"offset":29},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":30,"offset":29},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"C allows operations of pointers with functions. The typical use of this is passing an argument to called function in the function declaration. Sometimes only with a pointer a complex function can be easily represented and success. The usage of  pointers with function in C definition may be classified into two groups.","position":{"start":{"line":2,"column":1,"offset":30},"end":{"line":2,"column":319,"offset":348},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":30},"end":{"line":2,"column":319,"offset":348},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Call by reference","position":{"start":{"line":4,"column":4,"offset":353},"end":{"line":4,"column":21,"offset":370},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":353},"end":{"line":4,"column":21,"offset":370},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":350},"end":{"line":4,"column":21,"offset":370},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Call by value.","position":{"start":{"line":5,"column":4,"offset":374},"end":{"line":5,"column":18,"offset":388},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":374},"end":{"line":5,"column":18,"offset":388},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":371},"end":{"line":5,"column":18,"offset":388},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Call by Reference","position":{"start":{"line":6,"column":4,"offset":392},"end":{"line":6,"column":21,"offset":409},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":392},"end":{"line":6,"column":21,"offset":409},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":389},"end":{"line":6,"column":21,"offset":409},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":350},"end":{"line":6,"column":21,"offset":409},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The address of a variable is passed to a function through a pointer. This means that the value of the variable maybe changed inside the function. Passing the address of a variable to a function is called passing by reference. The function which is called by reference can change the values of the variable used in the calling program. For example,","position":{"start":{"line":7,"column":3,"offset":412},"end":{"line":7,"column":350,"offset":759},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":412},"end":{"line":7,"column":350,"offset":759},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":410},"end":{"line":7,"column":350,"offset":759},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":410},"end":{"line":7,"column":350,"offset":759},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int x, y;","position":{"start":{"line":8,"column":1,"offset":760},"end":{"line":10,"column":4,"offset":779},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To pass by reference the variables x and y to function add, add (&x, &y); /","position":{"start":{"line":11,"column":3,"offset":782},"end":{"line":11,"column":78,"offset":857},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"address of x and y is passed","position":{"start":{"line":11,"column":79,"offset":858},"end":{"line":11,"column":107,"offset":886},"indent":[]}}],"position":{"start":{"line":11,"column":78,"offset":857},"end":{"line":11,"column":108,"offset":887},"indent":[]}},{"type":"text","value":"/ In the called function add () x and y variable values can obtained by inserting asterisk (*) before the formal parameters name.","position":{"start":{"line":11,"column":108,"offset":887},"end":{"line":11,"column":237,"offset":1016},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":782},"end":{"line":11,"column":237,"offset":1016},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":780},"end":{"line":11,"column":237,"offset":1016},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":780},"end":{"line":11,"column":237,"offset":1016},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C program to illustrate call by reference using pointer.","position":{"start":{"line":13,"column":5,"offset":1022},"end":{"line":13,"column":80,"offset":1097},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1018},"end":{"line":13,"column":80,"offset":1097},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"#include<stdio.h>\n#include<string.h>\nvoid main()\n    {\n    int x,y;\n    x=20;\n    y=30;\n    printf(\"\\n Value of x and y before function call a=%d, b= %d\", x, y);\n    fncn(&x, &y);\n    printf(\"\\n Value of x and y after function call a=%d,b=%d\", x, y);\n    }\nvoid fncn(int *p,int *q)\n{\n    {\n    *p=*p+*p+2;\n    *q=*q+*q+3;\n    }\n}","position":{"start":{"line":14,"column":1,"offset":1098},"end":{"line":33,"column":4,"offset":1437},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nValue of x and y before function call x=20, y=40\nValue of x and y after function call x=42, y=63","position":{"start":{"line":34,"column":1,"offset":1438},"end":{"line":38,"column":4,"offset":1550},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C program to illustrate call by reference using pointer.","position":{"start":{"line":39,"column":5,"offset":1555},"end":{"line":39,"column":80,"offset":1630},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1551},"end":{"line":39,"column":80,"offset":1630},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate call by reference using pointer.\n#include<stdio.h>\n#include<string.h>\nint myfunction(int p1, int* p2)\n    {\n    p1 = 1 ;\n    *p2 = 2;\n    }\nint main()\n    {\n    int x = 5, y = 6;\n    int *pY = &y ;\n    printf(\"\\nValue of x and y before function call x=%d, y=%d\", x, y);\n    myfunction(x, pY) ;\n    printf(\"\\n Value of x and y after function x=%d, y=%d\", x, y);\n    }","position":{"start":{"line":40,"column":1,"offset":1631},"end":{"line":57,"column":4,"offset":2041},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nx=5, y=6\nx=5, y=2","position":{"start":{"line":58,"column":1,"offset":2042},"end":{"line":62,"column":4,"offset":2075},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Call by Value","position":{"start":{"line":63,"column":4,"offset":2079},"end":{"line":63,"column":17,"offset":2092},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2076},"end":{"line":63,"column":17,"offset":2092},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The call by value method of passing arguments to a function copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument. By default, C programming uses call by value to pass arguments.","position":{"start":{"line":64,"column":3,"offset":2095},"end":{"line":64,"column":304,"offset":2396},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":2095},"end":{"line":64,"column":304,"offset":2396},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2093},"end":{"line":65,"column":1,"offset":2397},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Consider the function swap() definition as follows.","position":{"start":{"line":66,"column":3,"offset":2400},"end":{"line":66,"column":54,"offset":2451},"indent":[]}}],"position":{"start":{"line":66,"column":3,"offset":2400},"end":{"line":66,"column":54,"offset":2451},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2398},"end":{"line":66,"column":54,"offset":2451},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2093},"end":{"line":66,"column":54,"offset":2451},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"/* function definition to swap the values */\nvoid swap(int x, int y) {\n    int temp;\n    temp = x; /* save the value of x */\n    x = y;    /* put y into x */\n    y = temp; /* put temp into y */\n    return;\n    }","position":{"start":{"line":67,"column":1,"offset":2452},"end":{"line":76,"column":4,"offset":2673},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers and Arrays","position":{"start":{"line":77,"column":4,"offset":2677},"end":{"line":77,"column":23,"offset":2696},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2674},"end":{"line":77,"column":23,"offset":2696},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An array is actually very much like a pointer. We can declare the arrays first element of array can be declared as a1","position":{"start":{"line":78,"column":3,"offset":2699},"end":{"line":78,"column":120,"offset":2816},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":78,"column":121,"offset":2817},"end":{"line":78,"column":122,"offset":2818},"indent":[]}}],"position":{"start":{"line":78,"column":120,"offset":2816},"end":{"line":78,"column":123,"offset":2819},"indent":[]}},{"type":"text","value":" or as int ","position":{"start":{"line":78,"column":123,"offset":2819},"end":{"line":78,"column":134,"offset":2830},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"a1 because a","position":{"start":{"line":78,"column":135,"offset":2831},"end":{"line":78,"column":147,"offset":2843},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":78,"column":148,"offset":2844},"end":{"line":78,"column":149,"offset":2845},"indent":[]}}],"position":{"start":{"line":78,"column":147,"offset":2843},"end":{"line":78,"column":150,"offset":2846},"indent":[]}},{"type":"text","value":" is an address and ","position":{"start":{"line":78,"column":150,"offset":2846},"end":{"line":78,"column":169,"offset":2865},"indent":[]}}],"position":{"start":{"line":78,"column":134,"offset":2830},"end":{"line":78,"column":170,"offset":2866},"indent":[]}},{"type":"text","value":"a is also an address. Hence the correspondence between array and pointers can be understood in the following section.","position":{"start":{"line":78,"column":170,"offset":2866},"end":{"line":78,"column":287,"offset":2983},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":2699},"end":{"line":78,"column":287,"offset":2983},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2697},"end":{"line":78,"column":287,"offset":2983},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2697},"end":{"line":78,"column":287,"offset":2983},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers and One Dimensional Array","position":{"start":{"line":80,"column":4,"offset":2988},"end":{"line":80,"column":38,"offset":3022},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2985},"end":{"line":80,"column":38,"offset":3022},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An array is a collection of items of the same data type. For example, the following are all array declarations:","position":{"start":{"line":81,"column":3,"offset":3025},"end":{"line":81,"column":114,"offset":3136},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":3025},"end":{"line":81,"column":114,"offset":3136},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3023},"end":{"line":81,"column":114,"offset":3136},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3023},"end":{"line":81,"column":114,"offset":3136},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int x[30]; /* an array of integers/\nchar name[20]; /* an array of characters*/\ndouble g1[30]; /* an array of doubles*/\nConsider the following:\nint x[5] = {8, 4, 9, 6, 3};","position":{"start":{"line":82,"column":1,"offset":3137},"end":{"line":88,"column":4,"offset":3317},"indent":[1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here array x is containing 5 integers. Each of these integers can be referred by means of a subscript to x i.e. using x","position":{"start":{"line":89,"column":3,"offset":3320},"end":{"line":89,"column":122,"offset":3439},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":89,"column":123,"offset":3440},"end":{"line":89,"column":124,"offset":3441},"indent":[]}}],"position":{"start":{"line":89,"column":122,"offset":3439},"end":{"line":89,"column":125,"offset":3442},"indent":[]}},{"type":"text","value":" through x","position":{"start":{"line":89,"column":125,"offset":3442},"end":{"line":89,"column":135,"offset":3452},"indent":[]}},{"type":"linkReference","identifier":"5","label":"5","referenceType":"shortcut","children":[{"type":"text","value":"5","position":{"start":{"line":89,"column":136,"offset":3453},"end":{"line":89,"column":137,"offset":3454},"indent":[]}}],"position":{"start":{"line":89,"column":135,"offset":3452},"end":{"line":89,"column":138,"offset":3455},"indent":[]}},{"type":"text","value":". Alternatively array can be accessed via a pointer as follows:","position":{"start":{"line":89,"column":138,"offset":3455},"end":{"line":89,"column":201,"offset":3518},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":3320},"end":{"line":89,"column":201,"offset":3518},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3318},"end":{"line":89,"column":201,"offset":3518},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3318},"end":{"line":89,"column":201,"offset":3518},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int *ptr; /*declare the pointer*/\nptr = &x[0]; /* pointer points to first element of the array*/","position":{"start":{"line":90,"column":1,"offset":3519},"end":{"line":93,"column":4,"offset":3625},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In the similar way other array elements can also be accessed as given below.","position":{"start":{"line":94,"column":3,"offset":3628},"end":{"line":94,"column":79,"offset":3704},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":3628},"end":{"line":94,"column":79,"offset":3704},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3626},"end":{"line":94,"column":79,"offset":3704},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3626},"end":{"line":94,"column":79,"offset":3704},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"p = &x[1]; /* pointer points to second element of the array*/\np = &x[2]; /* pointer points to third element of the array*/\np = &x[3]; /* pointer points to fourth element of the array*/","position":{"start":{"line":95,"column":1,"offset":3705},"end":{"line":99,"column":4,"offset":3899},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The other way of assigning the array to pointer is","position":{"start":{"line":100,"column":3,"offset":3902},"end":{"line":100,"column":53,"offset":3952},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":3902},"end":{"line":100,"column":53,"offset":3952},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3900},"end":{"line":100,"column":53,"offset":3952},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3900},"end":{"line":100,"column":53,"offset":3952},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"int p[200];\nint*ptr;\nptr=p;\nThis is exactly same as ptr=p[0];","position":{"start":{"line":101,"column":1,"offset":3953},"end":{"line":106,"column":4,"offset":4024},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The following equalities are also valid.","position":{"start":{"line":107,"column":3,"offset":4027},"end":{"line":107,"column":43,"offset":4067},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":4027},"end":{"line":107,"column":43,"offset":4067},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":4025},"end":{"line":107,"column":43,"offset":4067},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":4025},"end":{"line":107,"column":43,"offset":4067},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Ptr+6=&p[6];\n*ptr==&p[0];\n*(ptr+6)==&value[6];","position":{"start":{"line":108,"column":1,"offset":4068},"end":{"line":112,"column":4,"offset":4124},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The array subscripting is defined in terms of pointer arithmetic. The expression a","position":{"start":{"line":113,"column":3,"offset":4127},"end":{"line":113,"column":85,"offset":4209},"indent":[]}},{"type":"linkReference","identifier":"i","label":"i","referenceType":"shortcut","children":[{"type":"text","value":"i","position":{"start":{"line":113,"column":86,"offset":4210},"end":{"line":113,"column":87,"offset":4211},"indent":[]}}],"position":{"start":{"line":113,"column":85,"offset":4209},"end":{"line":113,"column":88,"offset":4212},"indent":[]}},{"type":"text","value":"is defined to be same as *( (a)+(i) ). Array and pointers concept can be well understood by the following program.","position":{"start":{"line":113,"column":88,"offset":4212},"end":{"line":113,"column":202,"offset":4326},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":4127},"end":{"line":113,"column":202,"offset":4326},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":4125},"end":{"line":113,"column":202,"offset":4326},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":4125},"end":{"line":113,"column":202,"offset":4326},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Exampl-3: Write a C program to illustrate array and pointer.","position":{"start":{"line":115,"column":4,"offset":4331},"end":{"line":115,"column":64,"offset":4391},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":4328},"end":{"line":115,"column":64,"offset":4391},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate array and pointer.\n#include<stdio.h>\n#include<string.h>\nmain()\n    {\n    int a[4]={1,2,3,4};\n    int*ptr;\n    int i,n,temp;\n    n=4;\n    Printf(“ Contents of array\\n“)\n    for(i=0;i<=n-1;i++)\n        temp=a[i];\n    printf(“a[%d]value =%d \\n“ i, temp);\n    }","position":{"start":{"line":116,"column":1,"offset":4392},"end":{"line":131,"column":4,"offset":4693},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nContents of array\na[0] value=1\na[1] value=2\na[2] value=3\na[3] value=4","position":{"start":{"line":132,"column":1,"offset":4694},"end":{"line":139,"column":4,"offset":4779},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers and Strings","position":{"start":{"line":140,"column":4,"offset":4783},"end":{"line":140,"column":24,"offset":4803},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4780},"end":{"line":140,"column":24,"offset":4803},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A string is an array of characters ending with the NULL character. A string constant is enclosed in double quotes, e.g. “hello”, “I like C” In order to assign a pointer to string, A character data type pointer variable is declared and the address of the first element of a character array is assigned to pointer variable as shown For example,","position":{"start":{"line":141,"column":3,"offset":4806},"end":{"line":141,"column":345,"offset":5148},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":4806},"end":{"line":141,"column":345,"offset":5148},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":4804},"end":{"line":141,"column":345,"offset":5148},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":4804},"end":{"line":141,"column":345,"offset":5148},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"char a[] = \"hello\";/*string*/\nchar *ptr1;/*Declare a character data type pointer*/\nchar *ptr1 = &a[0]; /*Assign array to pointer*/\nTo print the string:\n\nprintf(\"string is: %s\\n\",a);\nprintf(\"string pointed by pointer ptr1: %s\\n\",ptr1);\nOUTPUT:\nstring is: hello\nstring pointed by pointer ptr1: hello","position":{"start":{"line":142,"column":1,"offset":5149},"end":{"line":153,"column":4,"offset":5456},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example-4: Write a C program to illustrate array and pointer.","position":{"start":{"line":154,"column":4,"offset":5460},"end":{"line":154,"column":65,"offset":5521},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":5457},"end":{"line":154,"column":65,"offset":5521},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to illustrate array and pointer.\n#include<stdio.h>\n#include<string.h>\nvoid main() {\n    char *array[2];\n    array[0]=\"Hello\";\n    array[1]=\"World\";\n    printf(\"The Array of String is = %s,%s\\n\", array[0], array[1]);\n    }","position":{"start":{"line":155,"column":1,"offset":5522},"end":{"line":165,"column":4,"offset":5773},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output\nThe Array of String is = Hello, World\nAll the string functions can be used with pointers.","position":{"start":{"line":166,"column":1,"offset":5774},"end":{"line":170,"column":4,"offset":5878},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C program to understand usage of strlen()function with pointer.","position":{"start":{"line":171,"column":5,"offset":5883},"end":{"line":171,"column":87,"offset":5965},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":5879},"end":{"line":171,"column":87,"offset":5965},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to understand usage of strlen()function with pointer.\n/* Measuring string length */\n#include<stdio.h>\n#include<string.h>\nint main()\n    {\n    char str1[] = {`A', ` `, `s', `t', `r', `i', `n', `g', `\\0'};\n    char str2[] = \"string constant\";\n    char *ptr_str = \"Assign a string to a pointer.\";\n    printf(\"The length of str1 is: %d bytes\\n\", strlen(str1));\n    printf(\"The length of str2 is: %d bytes\\n\", strlen(str2));\n    printf(\"The length of the string assigned to ptr_str is: %d bytes\\n\",\n    strlen(ptr_str));\n    return 0;\n    }","position":{"start":{"line":172,"column":1,"offset":5966},"end":{"line":188,"column":4,"offset":6531},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"OUTPUT\nThe length of str1 is: 9 bytes\nThe length of str2 is: 15 bytes\nThe length of the string assigned to ptr_str is: 29 bytes","position":{"start":{"line":189,"column":1,"offset":6532},"end":{"line":194,"column":4,"offset":6667},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Pointer with Function in C\",\"category\":\"Basic C Programming\",\"author\":\"Anonymous\",\"tags\":[\"#c\",\"#tutorial\"],\"thumbnailText\":\"C Programming Tutorial-33\",\"date\":\"2021-02-27T00:00:00.000Z\"}","position":{"start":{"line":196,"column":1,"offset":6669},"end":{"line":196,"column":225,"offset":6893},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":196,"column":225,"offset":6893}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pointer with Function in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-33\",\n  \"date\": \"2021-02-27T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"pointer-with-function-in-c\"\n  }, \"Pointer with Function in C\"), mdx(\"p\", null, \"C allows operations of pointers with functions. The typical use of this is passing an argument to called function in the function declaration. Sometimes only with a pointer a complex function can be easily represented and success. The usage of  pointers with function in C definition may be classified into two groups.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call by reference\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call by value.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call by Reference\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The address of a variable is passed to a function through a pointer. This means that the value of the variable maybe changed inside the function. Passing the address of a variable to a function is called passing by reference. The function which is called by reference can change the values of the variable used in the calling program. For example,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int x, y;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To pass by reference the variables x and y to function add, add (&x, &y); /\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"address of x and y is passed\"), \"/ In the called function add () x and y variable values can obtained by inserting asterisk (*) before the formal parameters name.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-call-by-reference-using-pointer\"\n  }, \"Example-1: Write a C program to illustrate call by reference using pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"#include<stdio.h>\\n#include<string.h>\\nvoid main()\\n    {\\n    int x,y;\\n    x=20;\\n    y=30;\\n    printf(\\\"\\\\n Value of x and y before function call a=%d, b= %d\\\", x, y);\\n    fncn(&x, &y);\\n    printf(\\\"\\\\n Value of x and y after function call a=%d,b=%d\\\", x, y);\\n    }\\nvoid fncn(int *p,int *q)\\n{\\n    {\\n    *p=*p+*p+2;\\n    *q=*q+*q+3;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nValue of x and y before function call x=20, y=40\\nValue of x and y after function call x=42, y=63\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-call-by-reference-using-pointer\"\n  }, \"Example-2: Write a C program to illustrate call by reference using pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate call by reference using pointer.\\n#include<stdio.h>\\n#include<string.h>\\nint myfunction(int p1, int* p2)\\n    {\\n    p1 = 1 ;\\n    *p2 = 2;\\n    }\\nint main()\\n    {\\n    int x = 5, y = 6;\\n    int *pY = &y ;\\n    printf(\\\"\\\\nValue of x and y before function call x=%d, y=%d\\\", x, y);\\n    myfunction(x, pY) ;\\n    printf(\\\"\\\\n Value of x and y after function x=%d, y=%d\\\", x, y);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nx=5, y=6\\nx=5, y=2\\n\")), mdx(\"h2\", {\n    \"id\": \"call-by-value\"\n  }, \"Call by Value\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The call by value method of passing arguments to a function copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument. By default, C programming uses call by value to pass arguments.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Consider the function swap() definition as follows.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/* function definition to swap the values */\\nvoid swap(int x, int y) {\\n    int temp;\\n    temp = x; /* save the value of x */\\n    x = y;    /* put y into x */\\n    y = temp; /* put temp into y */\\n    return;\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"pointers-and-arrays\"\n  }, \"Pointers and Arrays\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An array is actually very much like a pointer. We can declare the arrays first element of array can be declared as a1\", \"[0]\", \" or as int \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a1 because a\", \"[0]\", \" is an address and \"), \"a is also an address. Hence the correspondence between array and pointers can be understood in the following section.\")), mdx(\"h2\", {\n    \"id\": \"pointers-and-one-dimensional-array\"\n  }, \"Pointers and One Dimensional Array\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An array is a collection of items of the same data type. For example, the following are all array declarations:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int x[30]; /* an array of integers/\\nchar name[20]; /* an array of characters*/\\ndouble g1[30]; /* an array of doubles*/\\nConsider the following:\\nint x[5] = {8, 4, 9, 6, 3};\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here array x is containing 5 integers. Each of these integers can be referred by means of a subscript to x i.e. using x\", \"[0]\", \" through x\", \"[5]\", \". Alternatively array can be accessed via a pointer as follows:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int *ptr; /*declare the pointer*/\\nptr = &x[0]; /* pointer points to first element of the array*/\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the similar way other array elements can also be accessed as given below.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"p = &x[1]; /* pointer points to second element of the array*/\\np = &x[2]; /* pointer points to third element of the array*/\\np = &x[3]; /* pointer points to fourth element of the array*/\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The other way of assigning the array to pointer is\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"int p[200];\\nint*ptr;\\nptr=p;\\nThis is exactly same as ptr=p[0];\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The following equalities are also valid.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Ptr+6=&p[6];\\n*ptr==&p[0];\\n*(ptr+6)==&value[6];\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The array subscripting is defined in terms of pointer arithmetic. The expression a\", \"[i]\", \"is defined to be same as *( (a)+(i) ). Array and pointers concept can be well understood by the following program.\")), mdx(\"h2\", {\n    \"id\": \"exampl-3-write-a-c-program-to-illustrate-array-and-pointer\"\n  }, \"Exampl-3: Write a C program to illustrate array and pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate array and pointer.\\n#include<stdio.h>\\n#include<string.h>\\nmain()\\n    {\\n    int a[4]={1,2,3,4};\\n    int*ptr;\\n    int i,n,temp;\\n    n=4;\\n    Printf(\\u201C Contents of array\\\\n\\u201C)\\n    for(i=0;i<=n-1;i++)\\n        temp=a[i];\\n    printf(\\u201Ca[%d]value =%d \\\\n\\u201C i, temp);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nContents of array\\na[0] value=1\\na[1] value=2\\na[2] value=3\\na[3] value=4\\n\")), mdx(\"h2\", {\n    \"id\": \"pointers-and-strings\"\n  }, \"Pointers and Strings\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A string is an array of characters ending with the NULL character. A string constant is enclosed in double quotes, e.g. \\u201Chello\\u201D, \\u201CI like C\\u201D In order to assign a pointer to string, A character data type pointer variable is declared and the address of the first element of a character array is assigned to pointer variable as shown For example,\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"char a[] = \\\"hello\\\";/*string*/\\nchar *ptr1;/*Declare a character data type pointer*/\\nchar *ptr1 = &a[0]; /*Assign array to pointer*/\\nTo print the string:\\n\\nprintf(\\\"string is: %s\\\\n\\\",a);\\nprintf(\\\"string pointed by pointer ptr1: %s\\\\n\\\",ptr1);\\nOUTPUT:\\nstring is: hello\\nstring pointed by pointer ptr1: hello\\n\")), mdx(\"h2\", {\n    \"id\": \"example-4-write-a-c-program-to-illustrate-array-and-pointer\"\n  }, \"Example-4: Write a C program to illustrate array and pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to illustrate array and pointer.\\n#include<stdio.h>\\n#include<string.h>\\nvoid main() {\\n    char *array[2];\\n    array[0]=\\\"Hello\\\";\\n    array[1]=\\\"World\\\";\\n    printf(\\\"The Array of String is = %s,%s\\\\n\\\", array[0], array[1]);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output\\nThe Array of String is = Hello, World\\nAll the string functions can be used with pointers.\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-understand-usage-of-strlenfunction-with-pointer\"\n  }, \"Example-5: Write a C program to understand usage of strlen()function with pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to understand usage of strlen()function with pointer.\\n/* Measuring string length */\\n#include<stdio.h>\\n#include<string.h>\\nint main()\\n    {\\n    char str1[] = {`A', ` `, `s', `t', `r', `i', `n', `g', `\\\\0'};\\n    char str2[] = \\\"string constant\\\";\\n    char *ptr_str = \\\"Assign a string to a pointer.\\\";\\n    printf(\\\"The length of str1 is: %d bytes\\\\n\\\", strlen(str1));\\n    printf(\\\"The length of str2 is: %d bytes\\\\n\\\", strlen(str2));\\n    printf(\\\"The length of the string assigned to ptr_str is: %d bytes\\\\n\\\",\\n    strlen(ptr_str));\\n    return 0;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"OUTPUT\\nThe length of str1 is: 9 bytes\\nThe length of str2 is: 15 bytes\\nThe length of the string assigned to ptr_str is: 29 bytes\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Pointer with Function in C\",\n  \"category\": \"Basic C Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-33\",\n  \"date\": \"2021-02-27T00:00:00.000Z\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"pointer-with-function-in-c\"\n    }}>{`Pointer with Function in C`}</h2>\n    <p>{`C allows operations of pointers with functions. The typical use of this is passing an argument to called function in the function declaration. Sometimes only with a pointer a complex function can be easily represented and success. The usage of  pointers with function in C definition may be classified into two groups.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Call by reference`}</li>\n      <li parentName=\"ol\">{`Call by value.`}</li>\n      <li parentName=\"ol\">{`Call by Reference`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`The address of a variable is passed to a function through a pointer. This means that the value of the variable maybe changed inside the function. Passing the address of a variable to a function is called passing by reference. The function which is called by reference can change the values of the variable used in the calling program. For example,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int x, y;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To pass by reference the variables x and y to function add, add (&x, &y); /`}<em parentName=\"li\">{`address of x and y is passed`}</em>{`/ In the called function add () x and y variable values can obtained by inserting asterisk (*) before the formal parameters name.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-call-by-reference-using-pointer\"\n    }}>{`Example-1: Write a C program to illustrate call by reference using pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`#include<stdio.h>\n#include<string.h>\nvoid main()\n    {\n    int x,y;\n    x=20;\n    y=30;\n    printf(\"\\\\n Value of x and y before function call a=%d, b= %d\", x, y);\n    fncn(&x, &y);\n    printf(\"\\\\n Value of x and y after function call a=%d,b=%d\", x, y);\n    }\nvoid fncn(int *p,int *q)\n{\n    {\n    *p=*p+*p+2;\n    *q=*q+*q+3;\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nValue of x and y before function call x=20, y=40\nValue of x and y after function call x=42, y=63\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-call-by-reference-using-pointer\"\n    }}>{`Example-2: Write a C program to illustrate call by reference using pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate call by reference using pointer.\n#include<stdio.h>\n#include<string.h>\nint myfunction(int p1, int* p2)\n    {\n    p1 = 1 ;\n    *p2 = 2;\n    }\nint main()\n    {\n    int x = 5, y = 6;\n    int *pY = &y ;\n    printf(\"\\\\nValue of x and y before function call x=%d, y=%d\", x, y);\n    myfunction(x, pY) ;\n    printf(\"\\\\n Value of x and y after function x=%d, y=%d\", x, y);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nx=5, y=6\nx=5, y=2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"call-by-value\"\n    }}>{`Call by Value`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The call by value method of passing arguments to a function copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument. By default, C programming uses call by value to pass arguments.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Consider the function swap() definition as follows.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* function definition to swap the values */\nvoid swap(int x, int y) {\n    int temp;\n    temp = x; /* save the value of x */\n    x = y;    /* put y into x */\n    y = temp; /* put temp into y */\n    return;\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-and-arrays\"\n    }}>{`Pointers and Arrays`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`An array is actually very much like a pointer. We can declare the arrays first element of array can be declared as a1`}{`[0]`}{` or as int `}<em parentName=\"li\">{`a1 because a`}{`[0]`}{` is an address and `}</em>{`a is also an address. Hence the correspondence between array and pointers can be understood in the following section.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pointers-and-one-dimensional-array\"\n    }}>{`Pointers and One Dimensional Array`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`An array is a collection of items of the same data type. For example, the following are all array declarations:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int x[30]; /* an array of integers/\nchar name[20]; /* an array of characters*/\ndouble g1[30]; /* an array of doubles*/\nConsider the following:\nint x[5] = {8, 4, 9, 6, 3};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Here array x is containing 5 integers. Each of these integers can be referred by means of a subscript to x i.e. using x`}{`[0]`}{` through x`}{`[5]`}{`. Alternatively array can be accessed via a pointer as follows:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int *ptr; /*declare the pointer*/\nptr = &x[0]; /* pointer points to first element of the array*/\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`In the similar way other array elements can also be accessed as given below.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p = &x[1]; /* pointer points to second element of the array*/\np = &x[2]; /* pointer points to third element of the array*/\np = &x[3]; /* pointer points to fourth element of the array*/\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The other way of assigning the array to pointer is`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`int p[200];\nint*ptr;\nptr=p;\nThis is exactly same as ptr=p[0];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The following equalities are also valid.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Ptr+6=&p[6];\n*ptr==&p[0];\n*(ptr+6)==&value[6];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The array subscripting is defined in terms of pointer arithmetic. The expression a`}{`[i]`}{`is defined to be same as *( (a)+(i) ). Array and pointers concept can be well understood by the following program.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"exampl-3-write-a-c-program-to-illustrate-array-and-pointer\"\n    }}>{`Exampl-3: Write a C program to illustrate array and pointer.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate array and pointer.\n#include<stdio.h>\n#include<string.h>\nmain()\n    {\n    int a[4]={1,2,3,4};\n    int*ptr;\n    int i,n,temp;\n    n=4;\n    Printf(“ Contents of array\\\\n“)\n    for(i=0;i<=n-1;i++)\n        temp=a[i];\n    printf(“a[%d]value =%d \\\\n“ i, temp);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nContents of array\na[0] value=1\na[1] value=2\na[2] value=3\na[3] value=4\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-and-strings\"\n    }}>{`Pointers and Strings`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A string is an array of characters ending with the NULL character. A string constant is enclosed in double quotes, e.g. “hello”, “I like C” In order to assign a pointer to string, A character data type pointer variable is declared and the address of the first element of a character array is assigned to pointer variable as shown For example,`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`char a[] = \"hello\";/*string*/\nchar *ptr1;/*Declare a character data type pointer*/\nchar *ptr1 = &a[0]; /*Assign array to pointer*/\nTo print the string:\n\nprintf(\"string is: %s\\\\n\",a);\nprintf(\"string pointed by pointer ptr1: %s\\\\n\",ptr1);\nOUTPUT:\nstring is: hello\nstring pointed by pointer ptr1: hello\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-4-write-a-c-program-to-illustrate-array-and-pointer\"\n    }}>{`Example-4: Write a C program to illustrate array and pointer.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to illustrate array and pointer.\n#include<stdio.h>\n#include<string.h>\nvoid main() {\n    char *array[2];\n    array[0]=\"Hello\";\n    array[1]=\"World\";\n    printf(\"The Array of String is = %s,%s\\\\n\", array[0], array[1]);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output\nThe Array of String is = Hello, World\nAll the string functions can be used with pointers.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-understand-usage-of-strlenfunction-with-pointer\"\n    }}>{`Example-5: Write a C program to understand usage of strlen()function with pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to understand usage of strlen()function with pointer.\n/* Measuring string length */\n#include<stdio.h>\n#include<string.h>\nint main()\n    {\n    char str1[] = {\\`A', \\` \\`, \\`s', \\`t', \\`r', \\`i', \\`n', \\`g', \\`\\\\0'};\n    char str2[] = \"string constant\";\n    char *ptr_str = \"Assign a string to a pointer.\";\n    printf(\"The length of str1 is: %d bytes\\\\n\", strlen(str1));\n    printf(\"The length of str2 is: %d bytes\\\\n\", strlen(str2));\n    printf(\"The length of the string assigned to ptr_str is: %d bytes\\\\n\",\n    strlen(ptr_str));\n    return 0;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`OUTPUT\nThe length of str1 is: 9 bytes\nThe length of str2 is: 15 bytes\nThe length of the string assigned to ptr_str is: 29 bytes\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}