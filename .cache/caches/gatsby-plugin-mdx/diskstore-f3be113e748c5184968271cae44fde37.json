{"expireTime":9007200882706215000,"key":"gatsby-plugin-mdx-entire-payload-3515158cce010ba398cd23b60692fffa-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Friend Function in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":26,"offset":25},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":26,"offset":25},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A friend function is totally a new concept in C++. As the name implies it will be a friend someone. We can make a function as a friend of a class and can allow that friend function to access private and public data members of that class. Friend functions are mostly used where two or more classes want to share a common function. We present a number of points about friend functions.","position":{"start":{"line":2,"column":1,"offset":27},"end":{"line":2,"column":384,"offset":410},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":27},"end":{"line":2,"column":384,"offset":410},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"First of all friend is keyword. A friend function is created by placing the keyword friend in the function declaration but not in function definition. Exception is if you declare and define at the same place.","position":{"start":{"line":4,"column":3,"offset":416},"end":{"line":4,"column":211,"offset":624},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":416},"end":{"line":4,"column":211,"offset":624},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":414},"end":{"line":4,"column":211,"offset":624},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function is a friend of the class in which it is declared.","position":{"start":{"line":5,"column":3,"offset":628},"end":{"line":5,"column":70,"offset":695},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":628},"end":{"line":5,"column":70,"offset":695},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":626},"end":{"line":5,"column":70,"offset":695},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function is not a member function of the class and cannot be called from any object of the class using dot operator.","position":{"start":{"line":6,"column":3,"offset":699},"end":{"line":6,"column":128,"offset":824},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":699},"end":{"line":6,"column":128,"offset":824},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":697},"end":{"line":6,"column":128,"offset":824},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function can have full access to the public, private and protected data member of the class to which it is a friend.","position":{"start":{"line":7,"column":3,"offset":828},"end":{"line":7,"column":128,"offset":953},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":828},"end":{"line":7,"column":128,"offset":953},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":826},"end":{"line":7,"column":128,"offset":953},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The arguments of friend functions are usually objects of the class to which it is a friend.","position":{"start":{"line":8,"column":3,"offset":957},"end":{"line":8,"column":94,"offset":1048},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":957},"end":{"line":8,"column":94,"offset":1048},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":955},"end":{"line":8,"column":94,"offset":1048},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function not being a member function of class is called as a normal function.","position":{"start":{"line":9,"column":3,"offset":1052},"end":{"line":9,"column":89,"offset":1138},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":1052},"end":{"line":9,"column":89,"offset":1138},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":1050},"end":{"line":9,"column":89,"offset":1138},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function can be friend of more than one class.","position":{"start":{"line":10,"column":3,"offset":1142},"end":{"line":10,"column":58,"offset":1197},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":1142},"end":{"line":10,"column":58,"offset":1197},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1140},"end":{"line":10,"column":58,"offset":1197},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A function of one class can be a friend of another class.","position":{"start":{"line":11,"column":3,"offset":1201},"end":{"line":11,"column":60,"offset":1258},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":1201},"end":{"line":11,"column":60,"offset":1258},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1199},"end":{"line":11,"column":60,"offset":1258},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can have whole class as a friend of another class","position":{"start":{"line":12,"column":3,"offset":1262},"end":{"line":12,"column":55,"offset":1314},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":1262},"end":{"line":12,"column":55,"offset":1314},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1260},"end":{"line":12,"column":55,"offset":1314},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We use friend function usually with multiple classes but can used with single class also.","position":{"start":{"line":13,"column":3,"offset":1318},"end":{"line":13,"column":92,"offset":1407},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":1318},"end":{"line":13,"column":92,"offset":1407},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1316},"end":{"line":13,"column":92,"offset":1407},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A friend function can be declared in the public or private visibility mode without affecting its meaning.","position":{"start":{"line":14,"column":3,"offset":1411},"end":{"line":14,"column":108,"offset":1516},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":1411},"end":{"line":14,"column":108,"offset":1516},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1409},"end":{"line":14,"column":108,"offset":1516},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There can be any number of friend functions of a class.","position":{"start":{"line":15,"column":3,"offset":1520},"end":{"line":15,"column":58,"offset":1575},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1520},"end":{"line":15,"column":58,"offset":1575},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1518},"end":{"line":15,"column":58,"offset":1575},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The general syntax of creating a friend function as a friend class is :","position":{"start":{"line":16,"column":3,"offset":1579},"end":{"line":16,"column":74,"offset":1650},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1579},"end":{"line":16,"column":74,"offset":1650},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1577},"end":{"line":16,"column":74,"offset":1650},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":414},"end":{"line":16,"column":74,"offset":1650},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"class demo\n    {\n    data members :\n    public :\n    members functions;\n    // friend function declaration\n    friend data_type function_name (parameters);\n    };\ndata_type function_name (parameters)\n//definition\n    {\n    function definition;\n    }","position":{"start":{"line":17,"column":1,"offset":1652},"end":{"line":31,"column":4,"offset":1925},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Demerits of Friend Function","position":{"start":{"line":33,"column":4,"offset":1932},"end":{"line":33,"column":31,"offset":1959},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1929},"end":{"line":33,"column":31,"offset":1959},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Friend function cannot access the class members and functions directly, they need to have a class object which using dot can call the members of the class.","position":{"start":{"line":34,"column":3,"offset":1963},"end":{"line":34,"column":158,"offset":2118},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1963},"end":{"line":34,"column":158,"offset":2118},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1961},"end":{"line":34,"column":158,"offset":2118},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Creating friend classes and functions defy the idea of encapsulation and create exception in the ways of data hiding.","position":{"start":{"line":35,"column":3,"offset":2122},"end":{"line":35,"column":120,"offset":2239},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":2122},"end":{"line":35,"column":120,"offset":2239},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2120},"end":{"line":35,"column":120,"offset":2239},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Usages of many friend functions some times make you think to redesign your program.","position":{"start":{"line":36,"column":3,"offset":2243},"end":{"line":36,"column":86,"offset":2326},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":2243},"end":{"line":36,"column":86,"offset":2326},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2241},"end":{"line":36,"column":86,"offset":2326},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Friend functions are conceptually messy and potentially lead to spaghetti-code situations as numerous friend functions muddy the clear boundaries between classes.","position":{"start":{"line":37,"column":3,"offset":2330},"end":{"line":37,"column":165,"offset":2492},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2330},"end":{"line":37,"column":165,"offset":2492},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2328},"end":{"line":37,"column":165,"offset":2492},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1961},"end":{"line":37,"column":165,"offset":2492},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to find the square of a number using friend function.","position":{"start":{"line":39,"column":5,"offset":2500},"end":{"line":39,"column":89,"offset":2584},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2496},"end":{"line":39,"column":89,"offset":2584},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to find the square of a number using friend function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    int fx;\n    public :\n    void inputf(int x)\n        {\n        fx=x;\n        }\n    friend int findsqr(demo);\n    };\nint findsqr(demo d)\n    {\n    return d.fx * d.fx;\n    }\nint main( )\n    {\n    demo F;\n    F.inputf(30);\n    cout<<\"Square is=\"<<findsqr(F);\n    }","position":{"start":{"line":40,"column":1,"offset":2586},"end":{"line":64,"column":4,"offset":3017},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nSquare is=900","position":{"start":{"line":65,"column":1,"offset":3019},"end":{"line":68,"column":4,"offset":3051},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.","position":{"start":{"line":69,"column":5,"offset":3057},"end":{"line":69,"column":132,"offset":3184},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3053},"end":{"line":69,"column":132,"offset":3184},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass demo\n    {\n    char str[15];\n    public :\n    void inputf(char s[ ])\n        {\n        strcpy(str,s);\n        }\n    friend char* toupper(demo d)\n        {\n        static char temp[15];\n        strcpy(temp,strupr(d.str));\n        return temp;\n        }\n    };\nint main( )\n    {\n    demo F;\n    F.inputf(\"hari mohan\");\n    cout<<\"String in upper case \\n\";\n    cout<<toupper(F);\n    };","position":{"start":{"line":70,"column":1,"offset":3186},"end":{"line":97,"column":4,"offset":3789},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nString in upper case\nHARI MOHAN","position":{"start":{"line":98,"column":1,"offset":3791},"end":{"line":102,"column":4,"offset":3842},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to find the maximum number from two number of different class implementation.","position":{"start":{"line":103,"column":5,"offset":3848},"end":{"line":103,"column":113,"offset":3956},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3844},"end":{"line":103,"column":113,"offset":3956},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to find the maximum number from two number of different class implementation.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass second;\nclass first\n    {\n    int fx;\n    public :\n    void inputf(int x)\n        {\n        fx=x;\n        }\n    friend void findmax(first,second);\n    };\nclass second\n    {\n    int sx;\n    public :\n    void inputs(int x)\n        {\n        sx = x;\n        }\n    friend void findmax(first,second);\n    };\nvoid findmax(first A, second B)\n    {\n    if(A.fx>B.sx)\n      cout<<A.fx<<\"of class first is greater than \"<<B.sx<<\"of class second\\n\";\n    else\n     cout<<B.sx<<\"of class second is greater than\"<<A.fx<<\"of class first\\n\";\n    }\nint main( )\n    {\n    first F;\n    second S;\n    F.inputf(40);\n    S.inputs(70);\n    findmax(F,S);\n    }","position":{"start":{"line":104,"column":1,"offset":3958},"end":{"line":145,"column":4,"offset":4810},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\n70 of class second is greater than 40 of class first","position":{"start":{"line":146,"column":1,"offset":4812},"end":{"line":149,"column":4,"offset":4883},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example-4: Write a C++ program to implement the whole class as a friend of another class.","position":{"start":{"line":150,"column":4,"offset":4888},"end":{"line":150,"column":93,"offset":4977},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":4885},"end":{"line":150,"column":93,"offset":4977},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to implement the whole class as a friend of another class.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass second;\nclass first\n    {\n    public :\n    void silly( )\n        {\n        cout<<\"IN SILLY OF FIRST CLASS \"<<endl;\n        }\n    friend class second;\n    };\nclass second\n    {\n    public :\n    void show(first s)\n        {\n        s.silly( );\n        }\n    };\nint main( )\n    {\n    second s;\n    first f;\n    s.show(f);\n    }","position":{"start":{"line":151,"column":1,"offset":4979},"end":{"line":180,"column":4,"offset":5488},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nIN SILLY OF FIRST CLASS","position":{"start":{"line":181,"column":1,"offset":5490},"end":{"line":184,"column":4,"offset":5532},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Friend Function In Cplusplus\",\"category\":\"Cplusplus Programming\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-14T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-18\"}","position":{"start":{"line":186,"column":1,"offset":5534},"end":{"line":186,"column":221,"offset":5754},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":186,"column":221,"offset":5754}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Friend Function In Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-14T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-18\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"friend-function-in-c\"\n  }, \"Friend Function in C++\"), mdx(\"p\", null, \"A friend function is totally a new concept in C++. As the name implies it will be a friend someone. We can make a function as a friend of a class and can allow that friend function to access private and public data members of that class. Friend functions are mostly used where two or more classes want to share a common function. We present a number of points about friend functions.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"First of all friend is keyword. A friend function is created by placing the keyword friend in the function declaration but not in function definition. Exception is if you declare and define at the same place.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function is a friend of the class in which it is declared.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function is not a member function of the class and cannot be called from any object of the class using dot operator.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function can have full access to the public, private and protected data member of the class to which it is a friend.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The arguments of friend functions are usually objects of the class to which it is a friend.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function not being a member function of class is called as a normal function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function can be friend of more than one class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A function of one class can be a friend of another class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can have whole class as a friend of another class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use friend function usually with multiple classes but can used with single class also.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A friend function can be declared in the public or private visibility mode without affecting its meaning.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There can be any number of friend functions of a class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The general syntax of creating a friend function as a friend class is :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"class demo\\n    {\\n    data members :\\n    public :\\n    members functions;\\n    // friend function declaration\\n    friend data_type function_name (parameters);\\n    };\\ndata_type function_name (parameters)\\n//definition\\n    {\\n    function definition;\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"demerits-of-friend-function\"\n  }, \"Demerits of Friend Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Friend function cannot access the class members and functions directly, they need to have a class object which using dot can call the members of the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creating friend classes and functions defy the idea of encapsulation and create exception in the ways of data hiding.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Usages of many friend functions some times make you think to redesign your program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Friend functions are conceptually messy and potentially lead to spaghetti-code situations as numerous friend functions muddy the clear boundaries between classes.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-find-the-square-of-a-number-using-friend-function\"\n  }, \"Example-1: Write a C++ program to find the square of a number using friend function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to find the square of a number using friend function.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    int fx;\\n    public :\\n    void inputf(int x)\\n        {\\n        fx=x;\\n        }\\n    friend int findsqr(demo);\\n    };\\nint findsqr(demo d)\\n    {\\n    return d.fx * d.fx;\\n    }\\nint main( )\\n    {\\n    demo F;\\n    F.inputf(30);\\n    cout<<\\\"Square is=\\\"<<findsqr(F);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nSquare is=900\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-convert-lower-case-string-to-uppercase-using-friend-function-and-single-class-implementation\"\n  }, \"Example-2: Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.\\n#include<iostream>\\n#include<string.h>\\nusing namespace std;\\nclass demo\\n    {\\n    char str[15];\\n    public :\\n    void inputf(char s[ ])\\n        {\\n        strcpy(str,s);\\n        }\\n    friend char* toupper(demo d)\\n        {\\n        static char temp[15];\\n        strcpy(temp,strupr(d.str));\\n        return temp;\\n        }\\n    };\\nint main( )\\n    {\\n    demo F;\\n    F.inputf(\\\"hari mohan\\\");\\n    cout<<\\\"String in upper case \\\\n\\\";\\n    cout<<toupper(F);\\n    };\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nString in upper case\\nHARI MOHAN\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-find-the-maximum-number-from-two-number-of-different-class-implementation\"\n  }, \"Example-3: Write a C++ program to find the maximum number from two number of different class implementation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to find the maximum number from two number of different class implementation.\\n#include<iostream>\\n#include<string.h>\\nusing namespace std;\\nclass second;\\nclass first\\n    {\\n    int fx;\\n    public :\\n    void inputf(int x)\\n        {\\n        fx=x;\\n        }\\n    friend void findmax(first,second);\\n    };\\nclass second\\n    {\\n    int sx;\\n    public :\\n    void inputs(int x)\\n        {\\n        sx = x;\\n        }\\n    friend void findmax(first,second);\\n    };\\nvoid findmax(first A, second B)\\n    {\\n    if(A.fx>B.sx)\\n      cout<<A.fx<<\\\"of class first is greater than \\\"<<B.sx<<\\\"of class second\\\\n\\\";\\n    else\\n     cout<<B.sx<<\\\"of class second is greater than\\\"<<A.fx<<\\\"of class first\\\\n\\\";\\n    }\\nint main( )\\n    {\\n    first F;\\n    second S;\\n    F.inputf(40);\\n    S.inputs(70);\\n    findmax(F,S);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\n70 of class second is greater than 40 of class first\\n\")), mdx(\"h2\", {\n    \"id\": \"example-4-write-a-c-program-to-implement-the-whole-class-as-a-friend-of-another-class\"\n  }, \"Example-4: Write a C++ program to implement the whole class as a friend of another class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to implement the whole class as a friend of another class.\\n#include<iostream>\\n#include<string.h>\\nusing namespace std;\\nclass second;\\nclass first\\n    {\\n    public :\\n    void silly( )\\n        {\\n        cout<<\\\"IN SILLY OF FIRST CLASS \\\"<<endl;\\n        }\\n    friend class second;\\n    };\\nclass second\\n    {\\n    public :\\n    void show(first s)\\n        {\\n        s.silly( );\\n        }\\n    };\\nint main( )\\n    {\\n    second s;\\n    first f;\\n    s.show(f);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nIN SILLY OF FIRST CLASS\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Friend Function In Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-14T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-18\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"friend-function-in-c\"\n    }}>{`Friend Function in C++`}</h2>\n    <p>{`A friend function is totally a new concept in C++. As the name implies it will be a friend someone. We can make a function as a friend of a class and can allow that friend function to access private and public data members of that class. Friend functions are mostly used where two or more classes want to share a common function. We present a number of points about friend functions.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`First of all friend is keyword. A friend function is created by placing the keyword friend in the function declaration but not in function definition. Exception is if you declare and define at the same place.`}</li>\n      <li parentName=\"ul\">{`A friend function is a friend of the class in which it is declared.`}</li>\n      <li parentName=\"ul\">{`A friend function is not a member function of the class and cannot be called from any object of the class using dot operator.`}</li>\n      <li parentName=\"ul\">{`A friend function can have full access to the public, private and protected data member of the class to which it is a friend.`}</li>\n      <li parentName=\"ul\">{`The arguments of friend functions are usually objects of the class to which it is a friend.`}</li>\n      <li parentName=\"ul\">{`A friend function not being a member function of class is called as a normal function.`}</li>\n      <li parentName=\"ul\">{`A friend function can be friend of more than one class.`}</li>\n      <li parentName=\"ul\">{`A function of one class can be a friend of another class.`}</li>\n      <li parentName=\"ul\">{`We can have whole class as a friend of another class`}</li>\n      <li parentName=\"ul\">{`We use friend function usually with multiple classes but can used with single class also.`}</li>\n      <li parentName=\"ul\">{`A friend function can be declared in the public or private visibility mode without affecting its meaning.`}</li>\n      <li parentName=\"ul\">{`There can be any number of friend functions of a class.`}</li>\n      <li parentName=\"ul\">{`The general syntax of creating a friend function as a friend class is :`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class demo\n    {\n    data members :\n    public :\n    members functions;\n    // friend function declaration\n    friend data_type function_name (parameters);\n    };\ndata_type function_name (parameters)\n//definition\n    {\n    function definition;\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demerits-of-friend-function\"\n    }}>{`Demerits of Friend Function`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Friend function cannot access the class members and functions directly, they need to have a class object which using dot can call the members of the class.`}</li>\n      <li parentName=\"ul\">{`Creating friend classes and functions defy the idea of encapsulation and create exception in the ways of data hiding.`}</li>\n      <li parentName=\"ul\">{`Usages of many friend functions some times make you think to redesign your program.`}</li>\n      <li parentName=\"ul\">{`Friend functions are conceptually messy and potentially lead to spaghetti-code situations as numerous friend functions muddy the clear boundaries between classes.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-find-the-square-of-a-number-using-friend-function\"\n    }}>{`Example-1: Write a C++ program to find the square of a number using friend function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to find the square of a number using friend function.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    int fx;\n    public :\n    void inputf(int x)\n        {\n        fx=x;\n        }\n    friend int findsqr(demo);\n    };\nint findsqr(demo d)\n    {\n    return d.fx * d.fx;\n    }\nint main( )\n    {\n    demo F;\n    F.inputf(30);\n    cout<<\"Square is=\"<<findsqr(F);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nSquare is=900\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-convert-lower-case-string-to-uppercase-using-friend-function-and-single-class-implementation\"\n    }}>{`Example-2: Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to convert lower case string to uppercase using friend function and single class implementation.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass demo\n    {\n    char str[15];\n    public :\n    void inputf(char s[ ])\n        {\n        strcpy(str,s);\n        }\n    friend char* toupper(demo d)\n        {\n        static char temp[15];\n        strcpy(temp,strupr(d.str));\n        return temp;\n        }\n    };\nint main( )\n    {\n    demo F;\n    F.inputf(\"hari mohan\");\n    cout<<\"String in upper case \\\\n\";\n    cout<<toupper(F);\n    };\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nString in upper case\nHARI MOHAN\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-find-the-maximum-number-from-two-number-of-different-class-implementation\"\n    }}>{`Example-3: Write a C++ program to find the maximum number from two number of different class implementation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to find the maximum number from two number of different class implementation.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass second;\nclass first\n    {\n    int fx;\n    public :\n    void inputf(int x)\n        {\n        fx=x;\n        }\n    friend void findmax(first,second);\n    };\nclass second\n    {\n    int sx;\n    public :\n    void inputs(int x)\n        {\n        sx = x;\n        }\n    friend void findmax(first,second);\n    };\nvoid findmax(first A, second B)\n    {\n    if(A.fx>B.sx)\n      cout<<A.fx<<\"of class first is greater than \"<<B.sx<<\"of class second\\\\n\";\n    else\n     cout<<B.sx<<\"of class second is greater than\"<<A.fx<<\"of class first\\\\n\";\n    }\nint main( )\n    {\n    first F;\n    second S;\n    F.inputf(40);\n    S.inputs(70);\n    findmax(F,S);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\n70 of class second is greater than 40 of class first\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-4-write-a-c-program-to-implement-the-whole-class-as-a-friend-of-another-class\"\n    }}>{`Example-4: Write a C++ program to implement the whole class as a friend of another class.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to implement the whole class as a friend of another class.\n#include<iostream>\n#include<string.h>\nusing namespace std;\nclass second;\nclass first\n    {\n    public :\n    void silly( )\n        {\n        cout<<\"IN SILLY OF FIRST CLASS \"<<endl;\n        }\n    friend class second;\n    };\nclass second\n    {\n    public :\n    void show(first s)\n        {\n        s.silly( );\n        }\n    };\nint main( )\n    {\n    second s;\n    first f;\n    s.show(f);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nIN SILLY OF FIRST CLASS\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}