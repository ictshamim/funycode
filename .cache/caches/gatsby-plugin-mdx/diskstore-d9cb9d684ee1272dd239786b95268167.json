{"expireTime":9007200883071699000,"key":"gatsby-plugin-mdx-entire-payload-854cda18f71f60ea68d9d4f2c20dbc07--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"File Handling in C","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":22,"offset":21},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":22,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Built in Function","position":{"start":{"line":2,"column":5,"offset":26},"end":{"line":2,"column":22,"offset":43},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":22},"end":{"line":2,"column":22,"offset":43},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to perform the file operations in C we must use the high level I/O functions which are in C standard I/O library. They are","position":{"start":{"line":3,"column":1,"offset":44},"end":{"line":3,"column":132,"offset":175},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":44},"end":{"line":3,"column":132,"offset":175},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"getc() and putc() functions","position":{"start":{"line":5,"column":4,"offset":180},"end":{"line":5,"column":31,"offset":207},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":177},"end":{"line":5,"column":31,"offset":207},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"getc()/fgetc() : It is used to read a character from a file that has been opened in a read mode.","position":{"start":{"line":7,"column":3,"offset":211},"end":{"line":7,"column":99,"offset":307},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":211},"end":{"line":7,"column":99,"offset":307},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":209},"end":{"line":7,"column":99,"offset":307},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It reads a character from the file whose file pointer is fp. The file pointer moves by one character for every operation of getc(). The getc() will return an end-of –marker EOF, when an end of file has been reached.","position":{"start":{"line":8,"column":3,"offset":310},"end":{"line":8,"column":218,"offset":525},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":310},"end":{"line":8,"column":218,"offset":525},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":308},"end":{"line":8,"column":218,"offset":525},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":209},"end":{"line":8,"column":218,"offset":525},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"Syntax: getc(fp);\nEx: char ch;\nch=getc(fp);\nputc()/fputc()","position":{"start":{"line":9,"column":1,"offset":526},"end":{"line":14,"column":4,"offset":592},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It is used to write a character contained in the character variable to the file associated with the FILE pointer fp. fputc() also returns an end-of –marker EOF, when an end of file has been reached.","position":{"start":{"line":15,"column":3,"offset":595},"end":{"line":15,"column":201,"offset":793},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":595},"end":{"line":15,"column":201,"offset":793},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":593},"end":{"line":15,"column":201,"offset":793},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":593},"end":{"line":15,"column":201,"offset":793},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Syntax: putc(c,fp);\nExample: char c;\nputc(c,fp);","position":{"start":{"line":16,"column":1,"offset":794},"end":{"line":20,"column":4,"offset":852},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C program to implement fgetc() and fputc() function in file.","position":{"start":{"line":22,"column":5,"offset":858},"end":{"line":22,"column":84,"offset":937},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":854},"end":{"line":22,"column":84,"offset":937},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Write a C program to implement fgetc() and fputc() function in file.c() and fputc():\n#include<stdio.h>\nvoid main()\n    {\n    FILE *fp;\n    char ch;\n    fp=fopen(\"input1.txt\",\"w\");\n    printf(\"\\n enter some text hereand press cntrl D or Z to stop :\\n\");\n    while((ch=getchar())!=EOF)\n        fputc(ch,fp);\n    fclose(fp);\n    fp=fopen(\"input1.txt\",\"r\");\n    printf(\"\\n The entered text is : \\n\");\n    while((ch=fgetc(fp))!=EOF)\n        putchar(ch);\n    fclose(fp);\n    }","position":{"start":{"line":23,"column":1,"offset":938},"end":{"line":41,"column":4,"offset":1421},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"fprintf() and fscanf()","position":{"start":{"line":43,"column":4,"offset":1426},"end":{"line":43,"column":26,"offset":1448},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1423},"end":{"line":43,"column":26,"offset":1448},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In order to handle a group of mixed data simultaneously there are two functions that are fprintf() and fscanf().","position":{"start":{"line":45,"column":3,"offset":1452},"end":{"line":45,"column":115,"offset":1564},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":1452},"end":{"line":45,"column":115,"offset":1564},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1450},"end":{"line":45,"column":115,"offset":1564},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These two functions are identical to printf and scanf functions, except that they work on files.","position":{"start":{"line":46,"column":3,"offset":1567},"end":{"line":46,"column":99,"offset":1663},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":1567},"end":{"line":46,"column":99,"offset":1663},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1565},"end":{"line":46,"column":99,"offset":1663},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The first argument of these functions is a file pointer which specifies the file to be used.","position":{"start":{"line":47,"column":3,"offset":1666},"end":{"line":47,"column":95,"offset":1758},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":1666},"end":{"line":47,"column":95,"offset":1758},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1664},"end":{"line":47,"column":95,"offset":1758},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1450},"end":{"line":47,"column":95,"offset":1758},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"fprintf(): The general form of fprintf() is\nSyntax: fprintf(fp,”control string”,list);","position":{"start":{"line":48,"column":1,"offset":1759},"end":{"line":51,"column":4,"offset":1853},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"where fp is a file pointer associated with a file that has been opened for writing .","position":{"start":{"line":52,"column":3,"offset":1856},"end":{"line":52,"column":87,"offset":1940},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":1856},"end":{"line":52,"column":87,"offset":1940},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1854},"end":{"line":52,"column":87,"offset":1940},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The control string contains output specifications for the items in the list. .","position":{"start":{"line":53,"column":3,"offset":1943},"end":{"line":53,"column":81,"offset":2021},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":1943},"end":{"line":53,"column":81,"offset":2021},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1941},"end":{"line":53,"column":81,"offset":2021},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1854},"end":{"line":53,"column":81,"offset":2021},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"Example: fprintf(fp,”%s%d”,name,age);\nfscanf() : It is used to read a number of values from a file.\nSyntax: fscanf(fp,”control string”,list);\nExample: fscanf(fp2,”%s %d”,item,&quantity);","position":{"start":{"line":54,"column":1,"offset":2022},"end":{"line":59,"column":4,"offset":2216},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"like scanf , fscanf also returns the number of items that are successfully read. when the end of file is reached it returns the value EOF.","position":{"start":{"line":60,"column":3,"offset":2219},"end":{"line":60,"column":141,"offset":2357},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":2219},"end":{"line":60,"column":141,"offset":2357},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2217},"end":{"line":60,"column":141,"offset":2357},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2217},"end":{"line":60,"column":141,"offset":2357},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C program to implement fscanf() and fprintf() function in file.","position":{"start":{"line":62,"column":5,"offset":2363},"end":{"line":62,"column":87,"offset":2445},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2359},"end":{"line":62,"column":87,"offset":2445},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to implement fscanf() and fprintf() function in file.\n#include<stdio.h>\nvoid main()\n    {\n    int a=22,b;\n    char s1[20]=\"Welocme_to_c\",s2[20];\n    float c=12.34,d;\n    FILE *f3;\n    f3=fopen(\"mynew3\",\"w\");\n    fprintf(f3,\"%d %s %f\",a,s1,c);\n    fclose(f3);\n    f3=fopen(\"mynew3\",\"r\");\n    fscanf(f3,\"%d %s %f\",&b,s2,&d);\n    printf(\"\\n a=%d \\t s1=%s \\t c=%f \\n b=%d \\t s2=%s \\t d=%f\",a,s1,c,b,s2,d);\n    fclose(f3);\n    }","position":{"start":{"line":63,"column":1,"offset":2446},"end":{"line":80,"column":4,"offset":2899},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"getw() and putw()","position":{"start":{"line":81,"column":4,"offset":2903},"end":{"line":81,"column":21,"offset":2920},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2900},"end":{"line":81,"column":21,"offset":2920},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The getw() and putw()are integer oriented functions .They are similar to the getc() and putc() functions and are used to read and write integer values .","position":{"start":{"line":83,"column":3,"offset":2924},"end":{"line":83,"column":155,"offset":3076},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":2924},"end":{"line":83,"column":155,"offset":3076},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2922},"end":{"line":83,"column":155,"offset":3076},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These functions would be useful when we deal with only integer data. The general form of getw() and putw() are","position":{"start":{"line":84,"column":3,"offset":3079},"end":{"line":84,"column":113,"offset":3189},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":3079},"end":{"line":84,"column":113,"offset":3189},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3077},"end":{"line":84,"column":113,"offset":3189},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2922},"end":{"line":84,"column":113,"offset":3189},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"Syntax: putw(integer,fp);\nSyntax: getw(fp);","position":{"start":{"line":85,"column":1,"offset":3190},"end":{"line":88,"column":4,"offset":3243},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C program to implement getw() and putw() function in file.","position":{"start":{"line":89,"column":5,"offset":3248},"end":{"line":89,"column":82,"offset":3325},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3244},"end":{"line":89,"column":82,"offset":3325},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to implement getw() and putw() function in file.\n/*Printing odd numbers in odd file and even numbers in even file*/\n#include<stdio.h>\nvoid main()\n    {\n    int x,i;\n    FILE *f1,*fo,*fe;//creating a file pointer\n    f1=fopen(\"anil.txt\",\"w\"); //opening a file\n    printf(\"\\n enter some numbers into file or -1 to stop \\n\");\n    for(i=0;i<20;i++)\n        {\n        scanf(\"%d\",&x);\n        if(x== -1)break;\n        putw(x,f1); //writing read number into anil.txt file one at a time\n        }\n    fclose(f1); //closing a file opened for writing input\n    printf(\"\\n OUTPUT DATA\\n\");\n    f1=fopen(\"anil.txt\",\"r\");//open anil in read mode to read data\n    fo=fopen(\"odd3f\",\"w\");\n    fe=fopen(\"even3f\",\"w\");\n    while((x=getw(f1))!=EOF)\n        {\n        printf(\"%d\\t\",x);\n        if(x%2==0)\n            putw(x,fe);\n        else\n            putw(x,fo);\n        }\n    fcloseall();\n    fo=fopen(\"odd3f\",\"r\");\n    printf(\"\\n contents of odd file are :\\n\");\n    while((x=getw(fo) )!= EOF)\n        printf(\" %d\\t\",x);\n    fe=fopen(\"even3f\",\"r\");\n    printf(\"\\n contents of even file are :\\n\");\n    while((x=getw(fe)) != EOF)\n        printf(\" %d\\t\",x);\n    fcloseall();\n    }","position":{"start":{"line":90,"column":1,"offset":3326},"end":{"line":130,"column":4,"offset":4517},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"fputs() and fgets()","position":{"start":{"line":132,"column":4,"offset":4522},"end":{"line":132,"column":23,"offset":4541},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":4519},"end":{"line":132,"column":23,"offset":4541},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fgets(): It is used to read a string from a file pointed by file pointer.","position":{"start":{"line":134,"column":3,"offset":4545},"end":{"line":134,"column":76,"offset":4618},"indent":[]}}],"position":{"start":{"line":134,"column":3,"offset":4545},"end":{"line":134,"column":76,"offset":4618},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":4543},"end":{"line":134,"column":76,"offset":4618},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It copies the string to a memory location referred by an array.","position":{"start":{"line":135,"column":3,"offset":4621},"end":{"line":135,"column":66,"offset":4684},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":4621},"end":{"line":135,"column":66,"offset":4684},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":4619},"end":{"line":135,"column":66,"offset":4684},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":4543},"end":{"line":135,"column":66,"offset":4684},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"Syntax: fgets(string,length,filepointer);\nExample: fgets(text,50,fp1);","position":{"start":{"line":136,"column":1,"offset":4685},"end":{"line":139,"column":4,"offset":4765},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fputs(): It is used to write a string to an opened file pointed by file pointer.","position":{"start":{"line":140,"column":3,"offset":4768},"end":{"line":140,"column":83,"offset":4848},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":4768},"end":{"line":140,"column":83,"offset":4848},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4766},"end":{"line":140,"column":83,"offset":4848},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4766},"end":{"line":140,"column":83,"offset":4848},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Syntax: fputs(string,filepointer);\nExample: fputs(text,fp);","position":{"start":{"line":141,"column":1,"offset":4849},"end":{"line":144,"column":4,"offset":4916},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exampe-4: Write a C program to implement fgets() and fputs() function in file.","position":{"start":{"line":145,"column":5,"offset":4921},"end":{"line":145,"column":83,"offset":4999},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4917},"end":{"line":145,"column":83,"offset":4999},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to implement fgets() and fputs() function in file.\n#include<stdio.h>\nvoid main()\n    {\n    FILE *fp;\n    char str[50];\n    fp=fopen(\"fputget.txt\",\"r\");\n    printf(\"\\n the read string is :\\n\");\n    fgets(str,50,fp);\n    puts(str);\n    fclose(fp);\n    fp=fopen(\"fputget.txt\",\"a+\");\n    printf(\"\\n Enter string : \\n\");\n    gets(str);\n    fputs(str,fp);\n    puts(str);\n    fclose(fp);\n    }","position":{"start":{"line":146,"column":1,"offset":5000},"end":{"line":165,"column":4,"offset":5416},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"fread() and fwrite()","position":{"start":{"line":166,"column":4,"offset":5420},"end":{"line":166,"column":24,"offset":5440},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5417},"end":{"line":166,"column":24,"offset":5440},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fwrite(): It is used for writing an entire structure block to a given file in binary mode.","position":{"start":{"line":168,"column":3,"offset":5444},"end":{"line":168,"column":93,"offset":5534},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":5444},"end":{"line":168,"column":93,"offset":5534},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":5442},"end":{"line":168,"column":93,"offset":5534},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":5442},"end":{"line":168,"column":93,"offset":5534},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Syntax: fwrite(&structure variable,sizeof(structure variable),1,filepointer);\nExample: fwrite(&stud,sizeof(stud),1,fp);","position":{"start":{"line":170,"column":1,"offset":5536},"end":{"line":173,"column":4,"offset":5663},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fread(): It is used for reading an entire structure block from a given file in binary mode.","position":{"start":{"line":174,"column":3,"offset":5666},"end":{"line":174,"column":94,"offset":5757},"indent":[]}}],"position":{"start":{"line":174,"column":3,"offset":5666},"end":{"line":174,"column":94,"offset":5757},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":5664},"end":{"line":174,"column":94,"offset":5757},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":5664},"end":{"line":174,"column":94,"offset":5757},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"Syntax: fread(&structure variable,sizeof(structure variable),1,filepointer);\nExample: fread(&emp,sizeof(emp),1,fp1);","position":{"start":{"line":175,"column":1,"offset":5758},"end":{"line":178,"column":4,"offset":5884},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C program to implement fread() and fwrite() function in file.","position":{"start":{"line":179,"column":5,"offset":5889},"end":{"line":179,"column":85,"offset":5969},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":5885},"end":{"line":179,"column":85,"offset":5969},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C program to implement fread() and fwrite() function in file.\n#include<stdio.h>\nstruct player\n    {\n    char pname[30];\n    int age;\n    int runs;\n    };\nvoid main()\n    {\n    struct player p1,p2;\n    FILE *f3;\n    f3=fopen(\"player.txt\",\"w\");\n    printf(\"\\n Enter details of player name ,age and runs scored :\\n \");\n    fflush(stdin);\n    scanf(\"%s %d %d\",p1.pname,&p1.age,&p1.runs);\n    fwrite(&p1,sizeof(p1),1,f3);\n    fclose(f3);\n    f3=fopen(\"player.txt\",\"r\");\n    fread(&p2,sizeof(p2),1,f3);\n    fflush(stdout);\n    printf(\"\\nPLAYERNAME:=%s\\tAGE:=%d\\tRUNS:=%d \",p2.pname,p2.age,p2.runs);\n    fclose(f3);\n    }","position":{"start":{"line":180,"column":1,"offset":5970},"end":{"line":205,"column":4,"offset":6604},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"File Handling in C\",\"category\":\"Basic C Tutorial\",\"author\":\"Anonymous\",\"tags\":[\"#c\",\"#tutorial\"],\"thumbnailText\":\"C Programming Tutorial-36\",\"date\":\"2021-02-24T00:00:00.000Z\"}","position":{"start":{"line":207,"column":1,"offset":6606},"end":{"line":207,"column":214,"offset":6819},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":207,"column":214,"offset":6819}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"File Handling in C\",\n  \"category\": \"Basic C Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-36\",\n  \"date\": \"2021-02-24T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"file-handling-in-c\"\n  }, \"File Handling in C\"), mdx(\"h3\", {\n    \"id\": \"built-in-function\"\n  }, \"Built in Function\"), mdx(\"p\", null, \"In order to perform the file operations in C we must use the high level I/O functions which are in C standard I/O library. They are\"), mdx(\"h2\", {\n    \"id\": \"getc-and-putc-functions\"\n  }, \"getc() and putc() functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"getc()/fgetc() : It is used to read a character from a file that has been opened in a read mode.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It reads a character from the file whose file pointer is fp. The file pointer moves by one character for every operation of getc(). The getc() will return an end-of \\u2013marker EOF, when an end of file has been reached.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Syntax: getc(fp);\\nEx: char ch;\\nch=getc(fp);\\nputc()/fputc()\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is used to write a character contained in the character variable to the file associated with the FILE pointer fp. fputc() also returns an end-of \\u2013marker EOF, when an end of file has been reached.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Syntax: putc(c,fp);\\nExample: char c;\\nputc(c,fp);\\n\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-implement-fgetc-and-fputc-function-in-file\"\n  }, \"Example-1: Write a C program to implement fgetc() and fputc() function in file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Write a C program to implement fgetc() and fputc() function in file.c() and fputc():\\n#include<stdio.h>\\nvoid main()\\n    {\\n    FILE *fp;\\n    char ch;\\n    fp=fopen(\\\"input1.txt\\\",\\\"w\\\");\\n    printf(\\\"\\\\n enter some text hereand press cntrl D or Z to stop :\\\\n\\\");\\n    while((ch=getchar())!=EOF)\\n        fputc(ch,fp);\\n    fclose(fp);\\n    fp=fopen(\\\"input1.txt\\\",\\\"r\\\");\\n    printf(\\\"\\\\n The entered text is : \\\\n\\\");\\n    while((ch=fgetc(fp))!=EOF)\\n        putchar(ch);\\n    fclose(fp);\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"fprintf-and-fscanf\"\n  }, \"fprintf() and fscanf()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In order to handle a group of mixed data simultaneously there are two functions that are fprintf() and fscanf().\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These two functions are identical to printf and scanf functions, except that they work on files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The first argument of these functions is a file pointer which specifies the file to be used.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"fprintf(): The general form of fprintf() is\\nSyntax: fprintf(fp,\\u201Dcontrol string\\u201D,list);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"where fp is a file pointer associated with a file that has been opened for writing .\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The control string contains output specifications for the items in the list. .\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Example: fprintf(fp,\\u201D%s%d\\u201D,name,age);\\nfscanf() : It is used to read a number of values from a file.\\nSyntax: fscanf(fp,\\u201Dcontrol string\\u201D,list);\\nExample: fscanf(fp2,\\u201D%s %d\\u201D,item,&quantity);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"like scanf , fscanf also returns the number of items that are successfully read. when the end of file is reached it returns the value EOF.\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-implement-fscanf-and-fprintf-function-in-file\"\n  }, \"Example-2: Write a C program to implement fscanf() and fprintf() function in file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to implement fscanf() and fprintf() function in file.\\n#include<stdio.h>\\nvoid main()\\n    {\\n    int a=22,b;\\n    char s1[20]=\\\"Welocme_to_c\\\",s2[20];\\n    float c=12.34,d;\\n    FILE *f3;\\n    f3=fopen(\\\"mynew3\\\",\\\"w\\\");\\n    fprintf(f3,\\\"%d %s %f\\\",a,s1,c);\\n    fclose(f3);\\n    f3=fopen(\\\"mynew3\\\",\\\"r\\\");\\n    fscanf(f3,\\\"%d %s %f\\\",&b,s2,&d);\\n    printf(\\\"\\\\n a=%d \\\\t s1=%s \\\\t c=%f \\\\n b=%d \\\\t s2=%s \\\\t d=%f\\\",a,s1,c,b,s2,d);\\n    fclose(f3);\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"getw-and-putw\"\n  }, \"getw() and putw()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The getw() and putw()are integer oriented functions .They are similar to the getc() and putc() functions and are used to read and write integer values .\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These functions would be useful when we deal with only integer data. The general form of getw() and putw() are\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Syntax: putw(integer,fp);\\nSyntax: getw(fp);\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-implement-getw-and-putw-function-in-file\"\n  }, \"Example-3: Write a C program to implement getw() and putw() function in file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to implement getw() and putw() function in file.\\n/*Printing odd numbers in odd file and even numbers in even file*/\\n#include<stdio.h>\\nvoid main()\\n    {\\n    int x,i;\\n    FILE *f1,*fo,*fe;//creating a file pointer\\n    f1=fopen(\\\"anil.txt\\\",\\\"w\\\"); //opening a file\\n    printf(\\\"\\\\n enter some numbers into file or -1 to stop \\\\n\\\");\\n    for(i=0;i<20;i++)\\n        {\\n        scanf(\\\"%d\\\",&x);\\n        if(x== -1)break;\\n        putw(x,f1); //writing read number into anil.txt file one at a time\\n        }\\n    fclose(f1); //closing a file opened for writing input\\n    printf(\\\"\\\\n OUTPUT DATA\\\\n\\\");\\n    f1=fopen(\\\"anil.txt\\\",\\\"r\\\");//open anil in read mode to read data\\n    fo=fopen(\\\"odd3f\\\",\\\"w\\\");\\n    fe=fopen(\\\"even3f\\\",\\\"w\\\");\\n    while((x=getw(f1))!=EOF)\\n        {\\n        printf(\\\"%d\\\\t\\\",x);\\n        if(x%2==0)\\n            putw(x,fe);\\n        else\\n            putw(x,fo);\\n        }\\n    fcloseall();\\n    fo=fopen(\\\"odd3f\\\",\\\"r\\\");\\n    printf(\\\"\\\\n contents of odd file are :\\\\n\\\");\\n    while((x=getw(fo) )!= EOF)\\n        printf(\\\" %d\\\\t\\\",x);\\n    fe=fopen(\\\"even3f\\\",\\\"r\\\");\\n    printf(\\\"\\\\n contents of even file are :\\\\n\\\");\\n    while((x=getw(fe)) != EOF)\\n        printf(\\\" %d\\\\t\\\",x);\\n    fcloseall();\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"fputs-and-fgets\"\n  }, \"fputs() and fgets()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fgets(): It is used to read a string from a file pointed by file pointer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It copies the string to a memory location referred by an array.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Syntax: fgets(string,length,filepointer);\\nExample: fgets(text,50,fp1);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fputs(): It is used to write a string to an opened file pointed by file pointer.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Syntax: fputs(string,filepointer);\\nExample: fputs(text,fp);\\n\")), mdx(\"h3\", {\n    \"id\": \"exampe-4-write-a-c-program-to-implement-fgets-and-fputs-function-in-file\"\n  }, \"Exampe-4: Write a C program to implement fgets() and fputs() function in file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to implement fgets() and fputs() function in file.\\n#include<stdio.h>\\nvoid main()\\n    {\\n    FILE *fp;\\n    char str[50];\\n    fp=fopen(\\\"fputget.txt\\\",\\\"r\\\");\\n    printf(\\\"\\\\n the read string is :\\\\n\\\");\\n    fgets(str,50,fp);\\n    puts(str);\\n    fclose(fp);\\n    fp=fopen(\\\"fputget.txt\\\",\\\"a+\\\");\\n    printf(\\\"\\\\n Enter string : \\\\n\\\");\\n    gets(str);\\n    fputs(str,fp);\\n    puts(str);\\n    fclose(fp);\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"fread-and-fwrite\"\n  }, \"fread() and fwrite()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fwrite(): It is used for writing an entire structure block to a given file in binary mode.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Syntax: fwrite(&structure variable,sizeof(structure variable),1,filepointer);\\nExample: fwrite(&stud,sizeof(stud),1,fp);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fread(): It is used for reading an entire structure block from a given file in binary mode.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Syntax: fread(&structure variable,sizeof(structure variable),1,filepointer);\\nExample: fread(&emp,sizeof(emp),1,fp1);\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-implement-fread-and-fwrite-function-in-file\"\n  }, \"Example-5: Write a C program to implement fread() and fwrite() function in file.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C program to implement fread() and fwrite() function in file.\\n#include<stdio.h>\\nstruct player\\n    {\\n    char pname[30];\\n    int age;\\n    int runs;\\n    };\\nvoid main()\\n    {\\n    struct player p1,p2;\\n    FILE *f3;\\n    f3=fopen(\\\"player.txt\\\",\\\"w\\\");\\n    printf(\\\"\\\\n Enter details of player name ,age and runs scored :\\\\n \\\");\\n    fflush(stdin);\\n    scanf(\\\"%s %d %d\\\",p1.pname,&p1.age,&p1.runs);\\n    fwrite(&p1,sizeof(p1),1,f3);\\n    fclose(f3);\\n    f3=fopen(\\\"player.txt\\\",\\\"r\\\");\\n    fread(&p2,sizeof(p2),1,f3);\\n    fflush(stdout);\\n    printf(\\\"\\\\nPLAYERNAME:=%s\\\\tAGE:=%d\\\\tRUNS:=%d \\\",p2.pname,p2.age,p2.runs);\\n    fclose(f3);\\n    }\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"File Handling in C\",\n  \"category\": \"Basic C Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#c\", \"#tutorial\"],\n  \"thumbnailText\": \"C Programming Tutorial-36\",\n  \"date\": \"2021-02-24T00:00:00.000Z\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"file-handling-in-c\"\n    }}>{`File Handling in C`}</h2>\n    <h3 {...{\n      \"id\": \"built-in-function\"\n    }}>{`Built in Function`}</h3>\n    <p>{`In order to perform the file operations in C we must use the high level I/O functions which are in C standard I/O library. They are`}</p>\n    <h2 {...{\n      \"id\": \"getc-and-putc-functions\"\n    }}>{`getc() and putc() functions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`getc()/fgetc() : It is used to read a character from a file that has been opened in a read mode.`}</li>\n      <li parentName=\"ul\">{`It reads a character from the file whose file pointer is fp. The file pointer moves by one character for every operation of getc(). The getc() will return an end-of –marker EOF, when an end of file has been reached.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`Syntax: getc(fp);\nEx: char ch;\nch=getc(fp);\nputc()/fputc()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`It is used to write a character contained in the character variable to the file associated with the FILE pointer fp. fputc() also returns an end-of –marker EOF, when an end of file has been reached.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Syntax: putc(c,fp);\nExample: char c;\nputc(c,fp);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-implement-fgetc-and-fputc-function-in-file\"\n    }}>{`Example-1: Write a C program to implement fgetc() and fputc() function in file.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Write a C program to implement fgetc() and fputc() function in file.c() and fputc():\n#include<stdio.h>\nvoid main()\n    {\n    FILE *fp;\n    char ch;\n    fp=fopen(\"input1.txt\",\"w\");\n    printf(\"\\\\n enter some text hereand press cntrl D or Z to stop :\\\\n\");\n    while((ch=getchar())!=EOF)\n        fputc(ch,fp);\n    fclose(fp);\n    fp=fopen(\"input1.txt\",\"r\");\n    printf(\"\\\\n The entered text is : \\\\n\");\n    while((ch=fgetc(fp))!=EOF)\n        putchar(ch);\n    fclose(fp);\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fprintf-and-fscanf\"\n    }}>{`fprintf() and fscanf()`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In order to handle a group of mixed data simultaneously there are two functions that are fprintf() and fscanf().`}</li>\n      <li parentName=\"ul\">{`These two functions are identical to printf and scanf functions, except that they work on files.`}</li>\n      <li parentName=\"ul\">{`The first argument of these functions is a file pointer which specifies the file to be used.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`fprintf(): The general form of fprintf() is\nSyntax: fprintf(fp,”control string”,list);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`where fp is a file pointer associated with a file that has been opened for writing .`}</li>\n      <li parentName=\"ul\">{`The control string contains output specifications for the items in the list. .`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`Example: fprintf(fp,”%s%d”,name,age);\nfscanf() : It is used to read a number of values from a file.\nSyntax: fscanf(fp,”control string”,list);\nExample: fscanf(fp2,”%s %d”,item,&quantity);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`like scanf , fscanf also returns the number of items that are successfully read. when the end of file is reached it returns the value EOF.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-implement-fscanf-and-fprintf-function-in-file\"\n    }}>{`Example-2: Write a C program to implement fscanf() and fprintf() function in file.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to implement fscanf() and fprintf() function in file.\n#include<stdio.h>\nvoid main()\n    {\n    int a=22,b;\n    char s1[20]=\"Welocme_to_c\",s2[20];\n    float c=12.34,d;\n    FILE *f3;\n    f3=fopen(\"mynew3\",\"w\");\n    fprintf(f3,\"%d %s %f\",a,s1,c);\n    fclose(f3);\n    f3=fopen(\"mynew3\",\"r\");\n    fscanf(f3,\"%d %s %f\",&b,s2,&d);\n    printf(\"\\\\n a=%d \\\\t s1=%s \\\\t c=%f \\\\n b=%d \\\\t s2=%s \\\\t d=%f\",a,s1,c,b,s2,d);\n    fclose(f3);\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getw-and-putw\"\n    }}>{`getw() and putw()`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The getw() and putw()are integer oriented functions .They are similar to the getc() and putc() functions and are used to read and write integer values .`}</li>\n      <li parentName=\"ul\">{`These functions would be useful when we deal with only integer data. The general form of getw() and putw() are`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Syntax: putw(integer,fp);\nSyntax: getw(fp);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-implement-getw-and-putw-function-in-file\"\n    }}>{`Example-3: Write a C program to implement getw() and putw() function in file.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to implement getw() and putw() function in file.\n/*Printing odd numbers in odd file and even numbers in even file*/\n#include<stdio.h>\nvoid main()\n    {\n    int x,i;\n    FILE *f1,*fo,*fe;//creating a file pointer\n    f1=fopen(\"anil.txt\",\"w\"); //opening a file\n    printf(\"\\\\n enter some numbers into file or -1 to stop \\\\n\");\n    for(i=0;i<20;i++)\n        {\n        scanf(\"%d\",&x);\n        if(x== -1)break;\n        putw(x,f1); //writing read number into anil.txt file one at a time\n        }\n    fclose(f1); //closing a file opened for writing input\n    printf(\"\\\\n OUTPUT DATA\\\\n\");\n    f1=fopen(\"anil.txt\",\"r\");//open anil in read mode to read data\n    fo=fopen(\"odd3f\",\"w\");\n    fe=fopen(\"even3f\",\"w\");\n    while((x=getw(f1))!=EOF)\n        {\n        printf(\"%d\\\\t\",x);\n        if(x%2==0)\n            putw(x,fe);\n        else\n            putw(x,fo);\n        }\n    fcloseall();\n    fo=fopen(\"odd3f\",\"r\");\n    printf(\"\\\\n contents of odd file are :\\\\n\");\n    while((x=getw(fo) )!= EOF)\n        printf(\" %d\\\\t\",x);\n    fe=fopen(\"even3f\",\"r\");\n    printf(\"\\\\n contents of even file are :\\\\n\");\n    while((x=getw(fe)) != EOF)\n        printf(\" %d\\\\t\",x);\n    fcloseall();\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fputs-and-fgets\"\n    }}>{`fputs() and fgets()`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`fgets(): It is used to read a string from a file pointed by file pointer.`}</li>\n      <li parentName=\"ul\">{`It copies the string to a memory location referred by an array.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Syntax: fgets(string,length,filepointer);\nExample: fgets(text,50,fp1);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`fputs(): It is used to write a string to an opened file pointed by file pointer.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`Syntax: fputs(string,filepointer);\nExample: fputs(text,fp);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exampe-4-write-a-c-program-to-implement-fgets-and-fputs-function-in-file\"\n    }}>{`Exampe-4: Write a C program to implement fgets() and fputs() function in file.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to implement fgets() and fputs() function in file.\n#include<stdio.h>\nvoid main()\n    {\n    FILE *fp;\n    char str[50];\n    fp=fopen(\"fputget.txt\",\"r\");\n    printf(\"\\\\n the read string is :\\\\n\");\n    fgets(str,50,fp);\n    puts(str);\n    fclose(fp);\n    fp=fopen(\"fputget.txt\",\"a+\");\n    printf(\"\\\\n Enter string : \\\\n\");\n    gets(str);\n    fputs(str,fp);\n    puts(str);\n    fclose(fp);\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fread-and-fwrite\"\n    }}>{`fread() and fwrite()`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`fwrite(): It is used for writing an entire structure block to a given file in binary mode.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`Syntax: fwrite(&structure variable,sizeof(structure variable),1,filepointer);\nExample: fwrite(&stud,sizeof(stud),1,fp);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`fread(): It is used for reading an entire structure block from a given file in binary mode.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`Syntax: fread(&structure variable,sizeof(structure variable),1,filepointer);\nExample: fread(&emp,sizeof(emp),1,fp1);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-implement-fread-and-fwrite-function-in-file\"\n    }}>{`Example-5: Write a C program to implement fread() and fwrite() function in file.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C program to implement fread() and fwrite() function in file.\n#include<stdio.h>\nstruct player\n    {\n    char pname[30];\n    int age;\n    int runs;\n    };\nvoid main()\n    {\n    struct player p1,p2;\n    FILE *f3;\n    f3=fopen(\"player.txt\",\"w\");\n    printf(\"\\\\n Enter details of player name ,age and runs scored :\\\\n \");\n    fflush(stdin);\n    scanf(\"%s %d %d\",p1.pname,&p1.age,&p1.runs);\n    fwrite(&p1,sizeof(p1),1,f3);\n    fclose(f3);\n    f3=fopen(\"player.txt\",\"r\");\n    fread(&p2,sizeof(p2),1,f3);\n    fflush(stdout);\n    printf(\"\\\\nPLAYERNAME:=%s\\\\tAGE:=%d\\\\tRUNS:=%d \",p2.pname,p2.age,p2.runs);\n    fclose(f3);\n    }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}