{"expireTime":9007200883071734000,"key":"gatsby-plugin-mdx-entire-payload-64a492748214ede96827b67065a66cc9--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Destructor in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":21,"offset":20},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":21,"offset":20},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A destructor is a member function of the class whose name is same as the name of the class but the preceded with tilde sign (~). The purpose of destructor is to destroy the object when it is no longer needed or goes out of scope. The syntax of destructor is given below-","position":{"start":{"line":2,"column":1,"offset":22},"end":{"line":2,"column":271,"offset":292},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":22},"end":{"line":2,"column":271,"offset":292},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"~className( )\n{\ncout<<”Destructor called “<<endl;\n}","position":{"start":{"line":3,"column":1,"offset":294},"end":{"line":8,"column":4,"offset":360},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Features of Destructor","position":{"start":{"line":9,"column":4,"offset":365},"end":{"line":9,"column":26,"offset":387},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":362},"end":{"line":9,"column":26,"offset":387},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The name is same as of class but proceeded with a ~ sign.","position":{"start":{"line":11,"column":3,"offset":393},"end":{"line":11,"column":60,"offset":450},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":393},"end":{"line":11,"column":60,"offset":450},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":391},"end":{"line":11,"column":60,"offset":450},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Destructor is automatically called as soon as an object goes out of scope.","position":{"start":{"line":12,"column":3,"offset":454},"end":{"line":12,"column":77,"offset":528},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":454},"end":{"line":12,"column":77,"offset":528},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":452},"end":{"line":12,"column":77,"offset":528},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Destructor is used to destroy the objects.","position":{"start":{"line":13,"column":3,"offset":532},"end":{"line":13,"column":45,"offset":574},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":532},"end":{"line":13,"column":45,"offset":574},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":530},"end":{"line":13,"column":45,"offset":574},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Once a destructor is called for a object, the object will no longer be available for the future reference.","position":{"start":{"line":14,"column":3,"offset":578},"end":{"line":14,"column":109,"offset":684},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":578},"end":{"line":14,"column":109,"offset":684},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":576},"end":{"line":14,"column":109,"offset":684},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Destructor can be used for housekeeping work such as closing the file, de-allocating the dynamically allocated memory etc.","position":{"start":{"line":15,"column":3,"offset":688},"end":{"line":15,"column":125,"offset":810},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":688},"end":{"line":15,"column":125,"offset":810},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":686},"end":{"line":15,"column":125,"offset":810},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Closing a file in destructor is a good idea as user might forget to close the file associated with object.","position":{"start":{"line":16,"column":3,"offset":814},"end":{"line":16,"column":109,"offset":920},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":814},"end":{"line":16,"column":109,"offset":920},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":812},"end":{"line":16,"column":109,"offset":920},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"But as the object goes out of scope destructor will be called and all code written in destructor executes which will always result in closing the file and no data loss may be there.","position":{"start":{"line":17,"column":3,"offset":924},"end":{"line":17,"column":184,"offset":1105},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":924},"end":{"line":17,"column":184,"offset":1105},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":922},"end":{"line":17,"column":184,"offset":1105},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When new is used for allocation of memory in the constructor we must always use delete in the destructor to be allocate the memory.","position":{"start":{"line":18,"column":3,"offset":1109},"end":{"line":18,"column":134,"offset":1240},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1109},"end":{"line":18,"column":134,"offset":1240},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1107},"end":{"line":18,"column":134,"offset":1240},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Similar to constructor there is no return type for destructor and that’s why they cannot return any value.","position":{"start":{"line":19,"column":3,"offset":1244},"end":{"line":19,"column":109,"offset":1350},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1244},"end":{"line":19,"column":109,"offset":1350},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1242},"end":{"line":19,"column":109,"offset":1350},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is no explicit or implicit category for a destructor.","position":{"start":{"line":20,"column":3,"offset":1354},"end":{"line":20,"column":62,"offset":1413},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1354},"end":{"line":20,"column":62,"offset":1413},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1352},"end":{"line":20,"column":62,"offset":1413},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"They are always called implicitly by the compiler.","position":{"start":{"line":21,"column":3,"offset":1417},"end":{"line":21,"column":53,"offset":1467},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1417},"end":{"line":21,"column":53,"offset":1467},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1415},"end":{"line":21,"column":53,"offset":1467},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Destructor can never take any arguments.","position":{"start":{"line":22,"column":3,"offset":1471},"end":{"line":22,"column":43,"offset":1511},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1471},"end":{"line":22,"column":43,"offset":1511},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1469},"end":{"line":22,"column":43,"offset":1511},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Destructor can be virtual","position":{"start":{"line":23,"column":3,"offset":1515},"end":{"line":23,"column":28,"offset":1540},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1515},"end":{"line":23,"column":28,"offset":1540},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1513},"end":{"line":23,"column":28,"offset":1540},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":391},"end":{"line":23,"column":28,"offset":1540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrates the basic concept of constructor and destructor.","position":{"start":{"line":24,"column":4,"offset":1545},"end":{"line":24,"column":98,"offset":1639},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1542},"end":{"line":24,"column":98,"offset":1639},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrates the basic concept of constructor and destructor.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    demo( )\n    {\n        cout<<\"Constructor called\\n\";\n    }\n    ~demo( )\n    {\n        cout<<\"Destructor called\"<<endl;\n    }\n    };\nint main( )\n    {\n    demo d;\n    }","position":{"start":{"line":25,"column":1,"offset":1641},"end":{"line":45,"column":4,"offset":1997},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nConstructor called\nDestructor called","position":{"start":{"line":46,"column":1,"offset":1999},"end":{"line":50,"column":4,"offset":2055},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Explanation","position":{"start":{"line":51,"column":5,"offset":2061},"end":{"line":51,"column":16,"offset":2072},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2057},"end":{"line":51,"column":16,"offset":2072},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When demo d; executes it calls the default constructor of the class and results in printing Constructor called.","position":{"start":{"line":52,"column":3,"offset":2076},"end":{"line":52,"column":114,"offset":2187},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":2076},"end":{"line":52,"column":114,"offset":2187},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2074},"end":{"line":52,"column":114,"offset":2187},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The scope of object d is the area/place where it is available and in the above program the scope is the whole main function.","position":{"start":{"line":53,"column":3,"offset":2191},"end":{"line":53,"column":127,"offset":2315},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":2191},"end":{"line":53,"column":127,"offset":2315},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2189},"end":{"line":53,"column":127,"offset":2315},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Being the only statement demo d; in the function main, as soon as compiler finds ending brace of main i.e.,} it calls destructor of the class to destroy the object d and prints Destructor called.","position":{"start":{"line":54,"column":3,"offset":2319},"end":{"line":54,"column":198,"offset":2514},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2319},"end":{"line":54,"column":198,"offset":2514},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2317},"end":{"line":54,"column":198,"offset":2514},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2074},"end":{"line":54,"column":198,"offset":2514},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example-2: Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.","position":{"start":{"line":55,"column":4,"offset":2519},"end":{"line":55,"column":114,"offset":2629},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2516},"end":{"line":55,"column":114,"offset":2629},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.\n#include<iostream>\nusing namespace std;\nint count=0;\nclass test\n    {\n    public:\n    test()\n    {\n    count++;\n        cout<<\"\\n\\nConstructor Msg: Object number \"<<count<< \"created..\";\n    }\n    ~test()\n    {\n        cout<<\"\\n\\nDestructor Msg: Object number \"<<count<<\"destroyed..\";\n        count--;\n    }\n    };\nint main()\n    {\n    cout<<\"Inside the main block..\";\n    cout<<\"\\n\\nCreating first object T1..\";\n    test T1;\n        {\n        //Block 1\n        cout<<\"\\n\\nInside Block 1..\";\n        cout<<\"\\n\\nCreating two more objects T2 and T3..\";\n        test T2,T3;\n        cout<<\"\\n\\nLeaving Block 1..\";\n        }\n    cout<<\"\\n\\nBack inside the main block..\";\n    return 0;\n    }","position":{"start":{"line":56,"column":1,"offset":2631},"end":{"line":90,"column":4,"offset":3461},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nInside the main block..\nCreating first object T1..\nConstructor Msg: Object number 1created..\nInside Block 1..\nCreating two more objects T2 and T3..\nConstructor Msg: Object number 2created..\nConstructor Msg: Object number 3created..\nLeaving Block 1..\nDestructor Msg: Object number 3destroyed..\nDestructor Msg: Object number 2destroyed..\nBack inside the main block..","position":{"start":{"line":91,"column":1,"offset":3463},"end":{"line":104,"column":4,"offset":3856},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to illustrates an example of destructor which makes use of block as scope.","position":{"start":{"line":105,"column":5,"offset":3862},"end":{"line":105,"column":110,"offset":3967},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3858},"end":{"line":105,"column":110,"offset":3967},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrates an example of destructor which makes use of block as scope.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    static int count;\n    public :\n    demo( )\n        {\n        cout<<\"Object created \"<<++count<<endl;\n        }\n    ~demo( )\n        {\n        cout<<\"Object Destroyed\"<<count--<<endl;\n        }\n    };\nint demo :: count;\nint main( )\n    {\n    cout<<\"I am in main \\n\";\n    demo d1;\n        {\n        cout<<\"In block 1\\n\";\n        demo d2;\n            {\n            cout<<\"In block 2 inside block 1\\n\";\n            demo d3;\n            }\n        }\n    {\n    cout<<\"In block 3\\n\";\n    demo d4;\n    }\n    cout<<\"Exiting main\\n\";\n    }","position":{"start":{"line":106,"column":1,"offset":3969},"end":{"line":142,"column":4,"offset":4701},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nI am in main\nObject created 1\nIn block 1\nObject created 2\nIn block 2 inside block 1\nObject created 3\nObject Destroyed3\nObject Destroyed2\nIn block 3\nObject created 2\nObject Destroyed2\nExiting main\nObject Destroyed1","position":{"start":{"line":143,"column":1,"offset":4703},"end":{"line":158,"column":4,"offset":4947},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.","position":{"start":{"line":160,"column":5,"offset":4955},"end":{"line":160,"column":113,"offset":5063},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4951},"end":{"line":160,"column":113,"offset":5063},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.\n#include<iostream>\nusing namespace std;\nclass test\n    {\n    int *a;\n    public:\n    test(int sizee)\n        {\n        a = new int[sizee];\n        cout<<\"\\n\\nConstructor Msg: Integer array of size \"<<sizee<<\" created..\";\n        }\n    ~test()\n        {\n        delete a;\n        cout<<\"\\n\\nDestructor Msg: Freed up the memory allocated for integer array\";\n        }\n    };\nint main()\n    {\n    int s;\n    cout<<\"Enter the size of the array..\";\n    cin>>s;\n    cout<<\"\\n\\nCreating an object of test class..\";\n    test T(s);\n    cout<<\"\\n\\nPress any key to end the program..\";\n    return 0;\n    }","position":{"start":{"line":161,"column":1,"offset":5065},"end":{"line":190,"column":4,"offset":5798},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nEnter the size of the array..5\nCreating an object of test class..\nConstructor Msg: Integer array of size 5 created..\nPress any key to end the program..\nDestructor Msg: Freed up the memory allocated for integer array","position":{"start":{"line":191,"column":1,"offset":5800},"end":{"line":198,"column":4,"offset":6038},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Destructor In Cplusplus\",\"category\":\"Cplusplus Tutorial\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-11T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-21\"}","position":{"start":{"line":201,"column":1,"offset":6042},"end":{"line":201,"column":213,"offset":6254},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":201,"column":213,"offset":6254}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Destructor In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-11T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-21\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"destructor-in-c\"\n  }, \"Destructor in C++\"), mdx(\"p\", null, \"A destructor is a member function of the class whose name is same as the name of the class but the preceded with tilde sign (~). The purpose of destructor is to destroy the object when it is no longer needed or goes out of scope. The syntax of destructor is given below-\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"~className( )\\n{\\ncout<<\\u201DDestructor called \\u201C<<endl;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"features-of-destructor\"\n  }, \"Features of Destructor\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The name is same as of class but proceeded with a ~ sign.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destructor is automatically called as soon as an object goes out of scope.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destructor is used to destroy the objects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once a destructor is called for a object, the object will no longer be available for the future reference.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destructor can be used for housekeeping work such as closing the file, de-allocating the dynamically allocated memory etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Closing a file in destructor is a good idea as user might forget to close the file associated with object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"But as the object goes out of scope destructor will be called and all code written in destructor executes which will always result in closing the file and no data loss may be there.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When new is used for allocation of memory in the constructor we must always use delete in the destructor to be allocate the memory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similar to constructor there is no return type for destructor and that\\u2019s why they cannot return any value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is no explicit or implicit category for a destructor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are always called implicitly by the compiler.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destructor can never take any arguments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Destructor can be virtual\")), mdx(\"h2\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrates-the-basic-concept-of-constructor-and-destructor\"\n  }, \"Example-1: Write a C++ program to illustrates the basic concept of constructor and destructor.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrates the basic concept of constructor and destructor.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    public :\\n    demo( )\\n    {\\n        cout<<\\\"Constructor called\\\\n\\\";\\n    }\\n    ~demo( )\\n    {\\n        cout<<\\\"Destructor called\\\"<<endl;\\n    }\\n    };\\nint main( )\\n    {\\n    demo d;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nConstructor called\\nDestructor called\\n\")), mdx(\"h3\", {\n    \"id\": \"explanation\"\n  }, \"Explanation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When demo d; executes it calls the default constructor of the class and results in printing Constructor called.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The scope of object d is the area/place where it is available and in the above program the scope is the whole main function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Being the only statement demo d; in the function main, as soon as compiler finds ending brace of main i.e.,} it calls destructor of the class to destroy the object d and prints Destructor called.\")), mdx(\"h2\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrates-that-the-destructor-has-been-invoked-implicitly-by-the-compiler\"\n  }, \"Example-2: Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.\\n#include<iostream>\\nusing namespace std;\\nint count=0;\\nclass test\\n    {\\n    public:\\n    test()\\n    {\\n    count++;\\n        cout<<\\\"\\\\n\\\\nConstructor Msg: Object number \\\"<<count<< \\\"created..\\\";\\n    }\\n    ~test()\\n    {\\n        cout<<\\\"\\\\n\\\\nDestructor Msg: Object number \\\"<<count<<\\\"destroyed..\\\";\\n        count--;\\n    }\\n    };\\nint main()\\n    {\\n    cout<<\\\"Inside the main block..\\\";\\n    cout<<\\\"\\\\n\\\\nCreating first object T1..\\\";\\n    test T1;\\n        {\\n        //Block 1\\n        cout<<\\\"\\\\n\\\\nInside Block 1..\\\";\\n        cout<<\\\"\\\\n\\\\nCreating two more objects T2 and T3..\\\";\\n        test T2,T3;\\n        cout<<\\\"\\\\n\\\\nLeaving Block 1..\\\";\\n        }\\n    cout<<\\\"\\\\n\\\\nBack inside the main block..\\\";\\n    return 0;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nInside the main block..\\nCreating first object T1..\\nConstructor Msg: Object number 1created..\\nInside Block 1..\\nCreating two more objects T2 and T3..\\nConstructor Msg: Object number 2created..\\nConstructor Msg: Object number 3created..\\nLeaving Block 1..\\nDestructor Msg: Object number 3destroyed..\\nDestructor Msg: Object number 2destroyed..\\nBack inside the main block..\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrates-an-example-of-destructor-which-makes-use-of-block-as-scope\"\n  }, \"Example-3: Write a C++ program to illustrates an example of destructor which makes use of block as scope.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrates an example of destructor which makes use of block as scope.\\n#include<iostream>\\nusing namespace std;\\nclass demo\\n    {\\n    static int count;\\n    public :\\n    demo( )\\n        {\\n        cout<<\\\"Object created \\\"<<++count<<endl;\\n        }\\n    ~demo( )\\n        {\\n        cout<<\\\"Object Destroyed\\\"<<count--<<endl;\\n        }\\n    };\\nint demo :: count;\\nint main( )\\n    {\\n    cout<<\\\"I am in main \\\\n\\\";\\n    demo d1;\\n        {\\n        cout<<\\\"In block 1\\\\n\\\";\\n        demo d2;\\n            {\\n            cout<<\\\"In block 2 inside block 1\\\\n\\\";\\n            demo d3;\\n            }\\n        }\\n    {\\n    cout<<\\\"In block 3\\\\n\\\";\\n    demo d4;\\n    }\\n    cout<<\\\"Exiting main\\\\n\\\";\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nI am in main\\nObject created 1\\nIn block 1\\nObject created 2\\nIn block 2 inside block 1\\nObject created 3\\nObject Destroyed3\\nObject Destroyed2\\nIn block 3\\nObject created 2\\nObject Destroyed2\\nExiting main\\nObject Destroyed1\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to--demonstrates-how-a-destructor-releases-the-memory-allocated-to-an-object\"\n  }, \"Example-4: Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.\\n#include<iostream>\\nusing namespace std;\\nclass test\\n    {\\n    int *a;\\n    public:\\n    test(int sizee)\\n        {\\n        a = new int[sizee];\\n        cout<<\\\"\\\\n\\\\nConstructor Msg: Integer array of size \\\"<<sizee<<\\\" created..\\\";\\n        }\\n    ~test()\\n        {\\n        delete a;\\n        cout<<\\\"\\\\n\\\\nDestructor Msg: Freed up the memory allocated for integer array\\\";\\n        }\\n    };\\nint main()\\n    {\\n    int s;\\n    cout<<\\\"Enter the size of the array..\\\";\\n    cin>>s;\\n    cout<<\\\"\\\\n\\\\nCreating an object of test class..\\\";\\n    test T(s);\\n    cout<<\\\"\\\\n\\\\nPress any key to end the program..\\\";\\n    return 0;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nEnter the size of the array..5\\nCreating an object of test class..\\nConstructor Msg: Integer array of size 5 created..\\nPress any key to end the program..\\nDestructor Msg: Freed up the memory allocated for integer array\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Destructor In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-11T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-21\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"destructor-in-c\"\n    }}>{`Destructor in C++`}</h2>\n    <p>{`A destructor is a member function of the class whose name is same as the name of the class but the preceded with tilde sign (~). The purpose of destructor is to destroy the object when it is no longer needed or goes out of scope. The syntax of destructor is given below-`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`~className( )\n{\ncout<<”Destructor called “<<endl;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"features-of-destructor\"\n    }}>{`Features of Destructor`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The name is same as of class but proceeded with a ~ sign.`}</li>\n      <li parentName=\"ul\">{`Destructor is automatically called as soon as an object goes out of scope.`}</li>\n      <li parentName=\"ul\">{`Destructor is used to destroy the objects.`}</li>\n      <li parentName=\"ul\">{`Once a destructor is called for a object, the object will no longer be available for the future reference.`}</li>\n      <li parentName=\"ul\">{`Destructor can be used for housekeeping work such as closing the file, de-allocating the dynamically allocated memory etc.`}</li>\n      <li parentName=\"ul\">{`Closing a file in destructor is a good idea as user might forget to close the file associated with object.`}</li>\n      <li parentName=\"ul\">{`But as the object goes out of scope destructor will be called and all code written in destructor executes which will always result in closing the file and no data loss may be there.`}</li>\n      <li parentName=\"ul\">{`When new is used for allocation of memory in the constructor we must always use delete in the destructor to be allocate the memory.`}</li>\n      <li parentName=\"ul\">{`Similar to constructor there is no return type for destructor and that’s why they cannot return any value.`}</li>\n      <li parentName=\"ul\">{`There is no explicit or implicit category for a destructor.`}</li>\n      <li parentName=\"ul\">{`They are always called implicitly by the compiler.`}</li>\n      <li parentName=\"ul\">{`Destructor can never take any arguments.`}</li>\n      <li parentName=\"ul\">{`Destructor can be virtual`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrates-the-basic-concept-of-constructor-and-destructor\"\n    }}>{`Example-1: Write a C++ program to illustrates the basic concept of constructor and destructor.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrates the basic concept of constructor and destructor.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    public :\n    demo( )\n    {\n        cout<<\"Constructor called\\\\n\";\n    }\n    ~demo( )\n    {\n        cout<<\"Destructor called\"<<endl;\n    }\n    };\nint main( )\n    {\n    demo d;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nConstructor called\nDestructor called\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`When demo d; executes it calls the default constructor of the class and results in printing Constructor called.`}</li>\n      <li parentName=\"ul\">{`The scope of object d is the area/place where it is available and in the above program the scope is the whole main function.`}</li>\n      <li parentName=\"ul\">{`Being the only statement demo d; in the function main, as soon as compiler finds ending brace of main i.e.,} it calls destructor of the class to destroy the object d and prints Destructor called.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrates-that-the-destructor-has-been-invoked-implicitly-by-the-compiler\"\n    }}>{`Example-2: Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrates that the destructor has been invoked implicitly by the compiler.\n#include<iostream>\nusing namespace std;\nint count=0;\nclass test\n    {\n    public:\n    test()\n    {\n    count++;\n        cout<<\"\\\\n\\\\nConstructor Msg: Object number \"<<count<< \"created..\";\n    }\n    ~test()\n    {\n        cout<<\"\\\\n\\\\nDestructor Msg: Object number \"<<count<<\"destroyed..\";\n        count--;\n    }\n    };\nint main()\n    {\n    cout<<\"Inside the main block..\";\n    cout<<\"\\\\n\\\\nCreating first object T1..\";\n    test T1;\n        {\n        //Block 1\n        cout<<\"\\\\n\\\\nInside Block 1..\";\n        cout<<\"\\\\n\\\\nCreating two more objects T2 and T3..\";\n        test T2,T3;\n        cout<<\"\\\\n\\\\nLeaving Block 1..\";\n        }\n    cout<<\"\\\\n\\\\nBack inside the main block..\";\n    return 0;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nInside the main block..\nCreating first object T1..\nConstructor Msg: Object number 1created..\nInside Block 1..\nCreating two more objects T2 and T3..\nConstructor Msg: Object number 2created..\nConstructor Msg: Object number 3created..\nLeaving Block 1..\nDestructor Msg: Object number 3destroyed..\nDestructor Msg: Object number 2destroyed..\nBack inside the main block..\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrates-an-example-of-destructor-which-makes-use-of-block-as-scope\"\n    }}>{`Example-3: Write a C++ program to illustrates an example of destructor which makes use of block as scope.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrates an example of destructor which makes use of block as scope.\n#include<iostream>\nusing namespace std;\nclass demo\n    {\n    static int count;\n    public :\n    demo( )\n        {\n        cout<<\"Object created \"<<++count<<endl;\n        }\n    ~demo( )\n        {\n        cout<<\"Object Destroyed\"<<count--<<endl;\n        }\n    };\nint demo :: count;\nint main( )\n    {\n    cout<<\"I am in main \\\\n\";\n    demo d1;\n        {\n        cout<<\"In block 1\\\\n\";\n        demo d2;\n            {\n            cout<<\"In block 2 inside block 1\\\\n\";\n            demo d3;\n            }\n        }\n    {\n    cout<<\"In block 3\\\\n\";\n    demo d4;\n    }\n    cout<<\"Exiting main\\\\n\";\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nI am in main\nObject created 1\nIn block 1\nObject created 2\nIn block 2 inside block 1\nObject created 3\nObject Destroyed3\nObject Destroyed2\nIn block 3\nObject created 2\nObject Destroyed2\nExiting main\nObject Destroyed1\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to--demonstrates-how-a-destructor-releases-the-memory-allocated-to-an-object\"\n    }}>{`Example-4: Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to  demonstrates how a destructor releases the memory allocated to an object.\n#include<iostream>\nusing namespace std;\nclass test\n    {\n    int *a;\n    public:\n    test(int sizee)\n        {\n        a = new int[sizee];\n        cout<<\"\\\\n\\\\nConstructor Msg: Integer array of size \"<<sizee<<\" created..\";\n        }\n    ~test()\n        {\n        delete a;\n        cout<<\"\\\\n\\\\nDestructor Msg: Freed up the memory allocated for integer array\";\n        }\n    };\nint main()\n    {\n    int s;\n    cout<<\"Enter the size of the array..\";\n    cin>>s;\n    cout<<\"\\\\n\\\\nCreating an object of test class..\";\n    test T(s);\n    cout<<\"\\\\n\\\\nPress any key to end the program..\";\n    return 0;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nEnter the size of the array..5\nCreating an object of test class..\nConstructor Msg: Integer array of size 5 created..\nPress any key to end the program..\nDestructor Msg: Freed up the memory allocated for integer array\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}