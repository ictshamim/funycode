{"expireTime":9007200883071725000,"key":"gatsby-plugin-mdx-entire-payload-ffabc01c7113dcb0a2b2d7fa543d5081--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Inline Function in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":26,"offset":25},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":26,"offset":25},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Inline functions are functions which are expanded inline. To make a function inline we simple put keyword inline before the functions definitions.","position":{"start":{"line":2,"column":1,"offset":27},"end":{"line":2,"column":147,"offset":173},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":27},"end":{"line":2,"column":147,"offset":173},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"These functions are different from normal functions that in normal function call control is transferred to the place where the actual function definition is written.","position":{"start":{"line":4,"column":3,"offset":179},"end":{"line":4,"column":168,"offset":344},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":179},"end":{"line":4,"column":168,"offset":344},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":177},"end":{"line":4,"column":168,"offset":344},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For example, consider the following dummy code of the program:","position":{"start":{"line":5,"column":3,"offset":348},"end":{"line":5,"column":65,"offset":410},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":348},"end":{"line":5,"column":65,"offset":410},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":346},"end":{"line":5,"column":65,"offset":410},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":177},"end":{"line":5,"column":65,"offset":410},"indent":[1]}},{"type":"code","lang":"js","meta":null,"value":"void main( )\n    {\n    void show( );\n        statements;\n    show( ); //function called here\n        statements; // next statement where function returns\n    statements;\n    }\nvoid show( )\n    {\n    statements;\n    }","position":{"start":{"line":6,"column":1,"offset":412},"end":{"line":19,"column":4,"offset":651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"During the execution of the program when function call show is encountered, compiler saves the state of various registers, variables occurred in the program prior to function call show.","position":{"start":{"line":20,"column":3,"offset":655},"end":{"line":20,"column":188,"offset":840},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":655},"end":{"line":20,"column":188,"offset":840},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":653},"end":{"line":20,"column":188,"offset":840},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It also saves the address of the next instruction after the function call show as it has to return to this statement when function show returns.","position":{"start":{"line":21,"column":3,"offset":844},"end":{"line":21,"column":147,"offset":988},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":844},"end":{"line":21,"column":147,"offset":988},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":842},"end":{"line":21,"column":147,"offset":988},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All these are saved onto the stack as stack-frame or activation record.","position":{"start":{"line":22,"column":3,"offset":992},"end":{"line":22,"column":74,"offset":1063},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":992},"end":{"line":22,"column":74,"offset":1063},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":990},"end":{"line":22,"column":74,"offset":1063},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inline function is not work in the way as explained above manner. They are expanded where they are called.","position":{"start":{"line":23,"column":3,"offset":1067},"end":{"line":23,"column":109,"offset":1173},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1067},"end":{"line":23,"column":109,"offset":1173},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1065},"end":{"line":23,"column":109,"offset":1173},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"That is the whole body of the inline function is put at the place where function was called.","position":{"start":{"line":24,"column":3,"offset":1177},"end":{"line":24,"column":95,"offset":1269},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1177},"end":{"line":24,"column":95,"offset":1269},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1175},"end":{"line":24,"column":95,"offset":1269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This saves time as there is no control transfer, no saving and popping back from stack-frame.","position":{"start":{"line":25,"column":3,"offset":1273},"end":{"line":25,"column":96,"offset":1366},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1273},"end":{"line":25,"column":96,"offset":1366},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1271},"end":{"line":25,"column":96,"offset":1366},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"So inline function executes faster than normal function. But at the place of inline function call, the code is expanded.","position":{"start":{"line":26,"column":3,"offset":1370},"end":{"line":26,"column":123,"offset":1490},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1370},"end":{"line":26,"column":123,"offset":1490},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1368},"end":{"line":26,"column":123,"offset":1490},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you have called inline function from 100 places in your program, the code will be expanded 100 places in your program thus increasing program size.","position":{"start":{"line":27,"column":3,"offset":1494},"end":{"line":27,"column":153,"offset":1644},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1494},"end":{"line":27,"column":153,"offset":1644},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1492},"end":{"line":27,"column":153,"offset":1644},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"So a trade-off between program size and execution efficiency is there. The general syntax of defining the inline functions as:","position":{"start":{"line":28,"column":3,"offset":1648},"end":{"line":28,"column":129,"offset":1774},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1648},"end":{"line":28,"column":129,"offset":1774},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1646},"end":{"line":28,"column":129,"offset":1774},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":653},"end":{"line":28,"column":129,"offset":1774},"indent":[1,1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"inline return type function_name (parameters)\n    {\n    function definition;\n    }","position":{"start":{"line":29,"column":1,"offset":1776},"end":{"line":34,"column":4,"offset":1873},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Some Important Points About Inline Function","position":{"start":{"line":35,"column":4,"offset":1878},"end":{"line":35,"column":47,"offset":1921},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1875},"end":{"line":35,"column":47,"offset":1921},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inline function is a request to the compiler thus inline function may not work as inline some times.","position":{"start":{"line":36,"column":3,"offset":1925},"end":{"line":36,"column":103,"offset":2025},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1925},"end":{"line":36,"column":103,"offset":2025},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1923},"end":{"line":36,"column":103,"offset":2025},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In this regard they differ from macro, which work as macro always.","position":{"start":{"line":37,"column":3,"offset":2029},"end":{"line":37,"column":69,"offset":2095},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2029},"end":{"line":37,"column":69,"offset":2095},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2027},"end":{"line":37,"column":69,"offset":2095},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inline function executes faster than normal function.","position":{"start":{"line":38,"column":3,"offset":2099},"end":{"line":38,"column":56,"offset":2152},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":2099},"end":{"line":38,"column":56,"offset":2152},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2097},"end":{"line":38,"column":56,"offset":2152},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Strict type checking is performed for variables that are passed as arguments, which is not done in case of macro.","position":{"start":{"line":39,"column":3,"offset":2156},"end":{"line":39,"column":116,"offset":2269},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":2156},"end":{"line":39,"column":116,"offset":2269},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2154},"end":{"line":39,"column":116,"offset":2269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inline function does not produce side effects whereas macro does.","position":{"start":{"line":40,"column":3,"offset":2273},"end":{"line":40,"column":68,"offset":2338},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":2273},"end":{"line":40,"column":68,"offset":2338},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2271},"end":{"line":40,"column":68,"offset":2338},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All inline functions must be defined prior to their use.","position":{"start":{"line":41,"column":3,"offset":2342},"end":{"line":41,"column":59,"offset":2398},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2342},"end":{"line":41,"column":59,"offset":2398},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2340},"end":{"line":41,"column":59,"offset":2398},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inline function does not work as inline when code contains loops, recursions, goto, switch, static variable etc.","position":{"start":{"line":42,"column":3,"offset":2402},"end":{"line":42,"column":115,"offset":2514},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2402},"end":{"line":42,"column":115,"offset":2514},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2400},"end":{"line":42,"column":115,"offset":2514},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"They are used where function definition are small so calling cost and overhead for normal functions can be minimized.","position":{"start":{"line":43,"column":3,"offset":2518},"end":{"line":43,"column":120,"offset":2635},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2518},"end":{"line":43,"column":120,"offset":2635},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2516},"end":{"line":43,"column":120,"offset":2635},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1923},"end":{"line":43,"column":120,"offset":2635},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Critical situations for inline function","position":{"start":{"line":44,"column":4,"offset":2640},"end":{"line":44,"column":43,"offset":2679},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2637},"end":{"line":44,"column":43,"offset":2679},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a loop, a switch or a goto exists in function body.","position":{"start":{"line":45,"column":3,"offset":2683},"end":{"line":45,"column":57,"offset":2737},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":2683},"end":{"line":45,"column":57,"offset":2737},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2681},"end":{"line":45,"column":57,"offset":2737},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If function is not returning any value.","position":{"start":{"line":46,"column":3,"offset":2741},"end":{"line":46,"column":42,"offset":2780},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2741},"end":{"line":46,"column":42,"offset":2780},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2739},"end":{"line":46,"column":42,"offset":2780},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If function contains static variables.","position":{"start":{"line":47,"column":3,"offset":2784},"end":{"line":47,"column":41,"offset":2822},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2784},"end":{"line":47,"column":41,"offset":2822},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2782},"end":{"line":47,"column":41,"offset":2822},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If function is recursive.","position":{"start":{"line":48,"column":3,"offset":2826},"end":{"line":48,"column":28,"offset":2851},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2826},"end":{"line":48,"column":28,"offset":2851},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2824},"end":{"line":48,"column":28,"offset":2851},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2681},"end":{"line":48,"column":28,"offset":2851},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrate inline function.","position":{"start":{"line":50,"column":5,"offset":2859},"end":{"line":50,"column":66,"offset":2920},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2855},"end":{"line":50,"column":66,"offset":2920},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate inline function.\n#include<iostream>\nusing namespace std;\ninline void show( )\n    {\n    cout<<\"Hello from inline show\\n\";\n    }\nint main( )\n    {\n    show( );\n    }","position":{"start":{"line":51,"column":1,"offset":2922},"end":{"line":63,"column":4,"offset":3143},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from inline show","position":{"start":{"line":64,"column":1,"offset":3145},"end":{"line":67,"column":4,"offset":3186},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Explanation","position":{"start":{"line":68,"column":4,"offset":3191},"end":{"line":68,"column":15,"offset":3202},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3188},"end":{"line":68,"column":15,"offset":3202},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The function show is inline so when it is called in the main it is simply expanded in the main.","position":{"start":{"line":69,"column":3,"offset":3206},"end":{"line":69,"column":98,"offset":3301},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":3206},"end":{"line":69,"column":98,"offset":3301},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3204},"end":{"line":69,"column":98,"offset":3301},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"That is, all the statements written in the function show appear at the place of function call.","position":{"start":{"line":70,"column":3,"offset":3305},"end":{"line":70,"column":97,"offset":3399},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":3305},"end":{"line":70,"column":97,"offset":3399},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3303},"end":{"line":70,"column":97,"offset":3399},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Here we are having just one cout statement so it appear through we have written cout statement within main itself similar to macro.","position":{"start":{"line":71,"column":3,"offset":3403},"end":{"line":71,"column":134,"offset":3534},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":3403},"end":{"line":71,"column":134,"offset":3534},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3401},"end":{"line":71,"column":134,"offset":3534},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3204},"end":{"line":71,"column":134,"offset":3534},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to find the square of a number using inline function.","position":{"start":{"line":72,"column":5,"offset":3540},"end":{"line":72,"column":89,"offset":3624},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3536},"end":{"line":72,"column":89,"offset":3624},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to find the square of a number using inline function.\n#include<iostream>\nusing namespace std;\ninline int square(int x)\n    {\n    return x*x;\n    }\nint main( )\n    {\n    int num,snum;\n    cout<<\"Enter a number \\n\";\n    cin>>num;\n    cout<<\"Square of \"<<num<<\"is \"<<square(num)<<endl;\n    }","position":{"start":{"line":73,"column":1,"offset":3626},"end":{"line":88,"column":4,"offset":3961},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nEnter a number\n20\nSquare of 20is 400","position":{"start":{"line":89,"column":1,"offset":3963},"end":{"line":94,"column":4,"offset":4020},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to find the cube of a number using inline function.","position":{"start":{"line":96,"column":5,"offset":4028},"end":{"line":96,"column":87,"offset":4110},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4024},"end":{"line":96,"column":87,"offset":4110},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to find the cube of a number using inline function.\n#include<iostream>\nusing namespace std;\ninline int cube(int x)\n    {\n    return x*x*x;\n    }\nint main( )\n    {\n    int num;\n    cout<<\"Enter a number \\n\";\n    cin>>num;\n    cout<<\"Cube of \"<<num<<\"is \"<\n    }","position":{"start":{"line":97,"column":1,"offset":4112},"end":{"line":112,"column":4,"offset":4419},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nEnter a number\n5\nCube of 5 is 125","position":{"start":{"line":113,"column":1,"offset":4421},"end":{"line":118,"column":4,"offset":4475},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to enter two number and find the maximum number using inline function.","position":{"start":{"line":119,"column":5,"offset":4481},"end":{"line":119,"column":106,"offset":4582},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":4477},"end":{"line":119,"column":106,"offset":4582},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to enter two number and find the maximum number using inline function.\n#include<iostream>\nusing namespace std;\ninline int max(int x,int y)\n    {\n    return x>y ? x :y;\n    }\nint main( )\n    {\n    int n1,n2;\n    cout<<\"Enter two numbers \\n\";\n    cin>>n1>>n2;\n    int m=max(n1,n2);\n    cout<<\"Max=\"<<m<<endl;\n    }","position":{"start":{"line":120,"column":1,"offset":4584},"end":{"line":136,"column":4,"offset":4944},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nEnter two numbers\n12\n45\nMax=45","position":{"start":{"line":137,"column":1,"offset":4946},"end":{"line":143,"column":4,"offset":4998},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Inline Function In Cplusplus\",\"category\":\"Cplusplus Tutorial\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-15T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-17\"}","position":{"start":{"line":146,"column":1,"offset":5002},"end":{"line":146,"column":218,"offset":5219},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":146,"column":218,"offset":5219}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Inline Function In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-15T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-17\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"inline-function-in-c\"\n  }, \"Inline Function in C++\"), mdx(\"p\", null, \"Inline functions are functions which are expanded inline. To make a function inline we simple put keyword inline before the functions definitions.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"These functions are different from normal functions that in normal function call control is transferred to the place where the actual function definition is written.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, consider the following dummy code of the program:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"void main( )\\n    {\\n    void show( );\\n        statements;\\n    show( ); //function called here\\n        statements; // next statement where function returns\\n    statements;\\n    }\\nvoid show( )\\n    {\\n    statements;\\n    }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"During the execution of the program when function call show is encountered, compiler saves the state of various registers, variables occurred in the program prior to function call show.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It also saves the address of the next instruction after the function call show as it has to return to this statement when function show returns.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All these are saved onto the stack as stack-frame or activation record.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline function is not work in the way as explained above manner. They are expanded where they are called.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"That is the whole body of the inline function is put at the place where function was called.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This saves time as there is no control transfer, no saving and popping back from stack-frame.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"So inline function executes faster than normal function. But at the place of inline function call, the code is expanded.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you have called inline function from 100 places in your program, the code will be expanded 100 places in your program thus increasing program size.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"So a trade-off between program size and execution efficiency is there. The general syntax of defining the inline functions as:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"inline return type function_name (parameters)\\n    {\\n    function definition;\\n    }\\n\")), mdx(\"h2\", {\n    \"id\": \"some-important-points-about-inline-function\"\n  }, \"Some Important Points About Inline Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline function is a request to the compiler thus inline function may not work as inline some times.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In this regard they differ from macro, which work as macro always.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline function executes faster than normal function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strict type checking is performed for variables that are passed as arguments, which is not done in case of macro.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline function does not produce side effects whereas macro does.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All inline functions must be defined prior to their use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inline function does not work as inline when code contains loops, recursions, goto, switch, static variable etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are used where function definition are small so calling cost and overhead for normal functions can be minimized.\")), mdx(\"h2\", {\n    \"id\": \"critical-situations-for-inline-function\"\n  }, \"Critical situations for inline function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a loop, a switch or a goto exists in function body.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If function is not returning any value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If function contains static variables.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If function is recursive.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-inline-function\"\n  }, \"Example-1: Write a C++ program to illustrate inline function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate inline function.\\n#include<iostream>\\nusing namespace std;\\ninline void show( )\\n    {\\n    cout<<\\\"Hello from inline show\\\\n\\\";\\n    }\\nint main( )\\n    {\\n    show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from inline show\\n\")), mdx(\"h2\", {\n    \"id\": \"explanation\"\n  }, \"Explanation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The function show is inline so when it is called in the main it is simply expanded in the main.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"That is, all the statements written in the function show appear at the place of function call.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here we are having just one cout statement so it appear through we have written cout statement within main itself similar to macro.\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-find-the-square-of-a-number-using-inline-function\"\n  }, \"Example-2: Write a C++ program to find the square of a number using inline function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to find the square of a number using inline function.\\n#include<iostream>\\nusing namespace std;\\ninline int square(int x)\\n    {\\n    return x*x;\\n    }\\nint main( )\\n    {\\n    int num,snum;\\n    cout<<\\\"Enter a number \\\\n\\\";\\n    cin>>num;\\n    cout<<\\\"Square of \\\"<<num<<\\\"is \\\"<<square(num)<<endl;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nEnter a number\\n20\\nSquare of 20is 400\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-find-the-cube-of-a-number-using-inline-function\"\n  }, \"Example-3: Write a C++ program to find the cube of a number using inline function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to find the cube of a number using inline function.\\n#include<iostream>\\nusing namespace std;\\ninline int cube(int x)\\n    {\\n    return x*x*x;\\n    }\\nint main( )\\n    {\\n    int num;\\n    cout<<\\\"Enter a number \\\\n\\\";\\n    cin>>num;\\n    cout<<\\\"Cube of \\\"<<num<<\\\"is \\\"<\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nEnter a number\\n5\\nCube of 5 is 125\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to-enter-two-number-and-find-the-maximum-number-using-inline-function\"\n  }, \"Example-4: Write a C++ program to enter two number and find the maximum number using inline function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to enter two number and find the maximum number using inline function.\\n#include<iostream>\\nusing namespace std;\\ninline int max(int x,int y)\\n    {\\n    return x>y ? x :y;\\n    }\\nint main( )\\n    {\\n    int n1,n2;\\n    cout<<\\\"Enter two numbers \\\\n\\\";\\n    cin>>n1>>n2;\\n    int m=max(n1,n2);\\n    cout<<\\\"Max=\\\"<<m<<endl;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nEnter two numbers\\n12\\n45\\nMax=45\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Inline Function In Cplusplus\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-15T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-17\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"inline-function-in-c\"\n    }}>{`Inline Function in C++`}</h2>\n    <p>{`Inline functions are functions which are expanded inline. To make a function inline we simple put keyword inline before the functions definitions.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`These functions are different from normal functions that in normal function call control is transferred to the place where the actual function definition is written.`}</li>\n      <li parentName=\"ul\">{`For example, consider the following dummy code of the program:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`void main( )\n    {\n    void show( );\n        statements;\n    show( ); //function called here\n        statements; // next statement where function returns\n    statements;\n    }\nvoid show( )\n    {\n    statements;\n    }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`During the execution of the program when function call show is encountered, compiler saves the state of various registers, variables occurred in the program prior to function call show.`}</li>\n      <li parentName=\"ul\">{`It also saves the address of the next instruction after the function call show as it has to return to this statement when function show returns.`}</li>\n      <li parentName=\"ul\">{`All these are saved onto the stack as stack-frame or activation record.`}</li>\n      <li parentName=\"ul\">{`Inline function is not work in the way as explained above manner. They are expanded where they are called.`}</li>\n      <li parentName=\"ul\">{`That is the whole body of the inline function is put at the place where function was called.`}</li>\n      <li parentName=\"ul\">{`This saves time as there is no control transfer, no saving and popping back from stack-frame.`}</li>\n      <li parentName=\"ul\">{`So inline function executes faster than normal function. But at the place of inline function call, the code is expanded.`}</li>\n      <li parentName=\"ul\">{`If you have called inline function from 100 places in your program, the code will be expanded 100 places in your program thus increasing program size.`}</li>\n      <li parentName=\"ul\">{`So a trade-off between program size and execution efficiency is there. The general syntax of defining the inline functions as:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`inline return type function_name (parameters)\n    {\n    function definition;\n    }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"some-important-points-about-inline-function\"\n    }}>{`Some Important Points About Inline Function`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Inline function is a request to the compiler thus inline function may not work as inline some times.`}</li>\n      <li parentName=\"ul\">{`In this regard they differ from macro, which work as macro always.`}</li>\n      <li parentName=\"ul\">{`Inline function executes faster than normal function.`}</li>\n      <li parentName=\"ul\">{`Strict type checking is performed for variables that are passed as arguments, which is not done in case of macro.`}</li>\n      <li parentName=\"ul\">{`Inline function does not produce side effects whereas macro does.`}</li>\n      <li parentName=\"ul\">{`All inline functions must be defined prior to their use.`}</li>\n      <li parentName=\"ul\">{`Inline function does not work as inline when code contains loops, recursions, goto, switch, static variable etc.`}</li>\n      <li parentName=\"ul\">{`They are used where function definition are small so calling cost and overhead for normal functions can be minimized.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"critical-situations-for-inline-function\"\n    }}>{`Critical situations for inline function`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`If a loop, a switch or a goto exists in function body.`}</li>\n      <li parentName=\"ul\">{`If function is not returning any value.`}</li>\n      <li parentName=\"ul\">{`If function contains static variables.`}</li>\n      <li parentName=\"ul\">{`If function is recursive.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-inline-function\"\n    }}>{`Example-1: Write a C++ program to illustrate inline function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate inline function.\n#include<iostream>\nusing namespace std;\ninline void show( )\n    {\n    cout<<\"Hello from inline show\\\\n\";\n    }\nint main( )\n    {\n    show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from inline show\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The function show is inline so when it is called in the main it is simply expanded in the main.`}</li>\n      <li parentName=\"ul\">{`That is, all the statements written in the function show appear at the place of function call.`}</li>\n      <li parentName=\"ul\">{`Here we are having just one cout statement so it appear through we have written cout statement within main itself similar to macro.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-find-the-square-of-a-number-using-inline-function\"\n    }}>{`Example-2: Write a C++ program to find the square of a number using inline function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to find the square of a number using inline function.\n#include<iostream>\nusing namespace std;\ninline int square(int x)\n    {\n    return x*x;\n    }\nint main( )\n    {\n    int num,snum;\n    cout<<\"Enter a number \\\\n\";\n    cin>>num;\n    cout<<\"Square of \"<<num<<\"is \"<<square(num)<<endl;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nEnter a number\n20\nSquare of 20is 400\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-find-the-cube-of-a-number-using-inline-function\"\n    }}>{`Example-3: Write a C++ program to find the cube of a number using inline function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to find the cube of a number using inline function.\n#include<iostream>\nusing namespace std;\ninline int cube(int x)\n    {\n    return x*x*x;\n    }\nint main( )\n    {\n    int num;\n    cout<<\"Enter a number \\\\n\";\n    cin>>num;\n    cout<<\"Cube of \"<<num<<\"is \"<\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nEnter a number\n5\nCube of 5 is 125\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to-enter-two-number-and-find-the-maximum-number-using-inline-function\"\n    }}>{`Example-4: Write a C++ program to enter two number and find the maximum number using inline function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to enter two number and find the maximum number using inline function.\n#include<iostream>\nusing namespace std;\ninline int max(int x,int y)\n    {\n    return x>y ? x :y;\n    }\nint main( )\n    {\n    int n1,n2;\n    cout<<\"Enter two numbers \\\\n\";\n    cin>>n1>>n2;\n    int m=max(n1,n2);\n    cout<<\"Max=\"<<m<<endl;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nEnter two numbers\n12\n45\nMax=45\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}