{"expireTime":9007200882706245000,"key":"gatsby-plugin-mdx-entire-payload-a8070854ce5e967fae79b854827cce0d-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Thread Implementation in Java","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":33,"offset":32},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":33,"offset":32},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creating thread in java is simple. Thread can be implemented in the form of object that contain method called run(). Run() method makes up the body of the thread and is the only method in which thread’s behavior can be implemented. Syntax of run method is as","position":{"start":{"line":2,"column":1,"offset":34},"end":{"line":2,"column":259,"offset":292},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":34},"end":{"line":2,"column":259,"offset":292},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"public void run()\n{\n  ---------\n  ---------\nStatements implementing Thread\n---------\n  ---------\n}","position":{"start":{"line":3,"column":1,"offset":294},"end":{"line":12,"column":4,"offset":411},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The run method can be invoked by an object of the concerned thread.","position":{"start":{"line":13,"column":3,"offset":415},"end":{"line":13,"column":70,"offset":482},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":415},"end":{"line":13,"column":70,"offset":482},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":413},"end":{"line":13,"column":70,"offset":482},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This can be achieved by creating the thread and initiating it with the help of another thread method called as start().","position":{"start":{"line":14,"column":3,"offset":486},"end":{"line":14,"column":122,"offset":605},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":486},"end":{"line":14,"column":122,"offset":605},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":484},"end":{"line":14,"column":122,"offset":605},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can create a thread by instantiating an object of type Thread. Java defines two ways in which this can be accomplished:","position":{"start":{"line":15,"column":3,"offset":609},"end":{"line":15,"column":125,"offset":731},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":609},"end":{"line":15,"column":125,"offset":731},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":607},"end":{"line":15,"column":125,"offset":731},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":413},"end":{"line":15,"column":125,"offset":731},"indent":[1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"By Implementing Runnable interface. – Runnable interface has only method called as run().","position":{"start":{"line":16,"column":4,"offset":736},"end":{"line":16,"column":93,"offset":825},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":736},"end":{"line":16,"column":93,"offset":825},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":733},"end":{"line":16,"column":93,"offset":825},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"By extending Thread class. – Extend Thread class and override the run method.","position":{"start":{"line":17,"column":4,"offset":830},"end":{"line":17,"column":81,"offset":907},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":830},"end":{"line":17,"column":81,"offset":907},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":827},"end":{"line":17,"column":81,"offset":907},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":733},"end":{"line":17,"column":81,"offset":907},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Thread Creation by Extending Class","position":{"start":{"line":18,"column":4,"offset":912},"end":{"line":18,"column":38,"offset":946},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":909},"end":{"line":18,"column":38,"offset":946},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Thread class provide constructors and methods to create and perform operations on a thread. We can make our class runnable as a thread by extending the class java.lang.Thread. This gives us access to all the thread methods directly. It includes the following steps:","position":{"start":{"line":19,"column":3,"offset":950},"end":{"line":19,"column":268,"offset":1215},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":950},"end":{"line":19,"column":268,"offset":1215},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":948},"end":{"line":19,"column":268,"offset":1215},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declare the class as extending the Thread class.","position":{"start":{"line":20,"column":3,"offset":1219},"end":{"line":20,"column":51,"offset":1267},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1219},"end":{"line":20,"column":51,"offset":1267},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1217},"end":{"line":20,"column":51,"offset":1267},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Implement the run() method that is responsible for executing the sequence of code that the thread will execute.","position":{"start":{"line":21,"column":3,"offset":1271},"end":{"line":21,"column":114,"offset":1382},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1271},"end":{"line":21,"column":114,"offset":1382},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1269},"end":{"line":21,"column":114,"offset":1382},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The run() method has been inherited by the class extended .We have to override this method in order to implement the code to be executed by our thread.","position":{"start":{"line":22,"column":3,"offset":1386},"end":{"line":22,"column":154,"offset":1537},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1386},"end":{"line":22,"column":154,"offset":1537},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1384},"end":{"line":22,"column":154,"offset":1537},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a thread object and call the start() method to initiate the thread execution. When we start the new thread, Java calls the thread’s run () method, so it is the run() where all the action takes place.","position":{"start":{"line":23,"column":3,"offset":1541},"end":{"line":23,"column":209,"offset":1747},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1541},"end":{"line":23,"column":209,"offset":1747},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1539},"end":{"line":23,"column":209,"offset":1747},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":948},"end":{"line":23,"column":209,"offset":1747},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sleep method in java","position":{"start":{"line":24,"column":4,"offset":1752},"end":{"line":24,"column":24,"offset":1772},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1749},"end":{"line":24,"column":24,"offset":1772},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The sleep() method of Thread class is used to sleep a thread for the specified amount of time.","position":{"start":{"line":25,"column":3,"offset":1776},"end":{"line":25,"column":97,"offset":1870},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1776},"end":{"line":25,"column":97,"offset":1870},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1774},"end":{"line":25,"column":97,"offset":1870},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Thread class provides two methods for sleeping a thread:","position":{"start":{"line":26,"column":3,"offset":1874},"end":{"line":26,"column":63,"offset":1934},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1874},"end":{"line":26,"column":63,"offset":1934},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1872},"end":{"line":26,"column":63,"offset":1934},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"public static void sleep(long miliseconds)throws InterruptedException","position":{"start":{"line":27,"column":3,"offset":1938},"end":{"line":27,"column":72,"offset":2007},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1938},"end":{"line":27,"column":72,"offset":2007},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1936},"end":{"line":27,"column":72,"offset":2007},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"public static void sleep(long miliseconds, int nanos) throws InterruptedException","position":{"start":{"line":28,"column":3,"offset":2011},"end":{"line":28,"column":84,"offset":2092},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":2011},"end":{"line":28,"column":84,"offset":2092},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2009},"end":{"line":28,"column":84,"offset":2092},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1774},"end":{"line":28,"column":84,"offset":2092},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a java program to implement java thread by extending thread class.","position":{"start":{"line":29,"column":5,"offset":2098},"end":{"line":29,"column":88,"offset":2181},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2094},"end":{"line":29,"column":88,"offset":2181},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a java program to implement java thread by extending thread class.\n public class FunyThread extends Thread{\n  public void run() {\n    System.out.println(\"Thread running and I am from thread\");\n   }\n  public static void main(String[] args) {\n    FunyThread funyThread=new FunyThread();\n    funyThread.start();\n   }\n }","position":{"start":{"line":30,"column":1,"offset":2183},"end":{"line":41,"column":4,"offset":2528},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nThread running and I am from thread","position":{"start":{"line":42,"column":1,"offset":2530},"end":{"line":45,"column":4,"offset":2584},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a java program to implement thread by using thread class with sleep method.","position":{"start":{"line":47,"column":5,"offset":2592},"end":{"line":47,"column":97,"offset":2684},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2588},"end":{"line":47,"column":97,"offset":2684},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a java program to implement thread by using thread class with sleep method.\n  public class FunyThread extends Thread{\n    public void run() {\n        int i;\n        try {\n          for(i=1;i<=5;i++) {\n             Thread.sleep(500);\n             System.out.println(\"i=\"+i);\n           }\n         }\n       catch(Exception e) {\n       }\n     }\n  public static void main(String[] args) {\n        FunyThread funyThread1=new FunyThread();\n        FunyThread funyThread2=new FunyThread();\n        funyThread1.start();\n        funyThread2.start();\n       }\n     }","position":{"start":{"line":48,"column":1,"offset":2686},"end":{"line":69,"column":4,"offset":3281},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4\ni=5\ni=5","position":{"start":{"line":70,"column":1,"offset":3283},"end":{"line":82,"column":4,"offset":3350},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Runnable Interface","position":{"start":{"line":84,"column":4,"offset":3357},"end":{"line":84,"column":22,"offset":3375},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3354},"end":{"line":84,"column":22,"offset":3375},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The easiest way to create a thread is to create a class that implements the Runnable interface. Runnable abstracts a unit of exe code.","position":{"start":{"line":85,"column":3,"offset":3379},"end":{"line":85,"column":137,"offset":3513},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":3379},"end":{"line":85,"column":137,"offset":3513},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3377},"end":{"line":85,"column":137,"offset":3513},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.","position":{"start":{"line":86,"column":3,"offset":3517},"end":{"line":86,"column":117,"offset":3631},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":3517},"end":{"line":86,"column":117,"offset":3631},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3515},"end":{"line":86,"column":117,"offset":3631},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Runnable interface have only one method named run().","position":{"start":{"line":87,"column":3,"offset":3635},"end":{"line":87,"column":55,"offset":3687},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":3635},"end":{"line":87,"column":55,"offset":3687},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3633},"end":{"line":87,"column":55,"offset":3687},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"public void run(): is used to perform action for a thread.","position":{"start":{"line":88,"column":3,"offset":3691},"end":{"line":88,"column":61,"offset":3749},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":3691},"end":{"line":88,"column":61,"offset":3749},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3689},"end":{"line":88,"column":61,"offset":3749},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3377},"end":{"line":88,"column":61,"offset":3749},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a java program to implement java thread by using runnable interface.","position":{"start":{"line":89,"column":5,"offset":3755},"end":{"line":89,"column":90,"offset":3840},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3751},"end":{"line":89,"column":90,"offset":3840},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a java program to implement java thread by using runnable interface.\n  public class FunyThread extends Thread{\n  public void run() {\n    System.out.println(\"Thread Running using runnable interface\");\n    }\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    Thread t1=new Thread(funyThread1);\n    t1.start();\n    }\n  }","position":{"start":{"line":90,"column":1,"offset":3842},"end":{"line":102,"column":4,"offset":4230},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nThread Running using runnable interface","position":{"start":{"line":103,"column":1,"offset":4232},"end":{"line":106,"column":4,"offset":4290},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a java program to implement thread by using runnable interface with sleep method.","position":{"start":{"line":107,"column":5,"offset":4296},"end":{"line":107,"column":103,"offset":4394},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":4292},"end":{"line":107,"column":103,"offset":4394},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a java program to implement thread by using runnable interface with sleep method.\n  public class FunyThread implements Runnable {\n    public void run() {\n    int i;\n    try {\n       for(i=1;i<=5;i++) {\n        Thread.sleep(500);\n        System.out.println(\"i=\"+i);\n       }\n     }\n    catch(Exception e) {\n    }\n  }\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    FunyThread funyThread2=new FunyThread();\n    Thread t1=new Thread(funyThread1);\n    Thread t2=new Thread(funyThread2);\n    t1.start();\n    t2.start();\n   }\n }","position":{"start":{"line":108,"column":1,"offset":4396},"end":{"line":131,"column":4,"offset":5003},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4\ni=5\ni=5","position":{"start":{"line":132,"column":1,"offset":5005},"end":{"line":144,"column":4,"offset":5072},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Thread Priority","position":{"start":{"line":145,"column":4,"offset":5077},"end":{"line":145,"column":19,"offset":5092},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":5074},"end":{"line":145,"column":19,"offset":5092},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In Java, each thread is assigned a priority, which affects the order in which it is scheduled for running.","position":{"start":{"line":146,"column":3,"offset":5096},"end":{"line":146,"column":109,"offset":5202},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":5096},"end":{"line":146,"column":109,"offset":5202},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":5094},"end":{"line":146,"column":109,"offset":5202},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The threads that we have discussed so far are of the same priority. The threads of the same priority are given equal treatment by the Java scheduler and, therefore, they share the processor on a first-come, first-serve basis.","position":{"start":{"line":147,"column":3,"offset":5206},"end":{"line":147,"column":228,"offset":5431},"indent":[]}}],"position":{"start":{"line":147,"column":3,"offset":5206},"end":{"line":147,"column":228,"offset":5431},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":5204},"end":{"line":147,"column":228,"offset":5431},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Java permits us to set the priority of a thread using the setPriority() method as follows:","position":{"start":{"line":148,"column":3,"offset":5435},"end":{"line":148,"column":93,"offset":5525},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":5435},"end":{"line":148,"column":93,"offset":5525},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":5433},"end":{"line":148,"column":93,"offset":5525},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ThreadName.setPriority(intNumber);","position":{"start":{"line":149,"column":3,"offset":5529},"end":{"line":149,"column":37,"offset":5563},"indent":[]}}],"position":{"start":{"line":149,"column":3,"offset":5529},"end":{"line":149,"column":37,"offset":5563},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":5527},"end":{"line":149,"column":37,"offset":5563},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The intNumber is an integer value to which the thread’s priority is set. The Thread class defines several priority constants:","position":{"start":{"line":150,"column":3,"offset":5567},"end":{"line":150,"column":128,"offset":5692},"indent":[]}}],"position":{"start":{"line":150,"column":3,"offset":5567},"end":{"line":150,"column":128,"offset":5692},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5565},"end":{"line":150,"column":128,"offset":5692},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"MIN PRIORITY = 1","position":{"start":{"line":151,"column":3,"offset":5696},"end":{"line":151,"column":19,"offset":5712},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":5696},"end":{"line":151,"column":19,"offset":5712},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":5694},"end":{"line":151,"column":19,"offset":5712},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"NORM FRI ORITY = 5","position":{"start":{"line":152,"column":3,"offset":5716},"end":{"line":152,"column":21,"offset":5734},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":5716},"end":{"line":152,"column":21,"offset":5734},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":5714},"end":{"line":152,"column":21,"offset":5734},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"MAX PRIORITY = 10","position":{"start":{"line":153,"column":3,"offset":5738},"end":{"line":153,"column":20,"offset":5755},"indent":[]}}],"position":{"start":{"line":153,"column":3,"offset":5738},"end":{"line":153,"column":20,"offset":5755},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":5736},"end":{"line":153,"column":20,"offset":5755},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The intNumber may assume one of these constants or any value between 1 and 10. The default setting is NORM_PRIORITY.","position":{"start":{"line":154,"column":3,"offset":5759},"end":{"line":154,"column":119,"offset":5875},"indent":[]}}],"position":{"start":{"line":154,"column":3,"offset":5759},"end":{"line":154,"column":119,"offset":5875},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":5757},"end":{"line":154,"column":119,"offset":5875},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":5094},"end":{"line":154,"column":119,"offset":5875},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Thread Join() Method","position":{"start":{"line":155,"column":4,"offset":5880},"end":{"line":155,"column":24,"offset":5900},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":5877},"end":{"line":155,"column":24,"offset":5900},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In normal circumstances we generally have more than one thread, thread scheduler schedules the threads, which does not guarantee the order of execution of threads.","position":{"start":{"line":156,"column":3,"offset":5904},"end":{"line":156,"column":166,"offset":6067},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":5904},"end":{"line":156,"column":166,"offset":6067},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5902},"end":{"line":156,"column":166,"offset":6067},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The join() method is used to hold the execution of currently running thread until the specified thread is dead(finished execution).","position":{"start":{"line":157,"column":3,"offset":6071},"end":{"line":157,"column":134,"offset":6202},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":6071},"end":{"line":157,"column":134,"offset":6202},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":6069},"end":{"line":157,"column":134,"offset":6202},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5902},"end":{"line":157,"column":134,"offset":6202},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example-5: Write a java program to implement advantages of thread join method.","position":{"start":{"line":158,"column":4,"offset":6207},"end":{"line":158,"column":82,"offset":6285},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":6204},"end":{"line":158,"column":82,"offset":6285},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Write a java program to implement advantages of thread join method.\n  public class FunyThread extends Thread{\n    public void run() {\n    int i;\n    try {\n     for(i=1;i<=4;i++) {\n       Thread.sleep(500);\n       System.out.println(\"i=\"+i);\n      }\n    }\n  catch(Exception e) {\n  }\n}\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    FunyThread funyThread2=new FunyThread();\n    FunyThread funyThread3=new FunyThread();\n    funyThread1.start();\n      try {\n           funyThread1.join();\n       }catch (Exception e) {\n       }\n    funyThread2.start();\n    funyThread3.start();\n    }\n}","position":{"start":{"line":159,"column":1,"offset":6287},"end":{"line":186,"column":4,"offset":6953},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\ni=1\ni=2\ni=3\ni=4\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4","position":{"start":{"line":187,"column":1,"offset":6955},"end":{"line":201,"column":4,"offset":7032},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Daemon Thread in Java","position":{"start":{"line":202,"column":4,"offset":7037},"end":{"line":202,"column":25,"offset":7058},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":7034},"end":{"line":202,"column":25,"offset":7058},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Daemon thread in java is a service provider thread that provides services to the user thread.","position":{"start":{"line":203,"column":3,"offset":7062},"end":{"line":203,"column":96,"offset":7155},"indent":[]}}],"position":{"start":{"line":203,"column":3,"offset":7062},"end":{"line":203,"column":96,"offset":7155},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":7060},"end":{"line":203,"column":96,"offset":7155},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Its life depend on the mercy of user threads i.e. when all the user threads dies, JVM terminates this thread automatically.","position":{"start":{"line":204,"column":3,"offset":7159},"end":{"line":204,"column":126,"offset":7282},"indent":[]}}],"position":{"start":{"line":204,"column":3,"offset":7159},"end":{"line":204,"column":126,"offset":7282},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":7157},"end":{"line":204,"column":126,"offset":7282},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There are many java daemon threads running automatically e.g. gc, finalizer etc.","position":{"start":{"line":205,"column":3,"offset":7286},"end":{"line":205,"column":83,"offset":7366},"indent":[]}}],"position":{"start":{"line":205,"column":3,"offset":7286},"end":{"line":205,"column":83,"offset":7366},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":7284},"end":{"line":205,"column":83,"offset":7366},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":7060},"end":{"line":205,"column":83,"offset":7366},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-6: Write a java program to implement Daemon thread in java.","position":{"start":{"line":206,"column":5,"offset":7372},"end":{"line":206,"column":72,"offset":7439},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":7368},"end":{"line":206,"column":72,"offset":7439},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a java program to implement Daemon thread in java.\n class FunyThread extends Thread{\n  public void run(){\n    if(Thread.currentThread().isDaemon()){//checking for daemon thread\n       System.out.println(\"Its daemon thread \");\n       }\n   else{\n       System.out.println(\"Its user thread \");\n       }\n     }\n  public static void main(String[] args){\n        FunyThread t1=new FunyThread();//creating thread\n        FunyThread t2=new FunyThread();\n        FunyThread t3=new FunyThread();\n        t1.setDaemon(true);//now t1 is daemon thread\n        t1.start();//starting threads\n        t2.start();\n        t3.start();\n      }\n    }","position":{"start":{"line":208,"column":1,"offset":7443},"end":{"line":229,"column":4,"offset":8112},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nIts daemon thread\nIts user thread\nIts user thread","position":{"start":{"line":230,"column":1,"offset":8114},"end":{"line":235,"column":4,"offset":8184},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Thread Implementation in Java\",\"category\":\"Java\",\"author\":\"Anonymous\",\"tags\":[\"#java\",\"#tutorial\"],\"date\":\"2021-01-01T00:00:00.000Z\",\"thumbnailText\":\"Java Tutorial-32\"}","position":{"start":{"line":237,"column":1,"offset":8186},"end":{"line":237,"column":207,"offset":8392},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":237,"column":207,"offset":8392}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Thread Implementation in Java\",\n  \"category\": \"Java\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#java\", \"#tutorial\"],\n  \"date\": \"2021-01-01T00:00:00.000Z\",\n  \"thumbnailText\": \"Java Tutorial-32\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"thread-implementation-in-java\"\n  }, \"Thread Implementation in Java\"), mdx(\"p\", null, \"Creating thread in java is simple. Thread can be implemented in the form of object that contain method called run(). Run() method makes up the body of the thread and is the only method in which thread\\u2019s behavior can be implemented. Syntax of run method is as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"public void run()\\n{\\n  ---------\\n  ---------\\nStatements implementing Thread\\n---------\\n  ---------\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The run method can be invoked by an object of the concerned thread.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can be achieved by creating the thread and initiating it with the help of another thread method called as start().\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can create a thread by instantiating an object of type Thread. Java defines two ways in which this can be accomplished:\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"By Implementing Runnable interface. \\u2013 Runnable interface has only method called as run().\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"By extending Thread class. \\u2013 Extend Thread class and override the run method.\")), mdx(\"h2\", {\n    \"id\": \"thread-creation-by-extending-class\"\n  }, \"Thread Creation by Extending Class\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thread class provide constructors and methods to create and perform operations on a thread. We can make our class runnable as a thread by extending the class java.lang.Thread. This gives us access to all the thread methods directly. It includes the following steps:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Declare the class as extending the Thread class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implement the run() method that is responsible for executing the sequence of code that the thread will execute.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The run() method has been inherited by the class extended .We have to override this method in order to implement the code to be executed by our thread.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a thread object and call the start() method to initiate the thread execution. When we start the new thread, Java calls the thread\\u2019s run () method, so it is the run() where all the action takes place.\")), mdx(\"h2\", {\n    \"id\": \"sleep-method-in-java\"\n  }, \"Sleep method in java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The sleep() method of Thread class is used to sleep a thread for the specified amount of time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Thread class provides two methods for sleeping a thread:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public static void sleep(long miliseconds)throws InterruptedException\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public static void sleep(long miliseconds, int nanos) throws InterruptedException\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-java-program-to-implement-java-thread-by-extending-thread-class\"\n  }, \"Example-1: Write a java program to implement java thread by extending thread class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a java program to implement java thread by extending thread class.\\n public class FunyThread extends Thread{\\n  public void run() {\\n    System.out.println(\\\"Thread running and I am from thread\\\");\\n   }\\n  public static void main(String[] args) {\\n    FunyThread funyThread=new FunyThread();\\n    funyThread.start();\\n   }\\n }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nThread running and I am from thread\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-java-program-to-implement-thread-by-using-thread-class-with-sleep-method\"\n  }, \"Example-2: Write a java program to implement thread by using thread class with sleep method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a java program to implement thread by using thread class with sleep method.\\n  public class FunyThread extends Thread{\\n    public void run() {\\n        int i;\\n        try {\\n          for(i=1;i<=5;i++) {\\n             Thread.sleep(500);\\n             System.out.println(\\\"i=\\\"+i);\\n           }\\n         }\\n       catch(Exception e) {\\n       }\\n     }\\n  public static void main(String[] args) {\\n        FunyThread funyThread1=new FunyThread();\\n        FunyThread funyThread2=new FunyThread();\\n        funyThread1.start();\\n        funyThread2.start();\\n       }\\n     }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\ni=1\\ni=1\\ni=2\\ni=2\\ni=3\\ni=3\\ni=4\\ni=4\\ni=5\\ni=5\\n\")), mdx(\"h2\", {\n    \"id\": \"runnable-interface\"\n  }, \"Runnable Interface\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The easiest way to create a thread is to create a class that implements the Runnable interface. Runnable abstracts a unit of exe code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Runnable interface have only one method named run().\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"public void run(): is used to perform action for a thread.\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-java-program-to-implement-java-thread-by-using-runnable-interface\"\n  }, \"Example-3: Write a java program to implement java thread by using runnable interface.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a java program to implement java thread by using runnable interface.\\n  public class FunyThread extends Thread{\\n  public void run() {\\n    System.out.println(\\\"Thread Running using runnable interface\\\");\\n    }\\n  public static void main(String[] args) {\\n    FunyThread funyThread1=new FunyThread();\\n    Thread t1=new Thread(funyThread1);\\n    t1.start();\\n    }\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nThread Running using runnable interface\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-java-program-to-implement-thread-by-using-runnable-interface-with-sleep-method\"\n  }, \"Example-4: Write a java program to implement thread by using runnable interface with sleep method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a java program to implement thread by using runnable interface with sleep method.\\n  public class FunyThread implements Runnable {\\n    public void run() {\\n    int i;\\n    try {\\n       for(i=1;i<=5;i++) {\\n        Thread.sleep(500);\\n        System.out.println(\\\"i=\\\"+i);\\n       }\\n     }\\n    catch(Exception e) {\\n    }\\n  }\\n  public static void main(String[] args) {\\n    FunyThread funyThread1=new FunyThread();\\n    FunyThread funyThread2=new FunyThread();\\n    Thread t1=new Thread(funyThread1);\\n    Thread t2=new Thread(funyThread2);\\n    t1.start();\\n    t2.start();\\n   }\\n }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\ni=1\\ni=1\\ni=2\\ni=2\\ni=3\\ni=3\\ni=4\\ni=4\\ni=5\\ni=5\\n\")), mdx(\"h2\", {\n    \"id\": \"thread-priority\"\n  }, \"Thread Priority\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In Java, each thread is assigned a priority, which affects the order in which it is scheduled for running.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The threads that we have discussed so far are of the same priority. The threads of the same priority are given equal treatment by the Java scheduler and, therefore, they share the processor on a first-come, first-serve basis.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Java permits us to set the priority of a thread using the setPriority() method as follows:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ThreadName.setPriority(intNumber);\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The intNumber is an integer value to which the thread\\u2019s priority is set. The Thread class defines several priority constants:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MIN PRIORITY = 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NORM FRI ORITY = 5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MAX PRIORITY = 10\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The intNumber may assume one of these constants or any value between 1 and 10. The default setting is NORM_PRIORITY.\")), mdx(\"h2\", {\n    \"id\": \"thread-join-method\"\n  }, \"Thread Join() Method\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In normal circumstances we generally have more than one thread, thread scheduler schedules the threads, which does not guarantee the order of execution of threads.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The join() method is used to hold the execution of currently running thread until the specified thread is dead(finished execution).\")), mdx(\"h2\", {\n    \"id\": \"example-5-write-a-java-program-to-implement-advantages-of-thread-join-method\"\n  }, \"Example-5: Write a java program to implement advantages of thread join method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Write a java program to implement advantages of thread join method.\\n  public class FunyThread extends Thread{\\n    public void run() {\\n    int i;\\n    try {\\n     for(i=1;i<=4;i++) {\\n       Thread.sleep(500);\\n       System.out.println(\\\"i=\\\"+i);\\n      }\\n    }\\n  catch(Exception e) {\\n  }\\n}\\n  public static void main(String[] args) {\\n    FunyThread funyThread1=new FunyThread();\\n    FunyThread funyThread2=new FunyThread();\\n    FunyThread funyThread3=new FunyThread();\\n    funyThread1.start();\\n      try {\\n           funyThread1.join();\\n       }catch (Exception e) {\\n       }\\n    funyThread2.start();\\n    funyThread3.start();\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\ni=1\\ni=2\\ni=3\\ni=4\\ni=1\\ni=1\\ni=2\\ni=2\\ni=3\\ni=3\\ni=4\\ni=4\\n\")), mdx(\"h2\", {\n    \"id\": \"daemon-thread-in-java\"\n  }, \"Daemon Thread in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daemon thread in java is a service provider thread that provides services to the user thread.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Its life depend on the mercy of user threads i.e. when all the user threads dies, JVM terminates this thread automatically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are many java daemon threads running automatically e.g. gc, finalizer etc.\")), mdx(\"h3\", {\n    \"id\": \"example-6-write-a-java-program-to-implement-daemon-thread-in-java\"\n  }, \"Example-6: Write a java program to implement Daemon thread in java.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a java program to implement Daemon thread in java.\\n class FunyThread extends Thread{\\n  public void run(){\\n    if(Thread.currentThread().isDaemon()){//checking for daemon thread\\n       System.out.println(\\\"Its daemon thread \\\");\\n       }\\n   else{\\n       System.out.println(\\\"Its user thread \\\");\\n       }\\n     }\\n  public static void main(String[] args){\\n        FunyThread t1=new FunyThread();//creating thread\\n        FunyThread t2=new FunyThread();\\n        FunyThread t3=new FunyThread();\\n        t1.setDaemon(true);//now t1 is daemon thread\\n        t1.start();//starting threads\\n        t2.start();\\n        t3.start();\\n      }\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nIts daemon thread\\nIts user thread\\nIts user thread\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Thread Implementation in Java\",\n  \"category\": \"Java\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#java\", \"#tutorial\"],\n  \"date\": \"2021-01-01T00:00:00.000Z\",\n  \"thumbnailText\": \"Java Tutorial-32\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"thread-implementation-in-java\"\n    }}>{`Thread Implementation in Java`}</h2>\n    <p>{`Creating thread in java is simple. Thread can be implemented in the form of object that contain method called run(). Run() method makes up the body of the thread and is the only method in which thread’s behavior can be implemented. Syntax of run method is as`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`public void run()\n{\n  ---------\n  ---------\nStatements implementing Thread\n---------\n  ---------\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The run method can be invoked by an object of the concerned thread.`}</li>\n      <li parentName=\"ul\">{`This can be achieved by creating the thread and initiating it with the help of another thread method called as start().`}</li>\n      <li parentName=\"ul\">{`We can create a thread by instantiating an object of type Thread. Java defines two ways in which this can be accomplished:`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">{`By Implementing Runnable interface. – Runnable interface has only method called as run().`}</li>\n      <li parentName=\"ol\">{`By extending Thread class. – Extend Thread class and override the run method.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"thread-creation-by-extending-class\"\n    }}>{`Thread Creation by Extending Class`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Thread class provide constructors and methods to create and perform operations on a thread. We can make our class runnable as a thread by extending the class java.lang.Thread. This gives us access to all the thread methods directly. It includes the following steps:`}</li>\n      <li parentName=\"ul\">{`Declare the class as extending the Thread class.`}</li>\n      <li parentName=\"ul\">{`Implement the run() method that is responsible for executing the sequence of code that the thread will execute.`}</li>\n      <li parentName=\"ul\">{`The run() method has been inherited by the class extended .We have to override this method in order to implement the code to be executed by our thread.`}</li>\n      <li parentName=\"ul\">{`Create a thread object and call the start() method to initiate the thread execution. When we start the new thread, Java calls the thread’s run () method, so it is the run() where all the action takes place.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"sleep-method-in-java\"\n    }}>{`Sleep method in java`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The sleep() method of Thread class is used to sleep a thread for the specified amount of time.`}</li>\n      <li parentName=\"ul\">{`The Thread class provides two methods for sleeping a thread:`}</li>\n      <li parentName=\"ul\">{`public static void sleep(long miliseconds)throws InterruptedException`}</li>\n      <li parentName=\"ul\">{`public static void sleep(long miliseconds, int nanos) throws InterruptedException`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-java-program-to-implement-java-thread-by-extending-thread-class\"\n    }}>{`Example-1: Write a java program to implement java thread by extending thread class.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a java program to implement java thread by extending thread class.\n public class FunyThread extends Thread{\n  public void run() {\n    System.out.println(\"Thread running and I am from thread\");\n   }\n  public static void main(String[] args) {\n    FunyThread funyThread=new FunyThread();\n    funyThread.start();\n   }\n }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nThread running and I am from thread\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-java-program-to-implement-thread-by-using-thread-class-with-sleep-method\"\n    }}>{`Example-2: Write a java program to implement thread by using thread class with sleep method.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a java program to implement thread by using thread class with sleep method.\n  public class FunyThread extends Thread{\n    public void run() {\n        int i;\n        try {\n          for(i=1;i<=5;i++) {\n             Thread.sleep(500);\n             System.out.println(\"i=\"+i);\n           }\n         }\n       catch(Exception e) {\n       }\n     }\n  public static void main(String[] args) {\n        FunyThread funyThread1=new FunyThread();\n        FunyThread funyThread2=new FunyThread();\n        funyThread1.start();\n        funyThread2.start();\n       }\n     }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4\ni=5\ni=5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"runnable-interface\"\n    }}>{`Runnable Interface`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The easiest way to create a thread is to create a class that implements the Runnable interface. Runnable abstracts a unit of exe code.`}</li>\n      <li parentName=\"ul\">{`The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.`}</li>\n      <li parentName=\"ul\">{`Runnable interface have only one method named run().`}</li>\n      <li parentName=\"ul\">{`public void run(): is used to perform action for a thread.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-3-write-a-java-program-to-implement-java-thread-by-using-runnable-interface\"\n    }}>{`Example-3: Write a java program to implement java thread by using runnable interface.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a java program to implement java thread by using runnable interface.\n  public class FunyThread extends Thread{\n  public void run() {\n    System.out.println(\"Thread Running using runnable interface\");\n    }\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    Thread t1=new Thread(funyThread1);\n    t1.start();\n    }\n  }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nThread Running using runnable interface\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-java-program-to-implement-thread-by-using-runnable-interface-with-sleep-method\"\n    }}>{`Example-4: Write a java program to implement thread by using runnable interface with sleep method.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a java program to implement thread by using runnable interface with sleep method.\n  public class FunyThread implements Runnable {\n    public void run() {\n    int i;\n    try {\n       for(i=1;i<=5;i++) {\n        Thread.sleep(500);\n        System.out.println(\"i=\"+i);\n       }\n     }\n    catch(Exception e) {\n    }\n  }\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    FunyThread funyThread2=new FunyThread();\n    Thread t1=new Thread(funyThread1);\n    Thread t2=new Thread(funyThread2);\n    t1.start();\n    t2.start();\n   }\n }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4\ni=5\ni=5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"thread-priority\"\n    }}>{`Thread Priority`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In Java, each thread is assigned a priority, which affects the order in which it is scheduled for running.`}</li>\n      <li parentName=\"ul\">{`The threads that we have discussed so far are of the same priority. The threads of the same priority are given equal treatment by the Java scheduler and, therefore, they share the processor on a first-come, first-serve basis.`}</li>\n      <li parentName=\"ul\">{`Java permits us to set the priority of a thread using the setPriority() method as follows:`}</li>\n      <li parentName=\"ul\">{`ThreadName.setPriority(intNumber);`}</li>\n      <li parentName=\"ul\">{`The intNumber is an integer value to which the thread’s priority is set. The Thread class defines several priority constants:`}</li>\n      <li parentName=\"ul\">{`MIN PRIORITY = 1`}</li>\n      <li parentName=\"ul\">{`NORM FRI ORITY = 5`}</li>\n      <li parentName=\"ul\">{`MAX PRIORITY = 10`}</li>\n      <li parentName=\"ul\">{`The intNumber may assume one of these constants or any value between 1 and 10. The default setting is NORM_PRIORITY.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"thread-join-method\"\n    }}>{`Thread Join() Method`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In normal circumstances we generally have more than one thread, thread scheduler schedules the threads, which does not guarantee the order of execution of threads.`}</li>\n      <li parentName=\"ul\">{`The join() method is used to hold the execution of currently running thread until the specified thread is dead(finished execution).`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-5-write-a-java-program-to-implement-advantages-of-thread-join-method\"\n    }}>{`Example-5: Write a java program to implement advantages of thread join method.`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Write a java program to implement advantages of thread join method.\n  public class FunyThread extends Thread{\n    public void run() {\n    int i;\n    try {\n     for(i=1;i<=4;i++) {\n       Thread.sleep(500);\n       System.out.println(\"i=\"+i);\n      }\n    }\n  catch(Exception e) {\n  }\n}\n  public static void main(String[] args) {\n    FunyThread funyThread1=new FunyThread();\n    FunyThread funyThread2=new FunyThread();\n    FunyThread funyThread3=new FunyThread();\n    funyThread1.start();\n      try {\n           funyThread1.join();\n       }catch (Exception e) {\n       }\n    funyThread2.start();\n    funyThread3.start();\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\ni=1\ni=2\ni=3\ni=4\ni=1\ni=1\ni=2\ni=2\ni=3\ni=3\ni=4\ni=4\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"daemon-thread-in-java\"\n    }}>{`Daemon Thread in Java`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Daemon thread in java is a service provider thread that provides services to the user thread.`}</li>\n      <li parentName=\"ul\">{`Its life depend on the mercy of user threads i.e. when all the user threads dies, JVM terminates this thread automatically.`}</li>\n      <li parentName=\"ul\">{`There are many java daemon threads running automatically e.g. gc, finalizer etc.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-6-write-a-java-program-to-implement-daemon-thread-in-java\"\n    }}>{`Example-6: Write a java program to implement Daemon thread in java.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a java program to implement Daemon thread in java.\n class FunyThread extends Thread{\n  public void run(){\n    if(Thread.currentThread().isDaemon()){//checking for daemon thread\n       System.out.println(\"Its daemon thread \");\n       }\n   else{\n       System.out.println(\"Its user thread \");\n       }\n     }\n  public static void main(String[] args){\n        FunyThread t1=new FunyThread();//creating thread\n        FunyThread t2=new FunyThread();\n        FunyThread t3=new FunyThread();\n        t1.setDaemon(true);//now t1 is daemon thread\n        t1.start();//starting threads\n        t2.start();\n        t3.start();\n      }\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nIts daemon thread\nIts user thread\nIts user thread\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}