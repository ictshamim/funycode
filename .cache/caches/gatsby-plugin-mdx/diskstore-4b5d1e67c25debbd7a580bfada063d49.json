{"expireTime":9007200882776290000,"key":"gatsby-plugin-mdx-entire-payload-e71eceda2938bb33715bf57d66f598cb-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Template in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":19,"offset":18},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":19,"offset":18},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Template is one of the most important and useful feature of C++.  Template provides the idea of generic classes. Use of one function or class that works for all data types is generalization. With the help of templates and functions we can create generic data types and idea leads to generic programming. In the generic programming generic data types are passed as argument to function and classes.","position":{"start":{"line":2,"column":1,"offset":20},"end":{"line":2,"column":398,"offset":417},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":20},"end":{"line":2,"column":398,"offset":417},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Important Points Regarding Template","position":{"start":{"line":4,"column":4,"offset":424},"end":{"line":4,"column":39,"offset":459},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":421},"end":{"line":4,"column":39,"offset":459},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Template provides the idea of generic classes.","position":{"start":{"line":6,"column":3,"offset":465},"end":{"line":6,"column":49,"offset":511},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":465},"end":{"line":6,"column":49,"offset":511},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":463},"end":{"line":6,"column":49,"offset":511},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use of one function or class that works for all data types is generalization.","position":{"start":{"line":7,"column":3,"offset":515},"end":{"line":7,"column":80,"offset":592},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":515},"end":{"line":7,"column":80,"offset":592},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":513},"end":{"line":7,"column":80,"offset":592},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With the help of templates and functions we can create generic data types and this idea leads to generic programming.","position":{"start":{"line":8,"column":3,"offset":596},"end":{"line":8,"column":120,"offset":713},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":596},"end":{"line":8,"column":120,"offset":713},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":594},"end":{"line":8,"column":120,"offset":713},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In the generic programming generic data types are passed as argument to function and classes.","position":{"start":{"line":9,"column":3,"offset":717},"end":{"line":9,"column":96,"offset":810},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":717},"end":{"line":9,"column":96,"offset":810},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":715},"end":{"line":9,"column":96,"offset":810},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A template is similar to a macro which can work for different types of data.","position":{"start":{"line":10,"column":3,"offset":814},"end":{"line":10,"column":79,"offset":890},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":814},"end":{"line":10,"column":79,"offset":890},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":812},"end":{"line":10,"column":79,"offset":890},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A template created for a function so a function works for variety of data types is termed as function template.","position":{"start":{"line":11,"column":3,"offset":894},"end":{"line":11,"column":114,"offset":1005},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":894},"end":{"line":11,"column":114,"offset":1005},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":892},"end":{"line":11,"column":114,"offset":1005},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For example a function template max is written which finds maximum of two integer, two floats, two chars etc.","position":{"start":{"line":12,"column":3,"offset":1009},"end":{"line":12,"column":112,"offset":1118},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":1009},"end":{"line":12,"column":112,"offset":1118},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1007},"end":{"line":12,"column":112,"offset":1118},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Similarly, when a template is written for a class so one single class works for variety of data types is termed as class template.","position":{"start":{"line":13,"column":3,"offset":1122},"end":{"line":13,"column":133,"offset":1252},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":1122},"end":{"line":13,"column":133,"offset":1252},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1120},"end":{"line":13,"column":133,"offset":1252},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":463},"end":{"line":13,"column":133,"offset":1252},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Function Template","position":{"start":{"line":14,"column":4,"offset":1257},"end":{"line":14,"column":21,"offset":1274},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1254},"end":{"line":14,"column":21,"offset":1274},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A function template is created when we write one definition of function which works with different type of data types.","position":{"start":{"line":15,"column":3,"offset":1278},"end":{"line":15,"column":121,"offset":1396},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1278},"end":{"line":15,"column":121,"offset":1396},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1276},"end":{"line":16,"column":1,"offset":1398},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A function template does not occupy space in memory.","position":{"start":{"line":17,"column":3,"offset":1402},"end":{"line":17,"column":55,"offset":1454},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":1402},"end":{"line":17,"column":55,"offset":1454},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1400},"end":{"line":17,"column":55,"offset":1454},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The actual definition of function template is generated when function is called with specific data type.","position":{"start":{"line":18,"column":3,"offset":1458},"end":{"line":18,"column":107,"offset":1562},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1458},"end":{"line":18,"column":107,"offset":1562},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1456},"end":{"line":18,"column":107,"offset":1562},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The function template does not result in saving memory.","position":{"start":{"line":19,"column":3,"offset":1566},"end":{"line":19,"column":58,"offset":1621},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1566},"end":{"line":19,"column":58,"offset":1621},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1564},"end":{"line":19,"column":58,"offset":1621},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Function template simply relieves us from writing same amount of code for different data types.","position":{"start":{"line":20,"column":3,"offset":1625},"end":{"line":20,"column":98,"offset":1720},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1625},"end":{"line":20,"column":98,"offset":1720},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1623},"end":{"line":20,"column":98,"offset":1720},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1276},"end":{"line":20,"column":98,"offset":1720},"indent":[1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"The syntax for creating a function template :\ntemplate\nfunction definition;","position":{"start":{"line":21,"column":1,"offset":1722},"end":{"line":25,"column":4,"offset":1809},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Before function definition we write template which is a keyword.","position":{"start":{"line":26,"column":3,"offset":1813},"end":{"line":26,"column":67,"offset":1877},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1813},"end":{"line":26,"column":67,"offset":1877},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1811},"end":{"line":26,"column":67,"offset":1877},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In the brackets < and > we write class and any name which serves as the generic type.","position":{"start":{"line":27,"column":3,"offset":1881},"end":{"line":27,"column":88,"offset":1966},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1881},"end":{"line":27,"column":88,"offset":1966},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1879},"end":{"line":27,"column":88,"offset":1966},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The name may be a single character or a word (similar to identifier).","position":{"start":{"line":28,"column":3,"offset":1970},"end":{"line":28,"column":72,"offset":2039},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1970},"end":{"line":28,"column":72,"offset":2039},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1968},"end":{"line":28,"column":72,"offset":2039},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The name usually written in capital but may be in small case too.","position":{"start":{"line":29,"column":3,"offset":2043},"end":{"line":29,"column":68,"offset":2108},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":2043},"end":{"line":29,"column":68,"offset":2108},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2041},"end":{"line":29,"column":68,"offset":2108},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1811},"end":{"line":29,"column":68,"offset":2108},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to display different types of variable with their type using function template.","position":{"start":{"line":31,"column":5,"offset":2116},"end":{"line":31,"column":115,"offset":2226},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2112},"end":{"line":31,"column":115,"offset":2226},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to display different types of variable with their type using function template.\n#include<iostream>\n#include<typeid>\nusing namespace std;\ntemplate <class FUNC>\nvoid show(FUNC par)\n    {\n    cout<<\"Displaying\"<<typeid(par).name( )<<\"Parameter\\t\"<<;\n    }\nint main( )\n    {\n    int x=234;\n    float y=34.56f;\n    double d=3.444456;\n    char ch='P';\n    char *s= \"Template\";\n    show(x);\n    show(y);\n    show(d);\n    show(ch);\n    show(s);\n    }","position":{"start":{"line":32,"column":1,"offset":2228},"end":{"line":55,"column":4,"offset":2725},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nDisplaying int Parameter 234\nDisplaying float Parameter 34.56\nDisplaying double Parameter 3.44446\nDisplaying char Parameter P\nDisplaying  char * Parameter Template","position":{"start":{"line":56,"column":1,"offset":2727},"end":{"line":63,"column":4,"offset":2913},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":64,"column":5,"offset":2919},"end":{"line":64,"column":17,"offset":2931},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2915},"end":{"line":64,"column":17,"offset":2931},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The line template has to be written whenever you want to create either a function template or class template.","position":{"start":{"line":65,"column":3,"offset":2935},"end":{"line":65,"column":112,"offset":3044},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":2935},"end":{"line":65,"column":112,"offset":3044},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2933},"end":{"line":65,"column":112,"offset":3044},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The name FUNC is generic data type name. It is replaced by the actual data type when a specific data type is used with the function call.","position":{"start":{"line":66,"column":3,"offset":3048},"end":{"line":66,"column":140,"offset":3185},"indent":[]}}],"position":{"start":{"line":66,"column":3,"offset":3048},"end":{"line":66,"column":140,"offset":3185},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3046},"end":{"line":66,"column":140,"offset":3185},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The statement typeid(par).name gives the actual data type of the variable. Function template does not save memory.","position":{"start":{"line":67,"column":3,"offset":3189},"end":{"line":67,"column":117,"offset":3303},"indent":[]}}],"position":{"start":{"line":67,"column":3,"offset":3189},"end":{"line":67,"column":117,"offset":3303},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":3187},"end":{"line":67,"column":117,"offset":3303},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It saves us only from writing repetitive code which works for different type of data.","position":{"start":{"line":68,"column":3,"offset":3307},"end":{"line":68,"column":88,"offset":3392},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3307},"end":{"line":68,"column":88,"offset":3392},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3305},"end":{"line":68,"column":88,"offset":3392},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2933},"end":{"line":68,"column":88,"offset":3392},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to find maximum of two number using function template.","position":{"start":{"line":70,"column":5,"offset":3400},"end":{"line":70,"column":90,"offset":3485},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3396},"end":{"line":70,"column":90,"offset":3485},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to find maximum of two number using function template.\n#include<iostream>\nusing namespace std;\ntemplate <class FUNC>\nFUNC max2(FUNC a, FUNC b)\n    {\n    return (a>b?a :b);\n    }\nint main( )\n    {\n    int x=10,y=20;\n    float f1=2.4, f2=4.5;\n    char ch1='A', ch2='B';\n    cout<<\"\\n Max of two integers \"<< x <<\" & \"<< y <<\" is\\t\";\n    cout<<max2(x,y);\n    cout<<\"\\n Max of two floats \"<< f1 <<\" & \"<< f2 <<\" is\\t\";\n    cout<<max2(f1,f2);\n    cout<<\"\\n Max of two chars \"<< ch1 <<\" & \"<< ch2 <<\" is\\t\";\n    cout<<max2(ch1,ch2);\n    }","position":{"start":{"line":71,"column":1,"offset":3487},"end":{"line":92,"column":4,"offset":4072},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nMax of two integers 10 & 20 is 20\nMax of two floats 2.4 & 4.5 is 4.5\nMax of two chars A & B is B","position":{"start":{"line":93,"column":1,"offset":4074},"end":{"line":98,"column":4,"offset":4191},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to work with generic data type using function template.","position":{"start":{"line":99,"column":5,"offset":4197},"end":{"line":99,"column":91,"offset":4283},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4193},"end":{"line":99,"column":91,"offset":4283},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to work with generic data type using function template.\n#include<iostream>\n#include<typeid>\nusing namespace std;\ntemplate<class T1, class T2>\nvoid show(T1 par1, T2 par2)\n    {\n    cout<<typeid(par1).name( )<<\" parameter=\"<<par1<<\"\\t\";\n    cout<<typeid(par2).name( )<<\" parameter=\"<<par2<<endl;\n    }\nint main( )\n    {\n    show(14,'B');\n    show(\"NMIMS\",35.67);\n    }","position":{"start":{"line":100,"column":1,"offset":4285},"end":{"line":116,"column":4,"offset":4699},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nint parameter=14 char parameter=B\nchar * parameter=NMIMS double parameter=35.67","position":{"start":{"line":117,"column":1,"offset":4701},"end":{"line":121,"column":4,"offset":4800},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to check the equity of two data type of two variable  using function template.","position":{"start":{"line":122,"column":5,"offset":4806},"end":{"line":122,"column":114,"offset":4915},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":4802},"end":{"line":122,"column":114,"offset":4915},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to check the equity of two data type of two variable  using function template. #include\n#include<iostream>\nusing namespace std;\ntemplate<class T1, class T2>\nvoid equal(T1 x, T2 y)\n    {\n    const char*p1=typeid(x).name( );\n    const char*p2=typeid(y).name( );\n    if(strcmp(p1,p2)==0)\n    cout<<\"Data type \"<<p1<<\" and \"<else\n    cout<<\"Data type \"<<p1<<\" and \"<<p2<<\" is not same\"<<endl;\n    }\nint main( )\n    {\n    equal(23.45, 23.45);\n    equal('A',65);\n    equal(2.0, 2.0f);\n    equal(\"str\",(int*)\"str\");\n    }","position":{"start":{"line":123,"column":1,"offset":4917},"end":{"line":143,"column":4,"offset":5483},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nData type double and double is same\nData type char and int is not same\nData type double and float is not same\nData type char * and int * is not same","position":{"start":{"line":144,"column":1,"offset":5485},"end":{"line":150,"column":4,"offset":5655},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C++ program to illustrate of overloading of function template.","position":{"start":{"line":151,"column":5,"offset":5661},"end":{"line":151,"column":86,"offset":5742},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":5657},"end":{"line":151,"column":86,"offset":5742},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate of overloading of function template.\n#include<iostream>\n#include<typeid>\n#include<string.h>\nusing namespace std;\ntemplate <class T>\nvoid show(T par)\n    {\n    cout<<\"Function template show \\n\";\n    cout<<\"par : =\"<<par<<endl;\n    }\nvoid show(char*s)\n    {\n    cout<<\"Explicit function show\\n\";\n    cout<<\"s=\"<<s<<endl;\n    }\nint main( )\n    {\n    show(12);\n    show(34.78);\n    show(\"Explicit\");\n    }","position":{"start":{"line":152,"column":1,"offset":5744},"end":{"line":175,"column":4,"offset":6214},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nFunction template show\npar : =12\nFunction template show\npar : =34.78\nFunction template show\npar : =Explicit","position":{"start":{"line":176,"column":1,"offset":6216},"end":{"line":184,"column":4,"offset":6347},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class Template","position":{"start":{"line":185,"column":4,"offset":6352},"end":{"line":185,"column":18,"offset":6366},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":6349},"end":{"line":185,"column":18,"offset":6366},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Similar to function template we can create class template. The difference is simply that earlier we created template for a function now we will be creating it for class. The class templates are basically used for creating container classes. That is which can contains varieties of objects of any type. For the class templates definition method remains same but instantiation changes. Take an example :","position":{"start":{"line":186,"column":3,"offset":6370},"end":{"line":186,"column":404,"offset":6771},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":6370},"end":{"line":186,"column":404,"offset":6771},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":6368},"end":{"line":186,"column":404,"offset":6771},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":6368},"end":{"line":186,"column":404,"offset":6771},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"template <class PAR>\nclass demo\n    {\n    T x, y;\n    public :\n    ……………;\n    ……………;\n    };","position":{"start":{"line":187,"column":1,"offset":6773},"end":{"line":196,"column":4,"offset":6883},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The template class can be instantiated when an object of the class will be created.","position":{"start":{"line":197,"column":3,"offset":6887},"end":{"line":197,"column":86,"offset":6970},"indent":[]}}],"position":{"start":{"line":197,"column":3,"offset":6887},"end":{"line":197,"column":86,"offset":6970},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":6885},"end":{"line":197,"column":86,"offset":6970},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":6885},"end":{"line":197,"column":86,"offset":6970},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-6: Write a C++ program to illustrate sum of two integer using class template.","position":{"start":{"line":198,"column":5,"offset":6976},"end":{"line":198,"column":90,"offset":7061},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":6972},"end":{"line":198,"column":90,"offset":7061},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate sum of two integer using class template.\n#include<iostream>\n#include<typeid>\n#include<string.h>\nusing namespace std;\ntemplate\nclass demo\n    {\n    PAR n1,n2;\n    public :\n    demo(PAR x, PAR y)\n        {\n        n1=x;\n        n2=y;\n        }\n    PAR sum( )\n        {\n        return(n1+n2);\n        }\n    };\nint main( )\n    {\n    demod1(10,20);\n    cout<<\"Sum=\"<<d1.sum( )<<endl;\n    demod2(2.4f,4.5f);\n    cout<<\"Sum=\"<<d2.sum( )<<endl;\n    }","position":{"start":{"line":199,"column":1,"offset":7063},"end":{"line":227,"column":4,"offset":7579},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nSum=30\nSum=6.9","position":{"start":{"line":228,"column":1,"offset":7581},"end":{"line":232,"column":4,"offset":7615},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Template in Cplusplus\",\"category\":\"Cplusplus Programming\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-02T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-30\"}","position":{"start":{"line":235,"column":1,"offset":7619},"end":{"line":235,"column":214,"offset":7832},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":235,"column":214,"offset":7832}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Template in Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-02T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-30\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"template-in-c\"\n  }, \"Template in C++\"), mdx(\"p\", null, \"Template is one of the most important and useful feature of C++.  Template provides the idea of generic classes. Use of one function or class that works for all data types is generalization. With the help of templates and functions we can create generic data types and idea leads to generic programming. In the generic programming generic data types are passed as argument to function and classes.\"), mdx(\"h2\", {\n    \"id\": \"important-points-regarding-template\"\n  }, \"Important Points Regarding Template\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Template provides the idea of generic classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use of one function or class that works for all data types is generalization.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With the help of templates and functions we can create generic data types and this idea leads to generic programming.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the generic programming generic data types are passed as argument to function and classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A template is similar to a macro which can work for different types of data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A template created for a function so a function works for variety of data types is termed as function template.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example a function template max is written which finds maximum of two integer, two floats, two chars etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly, when a template is written for a class so one single class works for variety of data types is termed as class template.\")), mdx(\"h2\", {\n    \"id\": \"function-template\"\n  }, \"Function Template\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A function template is created when we write one definition of function which works with different type of data types.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A function template does not occupy space in memory.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The actual definition of function template is generated when function is called with specific data type.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The function template does not result in saving memory.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Function template simply relieves us from writing same amount of code for different data types.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"The syntax for creating a function template :\\ntemplate\\nfunction definition;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before function definition we write template which is a keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the brackets < and > we write class and any name which serves as the generic type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The name may be a single character or a word (similar to identifier).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The name usually written in capital but may be in small case too.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-display-different-types-of-variable-with-their-type-using-function-template\"\n  }, \"Example-1: Write a C++ program to display different types of variable with their type using function template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to display different types of variable with their type using function template.\\n#include<iostream>\\n#include<typeid>\\nusing namespace std;\\ntemplate <class FUNC>\\nvoid show(FUNC par)\\n    {\\n    cout<<\\\"Displaying\\\"<<typeid(par).name( )<<\\\"Parameter\\\\t\\\"<<;\\n    }\\nint main( )\\n    {\\n    int x=234;\\n    float y=34.56f;\\n    double d=3.444456;\\n    char ch='P';\\n    char *s= \\\"Template\\\";\\n    show(x);\\n    show(y);\\n    show(d);\\n    show(ch);\\n    show(s);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nDisplaying int Parameter 234\\nDisplaying float Parameter 34.56\\nDisplaying double Parameter 3.44446\\nDisplaying char Parameter P\\nDisplaying  char * Parameter Template\\n\")), mdx(\"h3\", {\n    \"id\": \"explanation\"\n  }, \"Explanation:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The line template has to be written whenever you want to create either a function template or class template.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The name FUNC is generic data type name. It is replaced by the actual data type when a specific data type is used with the function call.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The statement typeid(par).name gives the actual data type of the variable. Function template does not save memory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It saves us only from writing repetitive code which works for different type of data.\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-find-maximum-of-two-number-using-function-template\"\n  }, \"Example-2: Write a C++ program to find maximum of two number using function template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to find maximum of two number using function template.\\n#include<iostream>\\nusing namespace std;\\ntemplate <class FUNC>\\nFUNC max2(FUNC a, FUNC b)\\n    {\\n    return (a>b?a :b);\\n    }\\nint main( )\\n    {\\n    int x=10,y=20;\\n    float f1=2.4, f2=4.5;\\n    char ch1='A', ch2='B';\\n    cout<<\\\"\\\\n Max of two integers \\\"<< x <<\\\" & \\\"<< y <<\\\" is\\\\t\\\";\\n    cout<<max2(x,y);\\n    cout<<\\\"\\\\n Max of two floats \\\"<< f1 <<\\\" & \\\"<< f2 <<\\\" is\\\\t\\\";\\n    cout<<max2(f1,f2);\\n    cout<<\\\"\\\\n Max of two chars \\\"<< ch1 <<\\\" & \\\"<< ch2 <<\\\" is\\\\t\\\";\\n    cout<<max2(ch1,ch2);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nMax of two integers 10 & 20 is 20\\nMax of two floats 2.4 & 4.5 is 4.5\\nMax of two chars A & B is B\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-work-with-generic-data-type-using-function-template\"\n  }, \"Example-3: Write a C++ program to work with generic data type using function template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to work with generic data type using function template.\\n#include<iostream>\\n#include<typeid>\\nusing namespace std;\\ntemplate<class T1, class T2>\\nvoid show(T1 par1, T2 par2)\\n    {\\n    cout<<typeid(par1).name( )<<\\\" parameter=\\\"<<par1<<\\\"\\\\t\\\";\\n    cout<<typeid(par2).name( )<<\\\" parameter=\\\"<<par2<<endl;\\n    }\\nint main( )\\n    {\\n    show(14,'B');\\n    show(\\\"NMIMS\\\",35.67);\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nint parameter=14 char parameter=B\\nchar * parameter=NMIMS double parameter=35.67\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to-check-the-equity-of-two-data-type-of-two-variable--using-function-template\"\n  }, \"Example-4: Write a C++ program to check the equity of two data type of two variable  using function template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to check the equity of two data type of two variable  using function template. #include\\n#include<iostream>\\nusing namespace std;\\ntemplate<class T1, class T2>\\nvoid equal(T1 x, T2 y)\\n    {\\n    const char*p1=typeid(x).name( );\\n    const char*p2=typeid(y).name( );\\n    if(strcmp(p1,p2)==0)\\n    cout<<\\\"Data type \\\"<<p1<<\\\" and \\\"<else\\n    cout<<\\\"Data type \\\"<<p1<<\\\" and \\\"<<p2<<\\\" is not same\\\"<<endl;\\n    }\\nint main( )\\n    {\\n    equal(23.45, 23.45);\\n    equal('A',65);\\n    equal(2.0, 2.0f);\\n    equal(\\\"str\\\",(int*)\\\"str\\\");\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nData type double and double is same\\nData type char and int is not same\\nData type double and float is not same\\nData type char * and int * is not same\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-illustrate-of-overloading-of-function-template\"\n  }, \"Example-5: Write a C++ program to illustrate of overloading of function template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate of overloading of function template.\\n#include<iostream>\\n#include<typeid>\\n#include<string.h>\\nusing namespace std;\\ntemplate <class T>\\nvoid show(T par)\\n    {\\n    cout<<\\\"Function template show \\\\n\\\";\\n    cout<<\\\"par : =\\\"<<par<<endl;\\n    }\\nvoid show(char*s)\\n    {\\n    cout<<\\\"Explicit function show\\\\n\\\";\\n    cout<<\\\"s=\\\"<<s<<endl;\\n    }\\nint main( )\\n    {\\n    show(12);\\n    show(34.78);\\n    show(\\\"Explicit\\\");\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nFunction template show\\npar : =12\\nFunction template show\\npar : =34.78\\nFunction template show\\npar : =Explicit\\n\")), mdx(\"h2\", {\n    \"id\": \"class-template\"\n  }, \"Class Template\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similar to function template we can create class template. The difference is simply that earlier we created template for a function now we will be creating it for class. The class templates are basically used for creating container classes. That is which can contains varieties of objects of any type. For the class templates definition method remains same but instantiation changes. Take an example :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"template <class PAR>\\nclass demo\\n    {\\n    T x, y;\\n    public :\\n    \\u2026\\u2026\\u2026\\u2026\\u2026;\\n    \\u2026\\u2026\\u2026\\u2026\\u2026;\\n    };\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The template class can be instantiated when an object of the class will be created.\")), mdx(\"h3\", {\n    \"id\": \"example-6-write-a-c-program-to-illustrate-sum-of-two-integer-using-class-template\"\n  }, \"Example-6: Write a C++ program to illustrate sum of two integer using class template.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate sum of two integer using class template.\\n#include<iostream>\\n#include<typeid>\\n#include<string.h>\\nusing namespace std;\\ntemplate\\nclass demo\\n    {\\n    PAR n1,n2;\\n    public :\\n    demo(PAR x, PAR y)\\n        {\\n        n1=x;\\n        n2=y;\\n        }\\n    PAR sum( )\\n        {\\n        return(n1+n2);\\n        }\\n    };\\nint main( )\\n    {\\n    demod1(10,20);\\n    cout<<\\\"Sum=\\\"<<d1.sum( )<<endl;\\n    demod2(2.4f,4.5f);\\n    cout<<\\\"Sum=\\\"<<d2.sum( )<<endl;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nSum=30\\nSum=6.9\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Template in Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-02T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-30\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"template-in-c\"\n    }}>{`Template in C++`}</h2>\n    <p>{`Template is one of the most important and useful feature of C++.  Template provides the idea of generic classes. Use of one function or class that works for all data types is generalization. With the help of templates and functions we can create generic data types and idea leads to generic programming. In the generic programming generic data types are passed as argument to function and classes.`}</p>\n    <h2 {...{\n      \"id\": \"important-points-regarding-template\"\n    }}>{`Important Points Regarding Template`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Template provides the idea of generic classes.`}</li>\n      <li parentName=\"ul\">{`Use of one function or class that works for all data types is generalization.`}</li>\n      <li parentName=\"ul\">{`With the help of templates and functions we can create generic data types and this idea leads to generic programming.`}</li>\n      <li parentName=\"ul\">{`In the generic programming generic data types are passed as argument to function and classes.`}</li>\n      <li parentName=\"ul\">{`A template is similar to a macro which can work for different types of data.`}</li>\n      <li parentName=\"ul\">{`A template created for a function so a function works for variety of data types is termed as function template.`}</li>\n      <li parentName=\"ul\">{`For example a function template max is written which finds maximum of two integer, two floats, two chars etc.`}</li>\n      <li parentName=\"ul\">{`Similarly, when a template is written for a class so one single class works for variety of data types is termed as class template.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"function-template\"\n    }}>{`Function Template`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A function template is created when we write one definition of function which works with different type of data types.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`A function template does not occupy space in memory.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The actual definition of function template is generated when function is called with specific data type.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The function template does not result in saving memory.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Function template simply relieves us from writing same amount of code for different data types.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`The syntax for creating a function template :\ntemplate\nfunction definition;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Before function definition we write template which is a keyword.`}</li>\n      <li parentName=\"ul\">{`In the brackets < and > we write class and any name which serves as the generic type.`}</li>\n      <li parentName=\"ul\">{`The name may be a single character or a word (similar to identifier).`}</li>\n      <li parentName=\"ul\">{`The name usually written in capital but may be in small case too.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-display-different-types-of-variable-with-their-type-using-function-template\"\n    }}>{`Example-1: Write a C++ program to display different types of variable with their type using function template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to display different types of variable with their type using function template.\n#include<iostream>\n#include<typeid>\nusing namespace std;\ntemplate <class FUNC>\nvoid show(FUNC par)\n    {\n    cout<<\"Displaying\"<<typeid(par).name( )<<\"Parameter\\\\t\"<<;\n    }\nint main( )\n    {\n    int x=234;\n    float y=34.56f;\n    double d=3.444456;\n    char ch='P';\n    char *s= \"Template\";\n    show(x);\n    show(y);\n    show(d);\n    show(ch);\n    show(s);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nDisplaying int Parameter 234\nDisplaying float Parameter 34.56\nDisplaying double Parameter 3.44446\nDisplaying char Parameter P\nDisplaying  char * Parameter Template\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation:`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The line template has to be written whenever you want to create either a function template or class template.`}</li>\n      <li parentName=\"ul\">{`The name FUNC is generic data type name. It is replaced by the actual data type when a specific data type is used with the function call.`}</li>\n      <li parentName=\"ul\">{`The statement typeid(par).name gives the actual data type of the variable. Function template does not save memory.`}</li>\n      <li parentName=\"ul\">{`It saves us only from writing repetitive code which works for different type of data.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-find-maximum-of-two-number-using-function-template\"\n    }}>{`Example-2: Write a C++ program to find maximum of two number using function template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to find maximum of two number using function template.\n#include<iostream>\nusing namespace std;\ntemplate <class FUNC>\nFUNC max2(FUNC a, FUNC b)\n    {\n    return (a>b?a :b);\n    }\nint main( )\n    {\n    int x=10,y=20;\n    float f1=2.4, f2=4.5;\n    char ch1='A', ch2='B';\n    cout<<\"\\\\n Max of two integers \"<< x <<\" & \"<< y <<\" is\\\\t\";\n    cout<<max2(x,y);\n    cout<<\"\\\\n Max of two floats \"<< f1 <<\" & \"<< f2 <<\" is\\\\t\";\n    cout<<max2(f1,f2);\n    cout<<\"\\\\n Max of two chars \"<< ch1 <<\" & \"<< ch2 <<\" is\\\\t\";\n    cout<<max2(ch1,ch2);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nMax of two integers 10 & 20 is 20\nMax of two floats 2.4 & 4.5 is 4.5\nMax of two chars A & B is B\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-work-with-generic-data-type-using-function-template\"\n    }}>{`Example-3: Write a C++ program to work with generic data type using function template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to work with generic data type using function template.\n#include<iostream>\n#include<typeid>\nusing namespace std;\ntemplate<class T1, class T2>\nvoid show(T1 par1, T2 par2)\n    {\n    cout<<typeid(par1).name( )<<\" parameter=\"<<par1<<\"\\\\t\";\n    cout<<typeid(par2).name( )<<\" parameter=\"<<par2<<endl;\n    }\nint main( )\n    {\n    show(14,'B');\n    show(\"NMIMS\",35.67);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nint parameter=14 char parameter=B\nchar * parameter=NMIMS double parameter=35.67\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to-check-the-equity-of-two-data-type-of-two-variable--using-function-template\"\n    }}>{`Example-4: Write a C++ program to check the equity of two data type of two variable  using function template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to check the equity of two data type of two variable  using function template. #include\n#include<iostream>\nusing namespace std;\ntemplate<class T1, class T2>\nvoid equal(T1 x, T2 y)\n    {\n    const char*p1=typeid(x).name( );\n    const char*p2=typeid(y).name( );\n    if(strcmp(p1,p2)==0)\n    cout<<\"Data type \"<<p1<<\" and \"<else\n    cout<<\"Data type \"<<p1<<\" and \"<<p2<<\" is not same\"<<endl;\n    }\nint main( )\n    {\n    equal(23.45, 23.45);\n    equal('A',65);\n    equal(2.0, 2.0f);\n    equal(\"str\",(int*)\"str\");\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nData type double and double is same\nData type char and int is not same\nData type double and float is not same\nData type char * and int * is not same\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-illustrate-of-overloading-of-function-template\"\n    }}>{`Example-5: Write a C++ program to illustrate of overloading of function template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate of overloading of function template.\n#include<iostream>\n#include<typeid>\n#include<string.h>\nusing namespace std;\ntemplate <class T>\nvoid show(T par)\n    {\n    cout<<\"Function template show \\\\n\";\n    cout<<\"par : =\"<<par<<endl;\n    }\nvoid show(char*s)\n    {\n    cout<<\"Explicit function show\\\\n\";\n    cout<<\"s=\"<<s<<endl;\n    }\nint main( )\n    {\n    show(12);\n    show(34.78);\n    show(\"Explicit\");\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nFunction template show\npar : =12\nFunction template show\npar : =34.78\nFunction template show\npar : =Explicit\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-template\"\n    }}>{`Class Template`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Similar to function template we can create class template. The difference is simply that earlier we created template for a function now we will be creating it for class. The class templates are basically used for creating container classes. That is which can contains varieties of objects of any type. For the class templates definition method remains same but instantiation changes. Take an example :`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`template <class PAR>\nclass demo\n    {\n    T x, y;\n    public :\n    ……………;\n    ……………;\n    };\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The template class can be instantiated when an object of the class will be created.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-6-write-a-c-program-to-illustrate-sum-of-two-integer-using-class-template\"\n    }}>{`Example-6: Write a C++ program to illustrate sum of two integer using class template.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate sum of two integer using class template.\n#include<iostream>\n#include<typeid>\n#include<string.h>\nusing namespace std;\ntemplate\nclass demo\n    {\n    PAR n1,n2;\n    public :\n    demo(PAR x, PAR y)\n        {\n        n1=x;\n        n2=y;\n        }\n    PAR sum( )\n        {\n        return(n1+n2);\n        }\n    };\nint main( )\n    {\n    demod1(10,20);\n    cout<<\"Sum=\"<<d1.sum( )<<endl;\n    demod2(2.4f,4.5f);\n    cout<<\"Sum=\"<<d2.sum( )<<endl;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nSum=30\nSum=6.9\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}