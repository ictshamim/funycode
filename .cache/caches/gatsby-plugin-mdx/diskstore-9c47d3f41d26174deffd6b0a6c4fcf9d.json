{"expireTime":9007200882776287000,"key":"gatsby-plugin-mdx-entire-payload-fabc5f01a4915ba2f8d246d02d3d429e-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Pure Virtual Function in C++","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":32,"offset":31},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":32,"offset":31},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A pure virtual function is a function which has its body set to 0 i.e., the pure virtual function does not have any body.","position":{"start":{"line":2,"column":1,"offset":33},"end":{"line":2,"column":122,"offset":154},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":33},"end":{"line":2,"column":122,"offset":154},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"virtual void set ( ) =0;","position":{"start":{"line":4,"column":3,"offset":160},"end":{"line":4,"column":27,"offset":184},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":160},"end":{"line":4,"column":27,"offset":184},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":158},"end":{"line":4,"column":27,"offset":184},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A function declared in the above is known as pure virtual function. Here = 0 does not mean that function show is equal to 0.","position":{"start":{"line":5,"column":3,"offset":188},"end":{"line":5,"column":127,"offset":312},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":188},"end":{"line":5,"column":127,"offset":312},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":186},"end":{"line":5,"column":127,"offset":312},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It simply means that the virtual function show has no body.","position":{"start":{"line":6,"column":3,"offset":316},"end":{"line":6,"column":62,"offset":375},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":316},"end":{"line":6,"column":62,"offset":375},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":314},"end":{"line":6,"column":62,"offset":375},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The pure virtual function act as an interface and any class which inherits the class in which pure virtual function is present, has to provide the implementation for the function show.","position":{"start":{"line":7,"column":3,"offset":379},"end":{"line":7,"column":187,"offset":563},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":379},"end":{"line":7,"column":187,"offset":563},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":377},"end":{"line":7,"column":187,"offset":563},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Any class which contains at least a pure virtual function is termed as an abstract class.","position":{"start":{"line":8,"column":3,"offset":567},"end":{"line":8,"column":92,"offset":656},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":567},"end":{"line":8,"column":92,"offset":656},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":565},"end":{"line":8,"column":92,"offset":656},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An abstract class is a class whose objects cannot be created. As its objects cannot be created, this class has to be inherited by some other class.","position":{"start":{"line":9,"column":3,"offset":660},"end":{"line":9,"column":150,"offset":807},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":660},"end":{"line":9,"column":150,"offset":807},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":658},"end":{"line":9,"column":150,"offset":807},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The derived class must define the implementation of all the pure virtual function presents in the class.","position":{"start":{"line":10,"column":3,"offset":811},"end":{"line":10,"column":107,"offset":915},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":811},"end":{"line":10,"column":107,"offset":915},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":809},"end":{"line":10,"column":107,"offset":915},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If the derived class does not define all the pure virtual function than derived class also becomes abstract class.","position":{"start":{"line":11,"column":3,"offset":919},"end":{"line":11,"column":117,"offset":1033},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":919},"end":{"line":11,"column":117,"offset":1033},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":917},"end":{"line":11,"column":117,"offset":1033},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It is not necessary that all functions in an abstract class must be pure virtual.","position":{"start":{"line":12,"column":3,"offset":1037},"end":{"line":12,"column":84,"offset":1118},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":1037},"end":{"line":12,"column":84,"offset":1118},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1035},"end":{"line":12,"column":84,"offset":1118},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An abstract class may have other virtual or non-virtual functions, data members which may be used by the objects of derived classes.","position":{"start":{"line":13,"column":3,"offset":1122},"end":{"line":13,"column":135,"offset":1254},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":1122},"end":{"line":13,"column":135,"offset":1254},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1120},"end":{"line":13,"column":135,"offset":1254},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The concept behind abstract class is to force derived classes to redefine pure virtual functions as per their requirements and features they posses.","position":{"start":{"line":14,"column":3,"offset":1258},"end":{"line":14,"column":151,"offset":1406},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":1258},"end":{"line":14,"column":151,"offset":1406},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1256},"end":{"line":14,"column":151,"offset":1406},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":158},"end":{"line":14,"column":151,"offset":1406},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrate pure virtual function.","position":{"start":{"line":15,"column":5,"offset":1412},"end":{"line":15,"column":72,"offset":1479},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1408},"end":{"line":15,"column":72,"offset":1479},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"show of second class\"<<endl;\n        }\n    };\nint main( )\n    {\n    first *ptr=new second;\n    ptr->show( );\n    }","position":{"start":{"line":16,"column":1,"offset":1481},"end":{"line":38,"column":4,"offset":1880},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nshow of second class","position":{"start":{"line":39,"column":1,"offset":1882},"end":{"line":42,"column":4,"offset":1921},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to illustrate pure virtual function.","position":{"start":{"line":44,"column":5,"offset":1929},"end":{"line":44,"column":72,"offset":1996},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1925},"end":{"line":44,"column":72,"offset":1996},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of second\"<<endl;\n        }\n    };\nclass third :public first\n    {\n    };\nint main( )\n    {\n    first *ptr=new second;\n    ptr->show( );\n    ptr=new third; // line causes error\n    ptr->show( );\n    }","position":{"start":{"line":45,"column":1,"offset":1998},"end":{"line":72,"column":4,"offset":2493},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nerror: invalid new-expression of abstract class type 'third'|\nbecause the following virtual functions are pure within 'third':|","position":{"start":{"line":73,"column":1,"offset":2495},"end":{"line":77,"column":4,"offset":2642},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to illustrate another example pure virtual function.","position":{"start":{"line":79,"column":5,"offset":2650},"end":{"line":79,"column":88,"offset":2733},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2646},"end":{"line":79,"column":88,"offset":2733},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate another example pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of second\"<<endl;\n        }\n    };\nclass third :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    third t;\n    int i;\n    first *ptr[]= {&s,&t};\n    for(i=0; i<2; i++)\n    ptr[i]->show( );\n    }","position":{"start":{"line":80,"column":1,"offset":2735},"end":{"line":114,"column":4,"offset":3346},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nShow of second\nShow of third","position":{"start":{"line":115,"column":1,"offset":3348},"end":{"line":119,"column":4,"offset":3396},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Pure Virtual Function in Cplusplus\",\"category\":\"Cplusplus Programming\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-04T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-28\"}","position":{"start":{"line":122,"column":1,"offset":3400},"end":{"line":122,"column":227,"offset":3626},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":122,"column":227,"offset":3626}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pure Virtual Function in Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-04T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-28\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"pure-virtual-function-in-c\"\n  }, \"Pure Virtual Function in C++\"), mdx(\"p\", null, \"A pure virtual function is a function which has its body set to 0 i.e., the pure virtual function does not have any body.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"virtual void set ( ) =0;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A function declared in the above is known as pure virtual function. Here = 0 does not mean that function show is equal to 0.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It simply means that the virtual function show has no body.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pure virtual function act as an interface and any class which inherits the class in which pure virtual function is present, has to provide the implementation for the function show.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any class which contains at least a pure virtual function is termed as an abstract class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An abstract class is a class whose objects cannot be created. As its objects cannot be created, this class has to be inherited by some other class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The derived class must define the implementation of all the pure virtual function presents in the class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the derived class does not define all the pure virtual function than derived class also becomes abstract class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is not necessary that all functions in an abstract class must be pure virtual.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An abstract class may have other virtual or non-virtual functions, data members which may be used by the objects of derived classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The concept behind abstract class is to force derived classes to redefine pure virtual functions as per their requirements and features they posses.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-pure-virtual-function\"\n  }, \"Example-1: Write a C++ program to illustrate pure virtual function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate pure virtual function.\\n#include<iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    void virtual show( )=0;\\n    };\\nclass second :public first\\n    {\\n    public :\\n    void show( )\\n        {\\n        cout<<\\\"show of second class\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    first *ptr=new second;\\n    ptr->show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nshow of second class\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-pure-virtual-function\"\n  }, \"Example-2: Write a C++ program to illustrate pure virtual function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate pure virtual function.\\n#include<iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    void virtual show( )=0;\\n    };\\nclass second :public first\\n    {\\n    public :\\n    void show( )\\n        {\\n        cout<<\\\"Show of second\\\"<<endl;\\n        }\\n    };\\nclass third :public first\\n    {\\n    };\\nint main( )\\n    {\\n    first *ptr=new second;\\n    ptr->show( );\\n    ptr=new third; // line causes error\\n    ptr->show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nerror: invalid new-expression of abstract class type 'third'|\\nbecause the following virtual functions are pure within 'third':|\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrate-another-example-pure-virtual-function\"\n  }, \"Example-3: Write a C++ program to illustrate another example pure virtual function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate another example pure virtual function.\\n#include<iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    void virtual show( )=0;\\n    };\\nclass second :public first\\n    {\\n    public :\\n    void show( )\\n        {\\n        cout<<\\\"Show of second\\\"<<endl;\\n        }\\n    };\\nclass third :public first\\n    {\\n    public :\\n    void show( )\\n        {\\n        cout<<\\\"Show of third\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    second s;\\n    third t;\\n    int i;\\n    first *ptr[]= {&s,&t};\\n    for(i=0; i<2; i++)\\n    ptr[i]->show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nShow of second\\nShow of third\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Pure Virtual Function in Cplusplus\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-04T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-28\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"pure-virtual-function-in-c\"\n    }}>{`Pure Virtual Function in C++`}</h2>\n    <p>{`A pure virtual function is a function which has its body set to 0 i.e., the pure virtual function does not have any body.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`virtual void set ( ) =0;`}</li>\n      <li parentName=\"ul\">{`A function declared in the above is known as pure virtual function. Here = 0 does not mean that function show is equal to 0.`}</li>\n      <li parentName=\"ul\">{`It simply means that the virtual function show has no body.`}</li>\n      <li parentName=\"ul\">{`The pure virtual function act as an interface and any class which inherits the class in which pure virtual function is present, has to provide the implementation for the function show.`}</li>\n      <li parentName=\"ul\">{`Any class which contains at least a pure virtual function is termed as an abstract class.`}</li>\n      <li parentName=\"ul\">{`An abstract class is a class whose objects cannot be created. As its objects cannot be created, this class has to be inherited by some other class.`}</li>\n      <li parentName=\"ul\">{`The derived class must define the implementation of all the pure virtual function presents in the class.`}</li>\n      <li parentName=\"ul\">{`If the derived class does not define all the pure virtual function than derived class also becomes abstract class.`}</li>\n      <li parentName=\"ul\">{`It is not necessary that all functions in an abstract class must be pure virtual.`}</li>\n      <li parentName=\"ul\">{`An abstract class may have other virtual or non-virtual functions, data members which may be used by the objects of derived classes.`}</li>\n      <li parentName=\"ul\">{`The concept behind abstract class is to force derived classes to redefine pure virtual functions as per their requirements and features they posses.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-pure-virtual-function\"\n    }}>{`Example-1: Write a C++ program to illustrate pure virtual function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"show of second class\"<<endl;\n        }\n    };\nint main( )\n    {\n    first *ptr=new second;\n    ptr->show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nshow of second class\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-pure-virtual-function\"\n    }}>{`Example-2: Write a C++ program to illustrate pure virtual function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of second\"<<endl;\n        }\n    };\nclass third :public first\n    {\n    };\nint main( )\n    {\n    first *ptr=new second;\n    ptr->show( );\n    ptr=new third; // line causes error\n    ptr->show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nerror: invalid new-expression of abstract class type 'third'|\nbecause the following virtual functions are pure within 'third':|\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrate-another-example-pure-virtual-function\"\n    }}>{`Example-3: Write a C++ program to illustrate another example pure virtual function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate another example pure virtual function.\n#include<iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void virtual show( )=0;\n    };\nclass second :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of second\"<<endl;\n        }\n    };\nclass third :public first\n    {\n    public :\n    void show( )\n        {\n        cout<<\"Show of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    third t;\n    int i;\n    first *ptr[]= {&s,&t};\n    for(i=0; i<2; i++)\n    ptr[i]->show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nShow of second\nShow of third\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}