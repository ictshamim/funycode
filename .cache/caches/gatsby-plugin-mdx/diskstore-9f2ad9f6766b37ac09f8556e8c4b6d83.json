{"expireTime":9007200882776279000,"key":"gatsby-plugin-mdx-entire-payload-26452446e88a5869654ccb3056eff0dd-/funycode-undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Constructor and Destructor in Inheritance","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":45,"offset":44},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":45,"offset":44},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Assume a small example of single level inheritance in which class A is inherited by class B.","position":{"start":{"line":2,"column":1,"offset":46},"end":{"line":2,"column":93,"offset":138},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":46},"end":{"line":2,"column":93,"offset":138},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Both the classes have their default constructors.","position":{"start":{"line":4,"column":3,"offset":144},"end":{"line":4,"column":52,"offset":193},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":144},"end":{"line":4,"column":52,"offset":193},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":142},"end":{"line":4,"column":52,"offset":193},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When an object of class B is created, it calls the constructor of class B, but as this class B has got A as its parent class, constructor of class A will be called first, then constructor of class then obviously it will be using the data members from base class.","position":{"start":{"line":5,"column":3,"offset":197},"end":{"line":5,"column":265,"offset":459},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":197},"end":{"line":5,"column":265,"offset":459},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":195},"end":{"line":5,"column":265,"offset":459},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Now without calling the constructor of base class, data members of base class, unexpected results may follow.","position":{"start":{"line":6,"column":3,"offset":463},"end":{"line":6,"column":112,"offset":572},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":463},"end":{"line":6,"column":112,"offset":572},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":461},"end":{"line":6,"column":112,"offset":572},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Calling a constructor of base class first allows base class to properly set up its data members of that they can be used by derived classes.","position":{"start":{"line":7,"column":3,"offset":576},"end":{"line":7,"column":143,"offset":716},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":576},"end":{"line":7,"column":143,"offset":716},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":574},"end":{"line":7,"column":143,"offset":716},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In case of destructor in inheritance, destructor of derived class is called first and then destructor of base class is called.","position":{"start":{"line":8,"column":3,"offset":720},"end":{"line":8,"column":129,"offset":846},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":720},"end":{"line":8,"column":129,"offset":846},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":718},"end":{"line":8,"column":129,"offset":846},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This is so as it is possible that if we call destructor of base class first, destructor might be working with data members of base class.","position":{"start":{"line":9,"column":3,"offset":850},"end":{"line":9,"column":140,"offset":987},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":850},"end":{"line":9,"column":140,"offset":987},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":848},"end":{"line":9,"column":140,"offset":987},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"So, destroying them in base class has an effect of working with the data members that no longer exist. Compiler won’t allow this.","position":{"start":{"line":10,"column":3,"offset":991},"end":{"line":10,"column":132,"offset":1120},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":991},"end":{"line":10,"column":132,"offset":1120},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":989},"end":{"line":10,"column":132,"offset":1120},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"That’s why destructor class call as first so that it can do its works finishing with any of the data members of class base and do its own cleaning.","position":{"start":{"line":11,"column":3,"offset":1124},"end":{"line":11,"column":150,"offset":1271},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":1124},"end":{"line":11,"column":150,"offset":1271},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1122},"end":{"line":11,"column":150,"offset":1271},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":142},"end":{"line":11,"column":150,"offset":1271},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrate the constructor in single level inheritance.","position":{"start":{"line":12,"column":5,"offset":1277},"end":{"line":12,"column":94,"offset":1366},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1273},"end":{"line":12,"column":94,"offset":1366},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate inheritance in single level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first( )\n        {\n        cout<<\"Hello from con of first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    second( ) :first( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    }","position":{"start":{"line":13,"column":1,"offset":1368},"end":{"line":37,"column":4,"offset":1820},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from con of first\nHello from con of second","position":{"start":{"line":38,"column":1,"offset":1822},"end":{"line":42,"column":4,"offset":1890},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to illustrate the  constructor and destructor in single level inheritance.","position":{"start":{"line":43,"column":5,"offset":1896},"end":{"line":43,"column":110,"offset":2001},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1892},"end":{"line":43,"column":110,"offset":2001},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate the  constructor and destructor in single level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n{\npublic :\nfirst( )\n        {\n        cout<<\"Hello from con\"<<endl;\n        }\n        ~first( )\n        {\n        cout<<\"Bye Bye from des of first \"<<endl;\n        }\n    };\nclass second : public first\n    {\n    public :\n    second( ) :first( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    ~second( )\n        {\n        cout<<\"Bye Bye from des of second\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    }","position":{"start":{"line":44,"column":1,"offset":2003},"end":{"line":76,"column":4,"offset":2636},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from con\nHello from con of second\nBye Bye from des of second\nBye Bye from des of first","position":{"start":{"line":77,"column":1,"offset":2638},"end":{"line":83,"column":4,"offset":2752},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to illustrate the  constructor in multi level inheritance.","position":{"start":{"line":84,"column":5,"offset":2758},"end":{"line":84,"column":94,"offset":2847},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2754},"end":{"line":84,"column":94,"offset":2847},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate the  constructor and destructor in multi level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first( )\n        {\n        cout<<\"Hello from con of first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    second ( ) : first( )\n        {\n        cout<<\"Hello from con of second \"<<endl;\n        }\n    };\nclass third : second\n    {\n    public :\n    third( ) :second ( )\n        {\n        cout<<\"Hello from con of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    third t;\n    }","position":{"start":{"line":85,"column":1,"offset":2849},"end":{"line":117,"column":4,"offset":3469},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from con of first\nHello from con of second\nHello from con of third","position":{"start":{"line":118,"column":1,"offset":3471},"end":{"line":123,"column":4,"offset":3564},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to illustrate the  constructor  in multiple level inheritance.","position":{"start":{"line":124,"column":5,"offset":3570},"end":{"line":124,"column":98,"offset":3663},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":3566},"end":{"line":124,"column":98,"offset":3663},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate the  constructor  in multiple level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first ( )\n        {\n        cout<<\"Hello from con first\"<<endl;\n        }\n    };\nclass second\n    {\n    public :\n    second( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    };\nclass third :second, first\n    {\n    public :\n    third( )\n        {\n        cout<<\"Hello from con of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    third t;\n    }","position":{"start":{"line":125,"column":1,"offset":3665},"end":{"line":157,"column":4,"offset":4239},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from con of second\nHello from con first\nHello from con of third","position":{"start":{"line":158,"column":1,"offset":4241},"end":{"line":163,"column":4,"offset":4331},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C++ program to illustrate the parametrized constructor  in inheritance.","position":{"start":{"line":164,"column":5,"offset":4337},"end":{"line":164,"column":95,"offset":4427},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4333},"end":{"line":164,"column":95,"offset":4427},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate the parametrized constructor  in inheritance.\n#include<iostream>\nusing namespace std;\nclass first\n{\nint fa;\npublic :\nfirst (int x)\n        {\n        fa=x;\n        cout<<\"Con of first called\"<<endl;\n        }\n    void fshow( )\n        {\n        cout<<\"fa=\"<<fa<<endl;\n        }\n    };\nclass second :public first\n{\nint sa;\npublic :\nsecond (int a) : first (a%10), sa(a/10)\n    {\n    cout<<\"Con of second called\"<<endl;\n    }\n    void sshow( )\n        {\n        fshow( );\n        cout<<\"sa=\"<<sa<<endl;\n        }\n    };\nint main( )\n    {\n    second s(234);\n    s.sshow( );\n    }","position":{"start":{"line":165,"column":1,"offset":4429},"end":{"line":202,"column":4,"offset":5086},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nCon of first called\nCon of second called\nfa=4\nsa=23","position":{"start":{"line":203,"column":1,"offset":5088},"end":{"line":209,"column":4,"offset":5161},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Constructor and Destructor in Inheritance\",\"category\":\"Cplusplus Programming\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-06T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-26\"}","position":{"start":{"line":212,"column":1,"offset":5165},"end":{"line":212,"column":234,"offset":5398},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":212,"column":234,"offset":5398}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Constructor and Destructor in Inheritance\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-06T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-26\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"constructor-and-destructor-in-inheritance\"\n  }, \"Constructor and Destructor in Inheritance\"), mdx(\"p\", null, \"Assume a small example of single level inheritance in which class A is inherited by class B.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both the classes have their default constructors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When an object of class B is created, it calls the constructor of class B, but as this class B has got A as its parent class, constructor of class A will be called first, then constructor of class then obviously it will be using the data members from base class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Now without calling the constructor of base class, data members of base class, unexpected results may follow.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Calling a constructor of base class first allows base class to properly set up its data members of that they can be used by derived classes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In case of destructor in inheritance, destructor of derived class is called first and then destructor of base class is called.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is so as it is possible that if we call destructor of base class first, destructor might be working with data members of base class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"So, destroying them in base class has an effect of working with the data members that no longer exist. Compiler won\\u2019t allow this.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"That\\u2019s why destructor class call as first so that it can do its works finishing with any of the data members of class base and do its own cleaning.\")), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-the-constructor-in-single-level-inheritance\"\n  }, \"Example-1: Write a C++ program to illustrate the constructor in single level inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate inheritance in single level inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    first( )\\n        {\\n        cout<<\\\"Hello from con of first\\\"<<endl;\\n        }\\n    };\\nclass second :public first\\n    {\\n    public :\\n    second( ) :first( )\\n        {\\n        cout<<\\\"Hello from con of second\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    second s;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from con of first\\nHello from con of second\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-the--constructor-and-destructor-in-single-level-inheritance\"\n  }, \"Example-2: Write a C++ program to illustrate the  constructor and destructor in single level inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate the  constructor and destructor in single level inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass first\\n{\\npublic :\\nfirst( )\\n        {\\n        cout<<\\\"Hello from con\\\"<<endl;\\n        }\\n        ~first( )\\n        {\\n        cout<<\\\"Bye Bye from des of first \\\"<<endl;\\n        }\\n    };\\nclass second : public first\\n    {\\n    public :\\n    second( ) :first( )\\n        {\\n        cout<<\\\"Hello from con of second\\\"<<endl;\\n        }\\n    ~second( )\\n        {\\n        cout<<\\\"Bye Bye from des of second\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    second s;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from con\\nHello from con of second\\nBye Bye from des of second\\nBye Bye from des of first\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrate-the--constructor-in-multi-level-inheritance\"\n  }, \"Example-3: Write a C++ program to illustrate the  constructor in multi level inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate the  constructor and destructor in multi level inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    first( )\\n        {\\n        cout<<\\\"Hello from con of first\\\"<<endl;\\n        }\\n    };\\nclass second :public first\\n    {\\n    public :\\n    second ( ) : first( )\\n        {\\n        cout<<\\\"Hello from con of second \\\"<<endl;\\n        }\\n    };\\nclass third : second\\n    {\\n    public :\\n    third( ) :second ( )\\n        {\\n        cout<<\\\"Hello from con of third\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    third t;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from con of first\\nHello from con of second\\nHello from con of third\\n\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to-illustrate-the--constructor--in-multiple-level-inheritance\"\n  }, \"Example-4: Write a C++ program to illustrate the  constructor  in multiple level inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate the  constructor  in multiple level inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    first ( )\\n        {\\n        cout<<\\\"Hello from con first\\\"<<endl;\\n        }\\n    };\\nclass second\\n    {\\n    public :\\n    second( )\\n        {\\n        cout<<\\\"Hello from con of second\\\"<<endl;\\n        }\\n    };\\nclass third :second, first\\n    {\\n    public :\\n    third( )\\n        {\\n        cout<<\\\"Hello from con of third\\\"<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    third t;\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from con of second\\nHello from con first\\nHello from con of third\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-illustrate-the-parametrized-constructor--in-inheritance\"\n  }, \"Example-5: Write a C++ program to illustrate the parametrized constructor  in inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate the parametrized constructor  in inheritance.\\n#include<iostream>\\nusing namespace std;\\nclass first\\n{\\nint fa;\\npublic :\\nfirst (int x)\\n        {\\n        fa=x;\\n        cout<<\\\"Con of first called\\\"<<endl;\\n        }\\n    void fshow( )\\n        {\\n        cout<<\\\"fa=\\\"<<fa<<endl;\\n        }\\n    };\\nclass second :public first\\n{\\nint sa;\\npublic :\\nsecond (int a) : first (a%10), sa(a/10)\\n    {\\n    cout<<\\\"Con of second called\\\"<<endl;\\n    }\\n    void sshow( )\\n        {\\n        fshow( );\\n        cout<<\\\"sa=\\\"<<sa<<endl;\\n        }\\n    };\\nint main( )\\n    {\\n    second s(234);\\n    s.sshow( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nCon of first called\\nCon of second called\\nfa=4\\nsa=23\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Constructor and Destructor in Inheritance\",\n  \"category\": \"Cplusplus Programming\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-06T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-26\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"constructor-and-destructor-in-inheritance\"\n    }}>{`Constructor and Destructor in Inheritance`}</h2>\n    <p>{`Assume a small example of single level inheritance in which class A is inherited by class B.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Both the classes have their default constructors.`}</li>\n      <li parentName=\"ul\">{`When an object of class B is created, it calls the constructor of class B, but as this class B has got A as its parent class, constructor of class A will be called first, then constructor of class then obviously it will be using the data members from base class.`}</li>\n      <li parentName=\"ul\">{`Now without calling the constructor of base class, data members of base class, unexpected results may follow.`}</li>\n      <li parentName=\"ul\">{`Calling a constructor of base class first allows base class to properly set up its data members of that they can be used by derived classes.`}</li>\n      <li parentName=\"ul\">{`In case of destructor in inheritance, destructor of derived class is called first and then destructor of base class is called.`}</li>\n      <li parentName=\"ul\">{`This is so as it is possible that if we call destructor of base class first, destructor might be working with data members of base class.`}</li>\n      <li parentName=\"ul\">{`So, destroying them in base class has an effect of working with the data members that no longer exist. Compiler won’t allow this.`}</li>\n      <li parentName=\"ul\">{`That’s why destructor class call as first so that it can do its works finishing with any of the data members of class base and do its own cleaning.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-the-constructor-in-single-level-inheritance\"\n    }}>{`Example-1: Write a C++ program to illustrate the constructor in single level inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate inheritance in single level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first( )\n        {\n        cout<<\"Hello from con of first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    second( ) :first( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from con of first\nHello from con of second\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-the--constructor-and-destructor-in-single-level-inheritance\"\n    }}>{`Example-2: Write a C++ program to illustrate the  constructor and destructor in single level inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate the  constructor and destructor in single level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n{\npublic :\nfirst( )\n        {\n        cout<<\"Hello from con\"<<endl;\n        }\n        ~first( )\n        {\n        cout<<\"Bye Bye from des of first \"<<endl;\n        }\n    };\nclass second : public first\n    {\n    public :\n    second( ) :first( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    ~second( )\n        {\n        cout<<\"Bye Bye from des of second\"<<endl;\n        }\n    };\nint main( )\n    {\n    second s;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from con\nHello from con of second\nBye Bye from des of second\nBye Bye from des of first\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrate-the--constructor-in-multi-level-inheritance\"\n    }}>{`Example-3: Write a C++ program to illustrate the  constructor in multi level inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate the  constructor and destructor in multi level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first( )\n        {\n        cout<<\"Hello from con of first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    second ( ) : first( )\n        {\n        cout<<\"Hello from con of second \"<<endl;\n        }\n    };\nclass third : second\n    {\n    public :\n    third( ) :second ( )\n        {\n        cout<<\"Hello from con of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    third t;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from con of first\nHello from con of second\nHello from con of third\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to-illustrate-the--constructor--in-multiple-level-inheritance\"\n    }}>{`Example-4: Write a C++ program to illustrate the  constructor  in multiple level inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate the  constructor  in multiple level inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    first ( )\n        {\n        cout<<\"Hello from con first\"<<endl;\n        }\n    };\nclass second\n    {\n    public :\n    second( )\n        {\n        cout<<\"Hello from con of second\"<<endl;\n        }\n    };\nclass third :second, first\n    {\n    public :\n    third( )\n        {\n        cout<<\"Hello from con of third\"<<endl;\n        }\n    };\nint main( )\n    {\n    third t;\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from con of second\nHello from con first\nHello from con of third\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-illustrate-the-parametrized-constructor--in-inheritance\"\n    }}>{`Example-5: Write a C++ program to illustrate the parametrized constructor  in inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate the parametrized constructor  in inheritance.\n#include<iostream>\nusing namespace std;\nclass first\n{\nint fa;\npublic :\nfirst (int x)\n        {\n        fa=x;\n        cout<<\"Con of first called\"<<endl;\n        }\n    void fshow( )\n        {\n        cout<<\"fa=\"<<fa<<endl;\n        }\n    };\nclass second :public first\n{\nint sa;\npublic :\nsecond (int a) : first (a%10), sa(a/10)\n    {\n    cout<<\"Con of second called\"<<endl;\n    }\n    void sshow( )\n        {\n        fshow( );\n        cout<<\"sa=\"<<sa<<endl;\n        }\n    };\nint main( )\n    {\n    second s(234);\n    s.sshow( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nCon of first called\nCon of second called\nfa=4\nsa=23\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}