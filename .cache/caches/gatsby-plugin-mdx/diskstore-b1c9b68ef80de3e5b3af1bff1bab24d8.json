{"expireTime":9007200883071742000,"key":"gatsby-plugin-mdx-entire-payload-730515cf54192e7b56d59c441a583ba1--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Single Level Inheritance","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":28,"offset":27},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":28,"offset":27},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A derived class with only one base class, is called single inheritance. When a class extends another one class only then we call it a single inheritance.","position":{"start":{"line":2,"column":1,"offset":29},"end":{"line":2,"column":154,"offset":182},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":29},"end":{"line":2,"column":154,"offset":182},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-1: Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.","position":{"start":{"line":4,"column":5,"offset":190},"end":{"line":4,"column":118,"offset":303},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":186},"end":{"line":4,"column":118,"offset":303},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int sup_a;\n    public :\n    void sup_input(int x)\n        {\n        sup_a=x;\n        }\n    void sup_show( )\n        {\n        cout<<\"sup_a=\"<<sup_a<<endl;\n        }\n    };\nclass sub :public super\n    {\n    };\n\nint main( )\n    {\n    int i;\n    sub o1;\n    cout<<\"Enter a data member for class super :=\";\n    cin>>i;\n    o1.sup_input(i);\n    o1.sup_show( );\n    }","position":{"start":{"line":5,"column":1,"offset":305},"end":{"line":35,"column":4,"offset":874},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nEnter a data member for class super :=20\nsup_a=20","position":{"start":{"line":36,"column":1,"offset":876},"end":{"line":40,"column":4,"offset":945},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-2: Write a C++ program to illustrate another single level inheritance where subclass publicly inherited the base class.","position":{"start":{"line":41,"column":5,"offset":951},"end":{"line":41,"column":132,"offset":1078},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":947},"end":{"line":41,"column":132,"offset":1078},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int sup_a;\n    public :\n    void sup_input( )\n        {\n        cout<<\"ENTER THE VALUE FOR SUP_A\"<<endl;\n        cin>>sup_a;\n        }\n    void sup_show( )\n        {\n        cout<<\"Sup_a=\"<<sup_a<<endl;\n        }\n    };\nclass sub :public super\n{\nint sub_a;\npublic :\n    void sub_input( )\n        {\n        sup_input( );\n        cout<<\"Enter the value for sub_a\"<<endl;\n        cin>>sub_a;\n        }\n    void sub_show( )\n        {\n        sup_show( );\n        cout<<\"Sub_a=\"<<sub_a<<endl;\n        }\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sub_input( );\n    obj.sub_show( );\n    }","position":{"start":{"line":42,"column":1,"offset":1080},"end":{"line":83,"column":4,"offset":1884},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nENTER THE VALUE FOR SUP_A\n20\nEnter the value for sub_a\n34\nSup_a=20\nSub_a=34","position":{"start":{"line":84,"column":1,"offset":1886},"end":{"line":92,"column":4,"offset":1985},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-3: Write a C++ program to illustrate single level private inheritance .","position":{"start":{"line":94,"column":5,"offset":1993},"end":{"line":94,"column":84,"offset":2072},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":1989},"end":{"line":94,"column":84,"offset":2072},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate single level private inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    public :\n    void sup_show( )\n        {\n        cout<<\"Hello from super\"<<endl;\n        }\n    };\nclass sub :private super\n    {\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sup_show( );\n    }","position":{"start":{"line":95,"column":1,"offset":2074},"end":{"line":116,"column":4,"offset":2432},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nerror: 'void super::sup_show()' is inaccessible|","position":{"start":{"line":117,"column":1,"offset":2434},"end":{"line":120,"column":4,"offset":2501},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Explanation","position":{"start":{"line":121,"column":5,"offset":2507},"end":{"line":121,"column":16,"offset":2518},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2503},"end":{"line":121,"column":16,"offset":2518},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In private inheritance all public members (data & function) becomes private for the derived class. As sup_show of class super becomes private in the sub class it cannot be accessed outside the class.","position":{"start":{"line":122,"column":3,"offset":2522},"end":{"line":122,"column":202,"offset":2721},"indent":[]}}],"position":{"start":{"line":122,"column":3,"offset":2522},"end":{"line":122,"column":202,"offset":2721},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2520},"end":{"line":122,"column":202,"offset":2721},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2520},"end":{"line":122,"column":202,"offset":2721},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-4: Write a C++ program to illustrate another example Single level private inheritance .","position":{"start":{"line":125,"column":5,"offset":2731},"end":{"line":125,"column":100,"offset":2826},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":2727},"end":{"line":125,"column":100,"offset":2826},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate another example Single level private inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n\n    public :\n    void sup_show( )\n        {\n        cout<<\"Hello from super\"<<endl;\n        }\n    };\nclass sub :private super\n    {\n    public :\n    void sub_show( )\n        {\n        sup_show( );\n        cout<<\"Hello from sub\"<<endl;\n        }\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sub_show( );\n    }","position":{"start":{"line":126,"column":1,"offset":2828},"end":{"line":154,"column":4,"offset":3323},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from super\nHello from sub","position":{"start":{"line":155,"column":1,"offset":3325},"end":{"line":159,"column":4,"offset":3376},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-5: Write a C++ program to illustrate example Single level protected inheritance .","position":{"start":{"line":161,"column":5,"offset":3384},"end":{"line":161,"column":94,"offset":3473},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3380},"end":{"line":161,"column":94,"offset":3473},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate example Single level protected inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n\n    public :\n    void show( )\n        {\n        cout<<\"hello from super\"<<endl;\n        }\n    };\nclass sub :protected super\n    {\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.show( );\n    }","position":{"start":{"line":162,"column":1,"offset":3475},"end":{"line":184,"column":4,"offset":3839},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nerror: 'void super::show()' is inaccessible|","position":{"start":{"line":185,"column":1,"offset":3841},"end":{"line":188,"column":4,"offset":3904},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-6: Write a C++ program to illustrate accessing private member in private in inheritance.","position":{"start":{"line":189,"column":5,"offset":3910},"end":{"line":189,"column":101,"offset":4006},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":3906},"end":{"line":189,"column":101,"offset":4006},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate accessing private member in private in inheritance.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int num;\n    public :\n    void input(int x)\n        {\n        num=x;\n        }\n    int &getnum( )\n        {\n        return num;\n        }\n    void super_show( )\n        {\n        cout<<\"Num in class super is\"<<num<<endl;\n        }\n    };\nclass sub :super\n{\npublic :\nvoid show( )\n    {\n    input(50);\n    cout<<\"Num in class sub is\"<<getnum( )<<endl;\n    getnum( )=getnum( )*getnum( );\n    super_show( );\n    }\n };\n\nint main( )\n    {\n    sub obj;\n    obj.show( );\n    }","position":{"start":{"line":190,"column":1,"offset":4008},"end":{"line":228,"column":4,"offset":4675},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nNum in class sub is 50\nNum in class super is 2500","position":{"start":{"line":229,"column":1,"offset":4677},"end":{"line":233,"column":4,"offset":4746},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example-7: Write a C++ program to illustrate multilevel inheritance.","position":{"start":{"line":234,"column":5,"offset":4752},"end":{"line":234,"column":73,"offset":4820},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":4748},"end":{"line":234,"column":73,"offset":4820},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a C++ program to illustrate multilevel inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void show_f( )\n        {\n        cout<<\"Hello from first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    void show_s( )\n        {\n        cout<<\"Hello from second\"<<endl;\n        }\n    };\nclass third : public second\n    {\n    public :\n    void show_t( )\n        {\n        show_f( );\n        show_s( );\n        cout<<\"Hello from third\"<<endl;\n        }\n    };\n\nint main( )\n{\nthird t;\nt.show_t( );\n}","position":{"start":{"line":235,"column":1,"offset":4822},"end":{"line":271,"column":4,"offset":5428},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"Output:\nHello from first\nHello from second\nHello from third","position":{"start":{"line":272,"column":1,"offset":5430},"end":{"line":277,"column":4,"offset":5502},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Single & Multilevel Inheritance\",\"category\":\"Cplusplus Tutorial\",\"author\":\"Anonymous\",\"tags\":[\"#C++\",\"#tutorial\"],\"date\":\"2021-01-09T00:00:00.000Z\",\"thumbnailText\":\"C++ Tutorial-23\"}","position":{"start":{"line":280,"column":1,"offset":5506},"end":{"line":280,"column":221,"offset":5726},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":280,"column":221,"offset":5726}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Single & Multilevel Inheritance\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-09T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-23\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"single-level-inheritance\"\n  }, \"Single Level Inheritance\"), mdx(\"p\", null, \"A derived class with only one base class, is called single inheritance. When a class extends another one class only then we call it a single inheritance.\"), mdx(\"h3\", {\n    \"id\": \"example-1-write-a-c-program-to-illustrate-single-inheritance-where-subclass-publicly-inherited-the-base-class\"\n  }, \"Example-1: Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n    int sup_a;\\n    public :\\n    void sup_input(int x)\\n        {\\n        sup_a=x;\\n        }\\n    void sup_show( )\\n        {\\n        cout<<\\\"sup_a=\\\"<<sup_a<<endl;\\n        }\\n    };\\nclass sub :public super\\n    {\\n    };\\n\\nint main( )\\n    {\\n    int i;\\n    sub o1;\\n    cout<<\\\"Enter a data member for class super :=\\\";\\n    cin>>i;\\n    o1.sup_input(i);\\n    o1.sup_show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nEnter a data member for class super :=20\\nsup_a=20\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2-write-a-c-program-to-illustrate-another-single-level-inheritance-where-subclass-publicly-inherited-the-base-class\"\n  }, \"Example-2: Write a C++ program to illustrate another single level inheritance where subclass publicly inherited the base class.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n    int sup_a;\\n    public :\\n    void sup_input( )\\n        {\\n        cout<<\\\"ENTER THE VALUE FOR SUP_A\\\"<<endl;\\n        cin>>sup_a;\\n        }\\n    void sup_show( )\\n        {\\n        cout<<\\\"Sup_a=\\\"<<sup_a<<endl;\\n        }\\n    };\\nclass sub :public super\\n{\\nint sub_a;\\npublic :\\n    void sub_input( )\\n        {\\n        sup_input( );\\n        cout<<\\\"Enter the value for sub_a\\\"<<endl;\\n        cin>>sub_a;\\n        }\\n    void sub_show( )\\n        {\\n        sup_show( );\\n        cout<<\\\"Sub_a=\\\"<<sub_a<<endl;\\n        }\\n    };\\n\\nint main( )\\n    {\\n    sub obj;\\n    obj.sub_input( );\\n    obj.sub_show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nENTER THE VALUE FOR SUP_A\\n20\\nEnter the value for sub_a\\n34\\nSup_a=20\\nSub_a=34\\n\")), mdx(\"h3\", {\n    \"id\": \"example-3-write-a-c-program-to-illustrate-single-level-private-inheritance-\"\n  }, \"Example-3: Write a C++ program to illustrate single level private inheritance .\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate single level private inheritance .\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n    public :\\n    void sup_show( )\\n        {\\n        cout<<\\\"Hello from super\\\"<<endl;\\n        }\\n    };\\nclass sub :private super\\n    {\\n    };\\n\\nint main( )\\n    {\\n    sub obj;\\n    obj.sup_show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nerror: 'void super::sup_show()' is inaccessible|\\n\")), mdx(\"h3\", {\n    \"id\": \"explanation\"\n  }, \"Explanation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In private inheritance all public members (data & function) becomes private for the derived class. As sup_show of class super becomes private in the sub class it cannot be accessed outside the class.\")), mdx(\"h3\", {\n    \"id\": \"example-4-write-a-c-program-to-illustrate-another-example-single-level-private-inheritance-\"\n  }, \"Example-4: Write a C++ program to illustrate another example Single level private inheritance .\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate another example Single level private inheritance .\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n\\n    public :\\n    void sup_show( )\\n        {\\n        cout<<\\\"Hello from super\\\"<<endl;\\n        }\\n    };\\nclass sub :private super\\n    {\\n    public :\\n    void sub_show( )\\n        {\\n        sup_show( );\\n        cout<<\\\"Hello from sub\\\"<<endl;\\n        }\\n    };\\n\\nint main( )\\n    {\\n    sub obj;\\n    obj.sub_show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from super\\nHello from sub\\n\")), mdx(\"h3\", {\n    \"id\": \"example-5-write-a-c-program-to-illustrate-example-single-level-protected-inheritance-\"\n  }, \"Example-5: Write a C++ program to illustrate example Single level protected inheritance .\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate example Single level protected inheritance .\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n\\n    public :\\n    void show( )\\n        {\\n        cout<<\\\"hello from super\\\"<<endl;\\n        }\\n    };\\nclass sub :protected super\\n    {\\n    };\\n\\nint main( )\\n    {\\n    sub obj;\\n    obj.show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nerror: 'void super::show()' is inaccessible|\\n\")), mdx(\"h3\", {\n    \"id\": \"example-6-write-a-c-program-to-illustrate-accessing-private-member-in-private-in-inheritance\"\n  }, \"Example-6: Write a C++ program to illustrate accessing private member in private in inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate accessing private member in private in inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass super\\n    {\\n    int num;\\n    public :\\n    void input(int x)\\n        {\\n        num=x;\\n        }\\n    int &getnum( )\\n        {\\n        return num;\\n        }\\n    void super_show( )\\n        {\\n        cout<<\\\"Num in class super is\\\"<<num<<endl;\\n        }\\n    };\\nclass sub :super\\n{\\npublic :\\nvoid show( )\\n    {\\n    input(50);\\n    cout<<\\\"Num in class sub is\\\"<<getnum( )<<endl;\\n    getnum( )=getnum( )*getnum( );\\n    super_show( );\\n    }\\n };\\n\\nint main( )\\n    {\\n    sub obj;\\n    obj.show( );\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nNum in class sub is 50\\nNum in class super is 2500\\n\")), mdx(\"h3\", {\n    \"id\": \"example-7-write-a-c-program-to-illustrate-multilevel-inheritance\"\n  }, \"Example-7: Write a C++ program to illustrate multilevel inheritance.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a C++ program to illustrate multilevel inheritance.\\n#include <iostream>\\nusing namespace std;\\nclass first\\n    {\\n    public :\\n    void show_f( )\\n        {\\n        cout<<\\\"Hello from first\\\"<<endl;\\n        }\\n    };\\nclass second :public first\\n    {\\n    public :\\n    void show_s( )\\n        {\\n        cout<<\\\"Hello from second\\\"<<endl;\\n        }\\n    };\\nclass third : public second\\n    {\\n    public :\\n    void show_t( )\\n        {\\n        show_f( );\\n        show_s( );\\n        cout<<\\\"Hello from third\\\"<<endl;\\n        }\\n    };\\n\\nint main( )\\n{\\nthird t;\\nt.show_t( );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Output:\\nHello from first\\nHello from second\\nHello from third\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Single & Multilevel Inheritance\",\n  \"category\": \"Cplusplus Tutorial\",\n  \"author\": \"Anonymous\",\n  \"tags\": [\"#C++\", \"#tutorial\"],\n  \"date\": \"2021-01-09T00:00:00.000Z\",\n  \"thumbnailText\": \"C++ Tutorial-23\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"single-level-inheritance\"\n    }}>{`Single Level Inheritance`}</h2>\n    <p>{`A derived class with only one base class, is called single inheritance. When a class extends another one class only then we call it a single inheritance.`}</p>\n    <h3 {...{\n      \"id\": \"example-1-write-a-c-program-to-illustrate-single-inheritance-where-subclass-publicly-inherited-the-base-class\"\n    }}>{`Example-1: Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int sup_a;\n    public :\n    void sup_input(int x)\n        {\n        sup_a=x;\n        }\n    void sup_show( )\n        {\n        cout<<\"sup_a=\"<<sup_a<<endl;\n        }\n    };\nclass sub :public super\n    {\n    };\n\nint main( )\n    {\n    int i;\n    sub o1;\n    cout<<\"Enter a data member for class super :=\";\n    cin>>i;\n    o1.sup_input(i);\n    o1.sup_show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nEnter a data member for class super :=20\nsup_a=20\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2-write-a-c-program-to-illustrate-another-single-level-inheritance-where-subclass-publicly-inherited-the-base-class\"\n    }}>{`Example-2: Write a C++ program to illustrate another single level inheritance where subclass publicly inherited the base class.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate single inheritance where subclass publicly inherited the base class.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int sup_a;\n    public :\n    void sup_input( )\n        {\n        cout<<\"ENTER THE VALUE FOR SUP_A\"<<endl;\n        cin>>sup_a;\n        }\n    void sup_show( )\n        {\n        cout<<\"Sup_a=\"<<sup_a<<endl;\n        }\n    };\nclass sub :public super\n{\nint sub_a;\npublic :\n    void sub_input( )\n        {\n        sup_input( );\n        cout<<\"Enter the value for sub_a\"<<endl;\n        cin>>sub_a;\n        }\n    void sub_show( )\n        {\n        sup_show( );\n        cout<<\"Sub_a=\"<<sub_a<<endl;\n        }\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sub_input( );\n    obj.sub_show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nENTER THE VALUE FOR SUP_A\n20\nEnter the value for sub_a\n34\nSup_a=20\nSub_a=34\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3-write-a-c-program-to-illustrate-single-level-private-inheritance-\"\n    }}>{`Example-3: Write a C++ program to illustrate single level private inheritance .`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate single level private inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    public :\n    void sup_show( )\n        {\n        cout<<\"Hello from super\"<<endl;\n        }\n    };\nclass sub :private super\n    {\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sup_show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nerror: 'void super::sup_show()' is inaccessible|\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`In private inheritance all public members (data & function) becomes private for the derived class. As sup_show of class super becomes private in the sub class it cannot be accessed outside the class.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-4-write-a-c-program-to-illustrate-another-example-single-level-private-inheritance-\"\n    }}>{`Example-4: Write a C++ program to illustrate another example Single level private inheritance .`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate another example Single level private inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n\n    public :\n    void sup_show( )\n        {\n        cout<<\"Hello from super\"<<endl;\n        }\n    };\nclass sub :private super\n    {\n    public :\n    void sub_show( )\n        {\n        sup_show( );\n        cout<<\"Hello from sub\"<<endl;\n        }\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.sub_show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from super\nHello from sub\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-5-write-a-c-program-to-illustrate-example-single-level-protected-inheritance-\"\n    }}>{`Example-5: Write a C++ program to illustrate example Single level protected inheritance .`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate example Single level protected inheritance .\n#include <iostream>\nusing namespace std;\nclass super\n    {\n\n    public :\n    void show( )\n        {\n        cout<<\"hello from super\"<<endl;\n        }\n    };\nclass sub :protected super\n    {\n    };\n\nint main( )\n    {\n    sub obj;\n    obj.show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nerror: 'void super::show()' is inaccessible|\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-6-write-a-c-program-to-illustrate-accessing-private-member-in-private-in-inheritance\"\n    }}>{`Example-6: Write a C++ program to illustrate accessing private member in private in inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate accessing private member in private in inheritance.\n#include <iostream>\nusing namespace std;\nclass super\n    {\n    int num;\n    public :\n    void input(int x)\n        {\n        num=x;\n        }\n    int &getnum( )\n        {\n        return num;\n        }\n    void super_show( )\n        {\n        cout<<\"Num in class super is\"<<num<<endl;\n        }\n    };\nclass sub :super\n{\npublic :\nvoid show( )\n    {\n    input(50);\n    cout<<\"Num in class sub is\"<<getnum( )<<endl;\n    getnum( )=getnum( )*getnum( );\n    super_show( );\n    }\n };\n\nint main( )\n    {\n    sub obj;\n    obj.show( );\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nNum in class sub is 50\nNum in class super is 2500\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-7-write-a-c-program-to-illustrate-multilevel-inheritance\"\n    }}>{`Example-7: Write a C++ program to illustrate multilevel inheritance.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a C++ program to illustrate multilevel inheritance.\n#include <iostream>\nusing namespace std;\nclass first\n    {\n    public :\n    void show_f( )\n        {\n        cout<<\"Hello from first\"<<endl;\n        }\n    };\nclass second :public first\n    {\n    public :\n    void show_s( )\n        {\n        cout<<\"Hello from second\"<<endl;\n        }\n    };\nclass third : public second\n    {\n    public :\n    void show_t( )\n        {\n        show_f( );\n        show_s( );\n        cout<<\"Hello from third\"<<endl;\n        }\n    };\n\nint main( )\n{\nthird t;\nt.show_t( );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`Output:\nHello from first\nHello from second\nHello from third\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}